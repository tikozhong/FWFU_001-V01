
ESL22-FU001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b0  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d40  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa8  08009fa8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08009fa8  08009fa8  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fa8  08009fa8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000e10  200000fc  0800a0ac  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20000f0c  0800a0ac  00020f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fbe  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee4  00000000  00000000  000360e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00039fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  0003af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a3  00000000  00000000  0003bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fd2  00000000  00000000  00053663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084831  00000000  00000000  0006b635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000efe66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c04  00000000  00000000  000efeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000fc 	.word	0x200000fc
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009240 	.word	0x08009240

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000100 	.word	0x20000100
 80000fc:	08009240 	.word	0x08009240

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 fc7c 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f811 	bl	800043e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f000 f94c 	bl	80006b8 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000420:	f000 f86a 	bl	80004f8 <MX_IWDG_Init>
  MX_SPI2_Init();
 8000424:	f000 f888 	bl	8000538 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000428:	f000 f8c4 	bl	80005b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800042c:	f000 f910 	bl	8000650 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  boardPreInit();
 8000430:	f004 fb42 	bl	8004ab8 <boardPreInit>
  boardInit();
 8000434:	f004 fb4e 	bl	8004ad4 <boardInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  taskPolling();
 8000438:	f006 fe46 	bl	80070c8 <taskPolling>
 800043c:	e7fc      	b.n	8000438 <main+0x28>

0800043e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043e:	b590      	push	{r4, r7, lr}
 8000440:	b093      	sub	sp, #76	; 0x4c
 8000442:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000444:	2414      	movs	r4, #20
 8000446:	193b      	adds	r3, r7, r4
 8000448:	0018      	movs	r0, r3
 800044a:	2334      	movs	r3, #52	; 0x34
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f007 fd60 	bl	8007f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	0018      	movs	r0, r3
 8000458:	2310      	movs	r3, #16
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f007 fd59 	bl	8007f14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000462:	2380      	movs	r3, #128	; 0x80
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fa78 	bl	800195c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	220a      	movs	r2, #10
 8000470:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800047a:	0021      	movs	r1, r4
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2240      	movs	r2, #64	; 0x40
 8000486:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2201      	movs	r2, #1
 800048c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2202      	movs	r2, #2
 8000492:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2202      	movs	r2, #2
 8000498:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2208      	movs	r2, #8
 80004a4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	0292      	lsls	r2, r2, #10
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2280      	movs	r2, #128	; 0x80
 80004b2:	0592      	lsls	r2, r2, #22
 80004b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 fa9b 	bl	80019f4 <HAL_RCC_OscConfig>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004c2:	f000 fa3f 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2207      	movs	r2, #7
 80004ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2202      	movs	r2, #2
 80004d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2102      	movs	r1, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fd96 	bl	8002014 <HAL_RCC_ClockConfig>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004ec:	f000 fa2a 	bl	8000944 <Error_Handler>
  }
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b013      	add	sp, #76	; 0x4c
 80004f6:	bd90      	pop	{r4, r7, pc}

080004f8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_IWDG_Init+0x34>)
 80004fe:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <MX_IWDG_Init+0x38>)
 8000500:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_IWDG_Init+0x34>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 1023;	//255
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_IWDG_Init+0x34>)
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <MX_IWDG_Init+0x3c>)
 800050c:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 1023;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <MX_IWDG_Init+0x34>)
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <MX_IWDG_Init+0x3c>)
 8000512:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <MX_IWDG_Init+0x34>)
 8000516:	0018      	movs	r0, r3
 8000518:	f001 f9be 	bl	8001898 <HAL_IWDG_Init>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000520:	f000 fa10 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	20000118 	.word	0x20000118
 8000530:	40003000 	.word	0x40003000
 8000534:	000003ff 	.word	0x000003ff

08000538 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_SPI2_Init+0x74>)
 800053e:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <MX_SPI2_Init+0x78>)
 8000540:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_SPI2_Init+0x74>)
 8000544:	2282      	movs	r2, #130	; 0x82
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_SPI2_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_SPI2_Init+0x74>)
 8000552:	22e0      	movs	r2, #224	; 0xe0
 8000554:	00d2      	lsls	r2, r2, #3
 8000556:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_SPI2_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_SPI2_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_SPI2_Init+0x74>)
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_SPI2_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_SPI2_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_SPI2_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_SPI2_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_SPI2_Init+0x74>)
 8000586:	2207      	movs	r2, #7
 8000588:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_SPI2_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_SPI2_Init+0x74>)
 8000592:	2208      	movs	r2, #8
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MX_SPI2_Init+0x74>)
 8000598:	0018      	movs	r0, r3
 800059a:	f002 f80b 	bl	80025b4 <HAL_SPI_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f9cf 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000128 	.word	0x20000128
 80005b0:	40003800 	.word	0x40003800

080005b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005ba:	4a24      	ldr	r2, [pc, #144]	; (800064c <MX_USART1_UART_Init+0x98>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005c0:	22e1      	movs	r2, #225	; 0xe1
 80005c2:	0252      	lsls	r2, r2, #9
 80005c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_USART1_UART_Init+0x94>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f002 f890 	bl	8002724 <HAL_UART_Init>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000608:	f000 f99c 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART1_UART_Init+0x94>)
 800060e:	2100      	movs	r1, #0
 8000610:	0018      	movs	r0, r3
 8000612:	f004 f971 	bl	80048f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800061a:	f000 f993 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_USART1_UART_Init+0x94>)
 8000620:	2100      	movs	r1, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f004 f9a8 	bl	8004978 <HAL_UARTEx_SetRxFifoThreshold>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800062c:	f000 f98a 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MX_USART1_UART_Init+0x94>)
 8000632:	0018      	movs	r0, r3
 8000634:	f004 f926 	bl	8004884 <HAL_UARTEx_DisableFifoMode>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800063c:	f000 f982 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	2000018c 	.word	0x2000018c
 800064c:	40013800 	.word	0x40013800

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_USART2_UART_Init+0x64>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 800065c:	22e1      	movs	r2, #225	; 0xe1
 800065e:	0252      	lsls	r2, r2, #9
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x60>)
 800069a:	0018      	movs	r0, r3
 800069c:	f002 f842 	bl	8002724 <HAL_UART_Init>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006a4:	f000 f94e 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000220 	.word	0x20000220
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b08b      	sub	sp, #44	; 0x2c
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	2414      	movs	r4, #20
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2314      	movs	r3, #20
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f007 fc23 	bl	8007f14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b94      	ldr	r3, [pc, #592]	; (8000920 <MX_GPIO_Init+0x268>)
 80006d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d2:	4b93      	ldr	r3, [pc, #588]	; (8000920 <MX_GPIO_Init+0x268>)
 80006d4:	2104      	movs	r1, #4
 80006d6:	430a      	orrs	r2, r1
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
 80006da:	4b91      	ldr	r3, [pc, #580]	; (8000920 <MX_GPIO_Init+0x268>)
 80006dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006de:	2204      	movs	r2, #4
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e6:	4b8e      	ldr	r3, [pc, #568]	; (8000920 <MX_GPIO_Init+0x268>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ea:	4b8d      	ldr	r3, [pc, #564]	; (8000920 <MX_GPIO_Init+0x268>)
 80006ec:	2120      	movs	r1, #32
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
 80006f2:	4b8b      	ldr	r3, [pc, #556]	; (8000920 <MX_GPIO_Init+0x268>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f6:	2220      	movs	r2, #32
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b88      	ldr	r3, [pc, #544]	; (8000920 <MX_GPIO_Init+0x268>)
 8000700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000702:	4b87      	ldr	r3, [pc, #540]	; (8000920 <MX_GPIO_Init+0x268>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
 800070a:	4b85      	ldr	r3, [pc, #532]	; (8000920 <MX_GPIO_Init+0x268>)
 800070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b82      	ldr	r3, [pc, #520]	; (8000920 <MX_GPIO_Init+0x268>)
 8000718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071a:	4b81      	ldr	r3, [pc, #516]	; (8000920 <MX_GPIO_Init+0x268>)
 800071c:	2102      	movs	r1, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
 8000722:	4b7f      	ldr	r3, [pc, #508]	; (8000920 <MX_GPIO_Init+0x268>)
 8000724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	4b7c      	ldr	r3, [pc, #496]	; (8000920 <MX_GPIO_Init+0x268>)
 8000730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000732:	4b7b      	ldr	r3, [pc, #492]	; (8000920 <MX_GPIO_Init+0x268>)
 8000734:	2108      	movs	r1, #8
 8000736:	430a      	orrs	r2, r1
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
 800073a:	4b79      	ldr	r3, [pc, #484]	; (8000920 <MX_GPIO_Init+0x268>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	2208      	movs	r2, #8
 8000740:	4013      	ands	r3, r2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	015b      	lsls	r3, r3, #5
 800074a:	4876      	ldr	r0, [pc, #472]	; (8000924 <MX_GPIO_Init+0x26c>)
 800074c:	2201      	movs	r2, #1
 800074e:	0019      	movs	r1, r3
 8000750:	f001 f869 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DE_GPIO_Port, DE_Pin, GPIO_PIN_SET);
 8000754:	4b74      	ldr	r3, [pc, #464]	; (8000928 <MX_GPIO_Init+0x270>)
 8000756:	2201      	movs	r2, #1
 8000758:	2140      	movs	r1, #64	; 0x40
 800075a:	0018      	movs	r0, r3
 800075c:	f001 f863 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCL_Pin|SDA_Pin|SWCLK_BOOT_LED_Pin, GPIO_PIN_SET);
 8000760:	23b0      	movs	r3, #176	; 0xb0
 8000762:	01d9      	lsls	r1, r3, #7
 8000764:	23a0      	movs	r3, #160	; 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	2201      	movs	r2, #1
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f85b 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_RESET);
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	0219      	lsls	r1, r3, #8
 8000774:	23a0      	movs	r3, #160	; 0xa0
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	2200      	movs	r2, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f853 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8000780:	4b6a      	ldr	r3, [pc, #424]	; (800092c <MX_GPIO_Init+0x274>)
 8000782:	2200      	movs	r2, #0
 8000784:	210f      	movs	r1, #15
 8000786:	0018      	movs	r0, r3
 8000788:	f001 f84d 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT5_Pin|OUT6_Pin|OUT7_Pin, GPIO_PIN_RESET);
 800078c:	4b65      	ldr	r3, [pc, #404]	; (8000924 <MX_GPIO_Init+0x26c>)
 800078e:	2200      	movs	r2, #0
 8000790:	2138      	movs	r1, #56	; 0x38
 8000792:	0018      	movs	r0, r3
 8000794:	f001 f847 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN11_Pin IN10_Pin IN03_Pin DET_Pin */
  GPIO_InitStruct.Pin = IN11_Pin|IN10_Pin|IN03_Pin|DET_Pin;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	4a65      	ldr	r2, [pc, #404]	; (8000930 <MX_GPIO_Init+0x278>)
 800079c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2201      	movs	r2, #1
 80007a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	4a5e      	ldr	r2, [pc, #376]	; (8000928 <MX_GPIO_Init+0x270>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f000 feb7 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN02_Pin IN15_Pin */
  GPIO_InitStruct.Pin = IN02_Pin|IN15_Pin;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2203      	movs	r2, #3
 80007ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2201      	movs	r2, #1
 80007c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	4a5a      	ldr	r2, [pc, #360]	; (8000934 <MX_GPIO_Init+0x27c>)
 80007cc:	0019      	movs	r1, r3
 80007ce:	0010      	movs	r0, r2
 80007d0:	f000 fea8 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN14_Pin IN13_Pin IN12_Pin IN07_Pin
                           IN06_Pin IN05_Pin */
  GPIO_InitStruct.Pin = IN14_Pin|IN13_Pin|IN12_Pin|IN07_Pin
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	22f3      	movs	r2, #243	; 0xf3
 80007d8:	601a      	str	r2, [r3, #0]
                          |IN06_Pin|IN05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2201      	movs	r2, #1
 80007e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	193a      	adds	r2, r7, r4
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fe98 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN04_Pin IN01_Pin IN00_Pin IN09_Pin
                           IN08_Pin */
  GPIO_InitStruct.Pin = IN04_Pin|IN01_Pin|IN00_Pin|IN09_Pin
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a50      	ldr	r2, [pc, #320]	; (8000938 <MX_GPIO_Init+0x280>)
 80007f8:	601a      	str	r2, [r3, #0]
                          |IN08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2201      	movs	r2, #1
 8000804:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	193b      	adds	r3, r7, r4
 8000808:	4a46      	ldr	r2, [pc, #280]	; (8000924 <MX_GPIO_Init+0x26c>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f000 fe89 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_GP4_Pin EXT_GP3_Pin EXT_GP2_Pin EXT_GP1_Pin */
  GPIO_InitStruct.Pin = EXT_GP4_Pin|EXT_GP3_Pin|EXT_GP2_Pin|EXT_GP1_Pin;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	4a49      	ldr	r2, [pc, #292]	; (800093c <MX_GPIO_Init+0x284>)
 8000816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	193b      	adds	r3, r7, r4
 8000826:	4a3f      	ldr	r2, [pc, #252]	; (8000924 <MX_GPIO_Init+0x26c>)
 8000828:	0019      	movs	r1, r3
 800082a:	0010      	movs	r0, r2
 800082c:	f000 fe7a 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin OUT5_Pin OUT6_Pin OUT7_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|OUT5_Pin|OUT6_Pin|OUT7_Pin;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	4a43      	ldr	r2, [pc, #268]	; (8000940 <MX_GPIO_Init+0x288>)
 8000834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2201      	movs	r2, #1
 800083a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	193b      	adds	r3, r7, r4
 800084a:	4a36      	ldr	r2, [pc, #216]	; (8000924 <MX_GPIO_Init+0x26c>)
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f000 fe68 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_GP0_Pin PA13 */
  GPIO_InitStruct.Pin = EXT_GP0_Pin|GPIO_PIN_13;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2284      	movs	r2, #132	; 0x84
 8000858:	0192      	lsls	r2, r2, #6
 800085a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	193a      	adds	r2, r7, r4
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fe57 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : DE_Pin */
  GPIO_InitStruct.Pin = DE_Pin;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 800088e:	193b      	adds	r3, r7, r4
 8000890:	4a25      	ldr	r2, [pc, #148]	; (8000928 <MX_GPIO_Init+0x270>)
 8000892:	0019      	movs	r1, r3
 8000894:	0010      	movs	r0, r2
 8000896:	f000 fe45 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCL_Pin SDA_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800089a:	0021      	movs	r1, r4
 800089c:	187b      	adds	r3, r7, r1
 800089e:	22c0      	movs	r2, #192	; 0xc0
 80008a0:	0152      	lsls	r2, r2, #5
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008a4:	000c      	movs	r4, r1
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2211      	movs	r2, #17
 80008aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	193a      	adds	r2, r7, r4
 80008ba:	23a0      	movs	r3, #160	; 0xa0
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fe2f 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWCLK_BOOT_LED_Pin OUT0_Pin */
  GPIO_InitStruct.Pin = SWCLK_BOOT_LED_Pin|OUT0_Pin;
 80008c6:	0021      	movs	r1, r4
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	22c0      	movs	r2, #192	; 0xc0
 80008cc:	0212      	lsls	r2, r2, #8
 80008ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	000c      	movs	r4, r1
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	193a      	adds	r2, r7, r4
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fe19 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	220f      	movs	r2, #15
 80008f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	187b      	adds	r3, r7, r1
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <MX_GPIO_Init+0x274>)
 8000910:	0019      	movs	r1, r3
 8000912:	0010      	movs	r0, r2
 8000914:	f000 fe06 	bl	8001524 <HAL_GPIO_Init>

}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b00b      	add	sp, #44	; 0x2c
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	50000400 	.word	0x50000400
 8000928:	50000800 	.word	0x50000800
 800092c:	50000c00 	.word	0x50000c00
 8000930:	0000e080 	.word	0x0000e080
 8000934:	50001400 	.word	0x50001400
 8000938:	000003c1 	.word	0x000003c1
 800093c:	0000e002 	.word	0x0000e002
 8000940:	00001038 	.word	0x00001038

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	641a      	str	r2, [r3, #64]	; 0x40
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	2201      	movs	r2, #1
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0549      	lsls	r1, r1, #21
 8000978:	430a      	orrs	r2, r1
 800097a:	63da      	str	r2, [r3, #60]	; 0x3c
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_MspInit+0x44>)
 800097e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	055b      	lsls	r3, r3, #21
 8000984:	4013      	ands	r3, r2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	2414      	movs	r4, #20
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	2314      	movs	r3, #20
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f007 fab2 	bl	8007f14 <memset>
  if(hspi->Instance==SPI2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <HAL_SPI_MspInit+0xe8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d15d      	bne.n	8000a76 <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <HAL_SPI_MspInit+0xec>)
 80009bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <HAL_SPI_MspInit+0xec>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	01c9      	lsls	r1, r1, #7
 80009c4:	430a      	orrs	r2, r1
 80009c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <HAL_SPI_MspInit+0xec>)
 80009ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	01db      	lsls	r3, r3, #7
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <HAL_SPI_MspInit+0xec>)
 80009d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009da:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <HAL_SPI_MspInit+0xec>)
 80009dc:	2102      	movs	r1, #2
 80009de:	430a      	orrs	r2, r1
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <HAL_SPI_MspInit+0xec>)
 80009e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e6:	2202      	movs	r2, #2
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2204      	movs	r2, #4
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	2201      	movs	r2, #1
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_SPI_MspInit+0xf0>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f000 fd86 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a18:	0021      	movs	r1, r4
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	00d2      	lsls	r2, r2, #3
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	000c      	movs	r4, r1
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2202      	movs	r2, #2
 8000a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2205      	movs	r2, #5
 8000a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_SPI_MspInit+0xf0>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f000 fd6e 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a48:	0021      	movs	r1, r4
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2202      	movs	r2, #2
 8000a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_SPI_MspInit+0xf0>)
 8000a6e:	0019      	movs	r1, r3
 8000a70:	0010      	movs	r0, r2
 8000a72:	f000 fd57 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b00b      	add	sp, #44	; 0x2c
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40003800 	.word	0x40003800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	50000400 	.word	0x50000400

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b093      	sub	sp, #76	; 0x4c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2334      	movs	r3, #52	; 0x34
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f007 fa38 	bl	8007f14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	241c      	movs	r4, #28
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2318      	movs	r3, #24
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f007 fa30 	bl	8007f14 <memset>
  if(huart->Instance==USART1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a46      	ldr	r2, [pc, #280]	; (8000bd4 <HAL_UART_MspInit+0x148>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d148      	bne.n	8000b50 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 fc4b 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ad6:	f7ff ff35 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ada:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ade:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	01c9      	lsls	r1, r1, #7
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	01db      	lsls	r3, r3, #7
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b06:	2201      	movs	r2, #1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b0e:	2134      	movs	r1, #52	; 0x34
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	22c0      	movs	r2, #192	; 0xc0
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	23a0      	movs	r3, #160	; 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fcf3 	bl	8001524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	201b      	movs	r0, #27
 8000b44:	f000 fa4c 	bl	8000fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b48:	201b      	movs	r0, #27
 8000b4a:	f000 fa5e 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4e:	e03d      	b.n	8000bcc <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <HAL_UART_MspInit+0x150>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d138      	bne.n	8000bcc <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0289      	lsls	r1, r1, #10
 8000b64:	430a      	orrs	r2, r1
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	029b      	lsls	r3, r3, #10
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0x14c>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8e:	2134      	movs	r1, #52	; 0x34
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2202      	movs	r2, #2
 8000b9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2201      	movs	r2, #1
 8000bac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	187a      	adds	r2, r7, r1
 8000bb0:	23a0      	movs	r3, #160	; 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fcb4 	bl	8001524 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	201c      	movs	r0, #28
 8000bc2:	f000 fa0d 	bl	8000fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc6:	201c      	movs	r0, #28
 8000bc8:	f000 fa1f 	bl	800100a <HAL_NVIC_EnableIRQ>
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b013      	add	sp, #76	; 0x4c
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40004400 	.word	0x40004400

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8ee 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  taskIrq();
 8000c08:	f006 fa18 	bl	800703c <taskIrq>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <USART1_IRQHandler+0x14>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 ffa8 	bl	8002b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	2000018c 	.word	0x2000018c

08000c2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <USART2_IRQHandler+0x14>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 ff9c 	bl	8002b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000220 	.word	0x20000220

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f007 f908 	bl	8007e88 <__errno>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	425b      	negs	r3, r3
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	18d2      	adds	r2, r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <_sbrk+0x64>)
 8000c94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b006      	add	sp, #24
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20002000 	.word	0x20002000
 8000ca4:	00000a00 	.word	0x00000a00
 8000ca8:	200002b4 	.word	0x200002b4
 8000cac:	20000f10 	.word	0x20000f10

08000cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc0:	f7ff fff6 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cea:	f007 f8d3 	bl	8007e94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cee:	f7ff fb8f 	bl	8000410 <main>

08000cf2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000d00:	08009fb0 	.word	0x08009fb0
  ldr r2, =_sbss
 8000d04:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000d08:	20000f0c 	.word	0x20000f0c

08000d0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_Init+0x3c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Init+0x3c>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0049      	lsls	r1, r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 f810 	bl	8000d50 <HAL_InitTick>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fe08 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	230f      	movs	r3, #15
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_InitTick+0x88>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d02b      	beq.n	8000dc0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_InitTick+0x8c>)
 8000d6a:	681c      	ldr	r4, [r3, #0]
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_InitTick+0x88>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	0019      	movs	r1, r3
 8000d72:	23fa      	movs	r3, #250	; 0xfa
 8000d74:	0098      	lsls	r0, r3, #2
 8000d76:	f7ff f9d5 	bl	8000124 <__udivsi3>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	0020      	movs	r0, r4
 8000d80:	f7ff f9d0 	bl	8000124 <__udivsi3>
 8000d84:	0003      	movs	r3, r0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f953 	bl	8001032 <HAL_SYSTICK_Config>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d112      	bne.n	8000db6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d80a      	bhi.n	8000dac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 f91e 	bl	8000fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_InitTick+0x90>)
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e00d      	b.n	8000dc8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e008      	b.n	8000dc8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db6:	230f      	movs	r3, #15
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e003      	b.n	8000dc8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	781b      	ldrb	r3, [r3, #0]
}
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b005      	add	sp, #20
 8000dd4:	bd90      	pop	{r4, r7, pc}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x1c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	001a      	movs	r2, r3
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x20>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	18d2      	adds	r2, r2, r3
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_IncTick+0x20>)
 8000df6:	601a      	str	r2, [r3, #0]
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000008 	.word	0x20000008
 8000e04:	200002b8 	.word	0x200002b8

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <HAL_GetTick+0x10>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	200002b8 	.word	0x200002b8

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff fff0 	bl	8000e08 <HAL_GetTick>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	189b      	adds	r3, r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	f7ff ffe0 	bl	8000e08 <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	20000008 	.word	0x20000008

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b7f      	cmp	r3, #127	; 0x7f
 8000e76:	d809      	bhi.n	8000e8c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	231f      	movs	r3, #31
 8000e80:	401a      	ands	r2, r3
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_EnableIRQ+0x30>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	4091      	lsls	r1, r2
 8000e88:	000a      	movs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8000eac:	d828      	bhi.n	8000f00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eae:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <__NVIC_SetPriority+0xd4>)
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	33c0      	adds	r3, #192	; 0xc0
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	589b      	ldr	r3, [r3, r2]
 8000ebe:	1dfa      	adds	r2, r7, #7
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	00d2      	lsls	r2, r2, #3
 8000eca:	21ff      	movs	r1, #255	; 0xff
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	000a      	movs	r2, r1
 8000ed0:	43d2      	mvns	r2, r2
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	22ff      	movs	r2, #255	; 0xff
 8000edc:	401a      	ands	r2, r3
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	4003      	ands	r3, r0
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eec:	481f      	ldr	r0, [pc, #124]	; (8000f6c <__NVIC_SetPriority+0xd4>)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	33c0      	adds	r3, #192	; 0xc0
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000efe:	e031      	b.n	8000f64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <__NVIC_SetPriority+0xd8>)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0019      	movs	r1, r3
 8000f08:	230f      	movs	r3, #15
 8000f0a:	400b      	ands	r3, r1
 8000f0c:	3b08      	subs	r3, #8
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3306      	adds	r3, #6
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	3304      	adds	r3, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1dfa      	adds	r2, r7, #7
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	2203      	movs	r2, #3
 8000f22:	400a      	ands	r2, r1
 8000f24:	00d2      	lsls	r2, r2, #3
 8000f26:	21ff      	movs	r1, #255	; 0xff
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	401a      	ands	r2, r3
 8000f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	22ff      	movs	r2, #255	; 0xff
 8000f38:	401a      	ands	r2, r3
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2303      	movs	r3, #3
 8000f42:	4003      	ands	r3, r0
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <__NVIC_SetPriority+0xd8>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	001c      	movs	r4, r3
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	3b08      	subs	r3, #8
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	3306      	adds	r3, #6
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	18c3      	adds	r3, r0, r3
 8000f60:	3304      	adds	r3, #4
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b003      	add	sp, #12
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f78:	f3bf 8f4f 	dsb	sy
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_SystemReset+0x1c>)
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SystemReset+0x20>)
 8000f82:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f84:	f3bf 8f4f 	dsb	sy
}
 8000f88:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	e7fd      	b.n	8000f8a <__NVIC_SystemReset+0x16>
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	e000ed00 	.word	0xe000ed00
 8000f94:	05fa0004 	.word	0x05fa0004

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	045b      	lsls	r3, r3, #17
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d301      	bcc.n	8000fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2301      	movs	r3, #1
 8000fae:	e010      	b.n	8000fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <SysTick_Config+0x44>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff6a 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x44>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	210f      	movs	r1, #15
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff4b 	bl	8000e98 <__NVIC_SetPriority>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	0002      	movs	r2, r0
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff21 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800102e:	f7ff ffa1 	bl	8000f74 <__NVIC_SystemReset>

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ffab 	bl	8000f98 <SysTick_Config>
 8001042:	0003      	movs	r3, r0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e050      	b.n	8001100 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2225      	movs	r2, #37	; 0x25
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d008      	beq.n	800107c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2204      	movs	r2, #4
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2224      	movs	r2, #36	; 0x24
 8001074:	2100      	movs	r1, #0
 8001076:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e041      	b.n	8001100 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	210e      	movs	r1, #14
 8001088:	438a      	bics	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	491c      	ldr	r1, [pc, #112]	; (8001108 <HAL_DMA_Abort+0xbc>)
 8001098:	400a      	ands	r2, r1
 800109a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2101      	movs	r1, #1
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_DMA_Abort+0xc0>)
 80010ae:	6859      	ldr	r1, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	221c      	movs	r2, #28
 80010b6:	4013      	ands	r3, r2
 80010b8:	2201      	movs	r2, #1
 80010ba:	409a      	lsls	r2, r3
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_DMA_Abort+0xc0>)
 80010be:	430a      	orrs	r2, r1
 80010c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010de:	490a      	ldr	r1, [pc, #40]	; (8001108 <HAL_DMA_Abort+0xbc>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80010ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2225      	movs	r2, #37	; 0x25
 80010f2:	2101      	movs	r1, #1
 80010f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2224      	movs	r2, #36	; 0x24
 80010fa:	2100      	movs	r1, #0
 80010fc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	fffffeff 	.word	0xfffffeff
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001118:	210f      	movs	r1, #15
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2225      	movs	r2, #37	; 0x25
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d006      	beq.n	800113a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2204      	movs	r2, #4
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e049      	b.n	80011ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	210e      	movs	r1, #14
 8001146:	438a      	bics	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	438a      	bics	r2, r1
 8001158:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	491d      	ldr	r1, [pc, #116]	; (80011dc <HAL_DMA_Abort_IT+0xcc>)
 8001166:	400a      	ands	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_DMA_Abort_IT+0xd0>)
 800116c:	6859      	ldr	r1, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	221c      	movs	r2, #28
 8001174:	4013      	ands	r3, r2
 8001176:	2201      	movs	r2, #1
 8001178:	409a      	lsls	r2, r3
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_DMA_Abort_IT+0xd0>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001188:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00c      	beq.n	80011ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800119c:	490f      	ldr	r1, [pc, #60]	; (80011dc <HAL_DMA_Abort_IT+0xcc>)
 800119e:	400a      	ands	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2225      	movs	r2, #37	; 0x25
 80011b0:	2101      	movs	r1, #1
 80011b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2224      	movs	r2, #36	; 0x24
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	0010      	movs	r0, r2
 80011cc:	4798      	blx	r3
    }
  }
  return status;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b004      	add	sp, #16
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	fffffeff 	.word	0xfffffeff
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	603a      	str	r2, [r7, #0]
 80011f0:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_FLASH_Program+0x94>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_FLASH_Program+0x1a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e038      	b.n	8001270 <HAL_FLASH_Program+0x8c>
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <HAL_FLASH_Program+0x94>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_FLASH_Program+0x94>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800120a:	2517      	movs	r5, #23
 800120c:	197c      	adds	r4, r7, r5
 800120e:	23fa      	movs	r3, #250	; 0xfa
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	0018      	movs	r0, r3
 8001214:	f000 f874 	bl	8001300 <FLASH_WaitForLastOperation>
 8001218:	0003      	movs	r3, r0
 800121a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800121c:	197b      	adds	r3, r7, r5
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d11f      	bne.n	8001264 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d106      	bne.n	8001238 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	0008      	movs	r0, r1
 8001232:	f000 f8b3 	bl	800139c <FLASH_Program_DoubleWord>
 8001236:	e005      	b.n	8001244 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f008 f80a 	bl	8009258 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001244:	2317      	movs	r3, #23
 8001246:	18fc      	adds	r4, r7, r3
 8001248:	23fa      	movs	r3, #250	; 0xfa
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	0018      	movs	r0, r3
 800124e:	f000 f857 	bl	8001300 <FLASH_WaitForLastOperation>
 8001252:	0003      	movs	r3, r0
 8001254:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_FLASH_Program+0x98>)
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43d9      	mvns	r1, r3
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_FLASH_Program+0x98>)
 8001260:	400a      	ands	r2, r1
 8001262:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_FLASH_Program+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800126a:	2317      	movs	r3, #23
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b006      	add	sp, #24
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	200002bc 	.word	0x200002bc
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_FLASH_Unlock+0x3c>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da0c      	bge.n	80012ae <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_FLASH_Unlock+0x3c>)
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_FLASH_Unlock+0x40>)
 8001298:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_FLASH_Unlock+0x3c>)
 800129c:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_FLASH_Unlock+0x44>)
 800129e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_FLASH_Unlock+0x3c>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da02      	bge.n	80012ae <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
}
 80012b2:	0018      	movs	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40022000 	.word	0x40022000
 80012c0:	45670123 	.word	0x45670123
 80012c4:	cdef89ab 	.word	0xcdef89ab

080012c8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_FLASH_Lock+0x34>)
 80012d6:	695a      	ldr	r2, [r3, #20]
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_FLASH_Lock+0x34>)
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	0609      	lsls	r1, r1, #24
 80012de:	430a      	orrs	r2, r1
 80012e0:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_FLASH_Lock+0x34>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da02      	bge.n	80012f0 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	781b      	ldrb	r3, [r3, #0]
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40022000 	.word	0x40022000

08001300 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8001308:	f7ff fd7e 	bl	8000e08 <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	189b      	adds	r3, r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800131a:	e007      	b.n	800132c <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 800131c:	f7ff fd74 	bl	8000e08 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4293      	cmp	r3, r2
 8001326:	d801      	bhi.n	800132c <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e02a      	b.n	8001382 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <FLASH_WaitForLastOperation+0x8c>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	4013      	ands	r3, r2
 8001334:	d1f2      	bne.n	800131c <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <FLASH_WaitForLastOperation+0x8c>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <FLASH_WaitForLastOperation+0x90>)
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <FLASH_WaitForLastOperation+0x8c>)
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <FLASH_WaitForLastOperation+0x94>)
 8001344:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <FLASH_WaitForLastOperation+0x98>)
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e015      	b.n	8001382 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8001356:	f7ff fd57 	bl	8000e08 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	189b      	adds	r3, r3, r2
 8001360:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8001362:	e007      	b.n	8001374 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8001364:	f7ff fd50 	bl	8000e08 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4293      	cmp	r3, r2
 800136e:	d801      	bhi.n	8001374 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e006      	b.n	8001382 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <FLASH_WaitForLastOperation+0x8c>)
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	02db      	lsls	r3, r3, #11
 800137c:	4013      	ands	r3, r2
 800137e:	d1f1      	bne.n	8001364 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40022000 	.word	0x40022000
 8001390:	000083fa 	.word	0x000083fa
 8001394:	000083fb 	.word	0x000083fb
 8001398:	200002bc 	.word	0x200002bc

0800139c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800139c:	b5b0      	push	{r4, r5, r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	603a      	str	r2, [r7, #0]
 80013a6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <FLASH_Program_DoubleWord+0x3c>)
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <FLASH_Program_DoubleWord+0x3c>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	430a      	orrs	r2, r1
 80013b2:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80013ba:	f3bf 8f6f 	isb	sy
}
 80013be:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	001c      	movs	r4, r3
 80013c4:	2300      	movs	r3, #0
 80013c6:	001d      	movs	r5, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3304      	adds	r3, #4
 80013cc:	0022      	movs	r2, r4
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b004      	add	sp, #16
 80013d6:	bdb0      	pop	{r4, r5, r7, pc}
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013e6:	4b35      	ldr	r3, [pc, #212]	; (80014bc <HAL_FLASHEx_Erase+0xe0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_FLASHEx_Erase+0x16>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e05f      	b.n	80014b2 <HAL_FLASHEx_Erase+0xd6>
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <HAL_FLASHEx_Erase+0xe0>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_FLASHEx_Erase+0xe0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013fe:	250f      	movs	r5, #15
 8001400:	197c      	adds	r4, r7, r5
 8001402:	23fa      	movs	r3, #250	; 0xfa
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff ff7a 	bl	8001300 <FLASH_WaitForLastOperation>
 800140c:	0003      	movs	r3, r0
 800140e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001410:	002c      	movs	r4, r5
 8001412:	193b      	adds	r3, r7, r4
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d145      	bne.n	80014a6 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2204      	movs	r2, #4
 800141e:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b04      	cmp	r3, #4
 8001426:	d10d      	bne.n	8001444 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f849 	bl	80014c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001432:	193c      	adds	r4, r7, r4
 8001434:	23fa      	movs	r3, #250	; 0xfa
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff ff61 	bl	8001300 <FLASH_WaitForLastOperation>
 800143e:	0003      	movs	r3, r0
 8001440:	7023      	strb	r3, [r4, #0]
 8001442:	e030      	b.n	80014a6 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	4252      	negs	r2, r2
 800144a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	e01a      	b.n	800148a <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f000 f845 	bl	80014ec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001462:	250f      	movs	r5, #15
 8001464:	197c      	adds	r4, r7, r5
 8001466:	23fa      	movs	r3, #250	; 0xfa
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff ff48 	bl	8001300 <FLASH_WaitForLastOperation>
 8001470:	0003      	movs	r3, r0
 8001472:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8001474:	197b      	adds	r3, r7, r5
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	601a      	str	r2, [r3, #0]
          break;
 8001482:	e00a      	b.n	800149a <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	3301      	adds	r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	429a      	cmp	r2, r3
 8001498:	d3dc      	bcc.n	8001454 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_FLASHEx_Erase+0xe4>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_FLASHEx_Erase+0xe4>)
 80014a0:	2102      	movs	r1, #2
 80014a2:	438a      	bics	r2, r1
 80014a4:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_FLASHEx_Erase+0xe0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	781b      	ldrb	r3, [r3, #0]
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	200002bc 	.word	0x200002bc
 80014c0:	40022000 	.word	0x40022000

080014c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <FLASH_MassErase+0x24>)
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <FLASH_MassErase+0x24>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0249      	lsls	r1, r1, #9
 80014da:	430a      	orrs	r2, r1
 80014dc:	615a      	str	r2, [r3, #20]
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40022000 	.word	0x40022000

080014ec <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <FLASH_PageErase+0x2c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <FLASH_PageErase+0x30>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	00da      	lsls	r2, r3, #3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	431a      	orrs	r2, r3
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <FLASH_PageErase+0x2c>)
 800150a:	4905      	ldr	r1, [pc, #20]	; (8001520 <FLASH_PageErase+0x34>)
 800150c:	430a      	orrs	r2, r1
 800150e:	615a      	str	r2, [r3, #20]
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b004      	add	sp, #16
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40022000 	.word	0x40022000
 800151c:	ffffe007 	.word	0xffffe007
 8001520:	00010002 	.word	0x00010002

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e147      	b.n	80017c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4091      	lsls	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d100      	bne.n	800154c <HAL_GPIO_Init+0x28>
 800154a:	e138      	b.n	80017be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	4013      	ands	r3, r2
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x40>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	4013      	ands	r3, r2
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	409a      	lsls	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	409a      	lsls	r2, r3
 8001586:	0013      	movs	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	2201      	movs	r2, #1
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d017      	beq.n	8001602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	4013      	ands	r3, r2
 800160a:	2b02      	cmp	r3, #2
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	58d3      	ldr	r3, [r2, r3]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2207      	movs	r2, #7
 8001620:	4013      	ands	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	43da      	mvns	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2107      	movs	r1, #7
 800163a:	400b      	ands	r3, r1
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	6939      	ldr	r1, [r7, #16]
 8001654:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	43da      	mvns	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	401a      	ands	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	029b      	lsls	r3, r3, #10
 8001692:	4013      	ands	r3, r2
 8001694:	d100      	bne.n	8001698 <HAL_GPIO_Init+0x174>
 8001696:	e092      	b.n	80017be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3318      	adds	r3, #24
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	589b      	ldr	r3, [r3, r2]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2203      	movs	r2, #3
 80016aa:	4013      	ands	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	220f      	movs	r2, #15
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	43da      	mvns	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	23a0      	movs	r3, #160	; 0xa0
 80016c0:	05db      	lsls	r3, r3, #23
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x1ca>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_GPIO_Init+0x2bc>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x1c6>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_GPIO_Init+0x2c0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x1c2>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <HAL_GPIO_Init+0x2c4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x1be>
 80016de:	2303      	movs	r3, #3
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016e2:	2305      	movs	r3, #5
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x1cc>
 80016ee:	2300      	movs	r3, #0
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	2103      	movs	r1, #3
 80016f4:	400a      	ands	r2, r1
 80016f6:	00d2      	lsls	r2, r2, #3
 80016f8:	4093      	lsls	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001700:	4936      	ldr	r1, [pc, #216]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3318      	adds	r3, #24
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170e:	4b33      	ldr	r3, [pc, #204]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43da      	mvns	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	035b      	lsls	r3, r3, #13
 8001726:	4013      	ands	r3, r2
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43da      	mvns	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	039b      	lsls	r3, r3, #14
 8001750:	4013      	ands	r3, r2
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001764:	2384      	movs	r3, #132	; 0x84
 8001766:	58d3      	ldr	r3, [r2, r3]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001788:	4914      	ldr	r1, [pc, #80]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 800178a:	2284      	movs	r2, #132	; 0x84
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	58d3      	ldr	r3, [r2, r3]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4013      	ands	r3, r2
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b6:	4909      	ldr	r1, [pc, #36]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	40da      	lsrs	r2, r3
 80017cc:	1e13      	subs	r3, r2, #0
 80017ce:	d000      	beq.n	80017d2 <HAL_GPIO_Init+0x2ae>
 80017d0:	e6b0      	b.n	8001534 <HAL_GPIO_Init+0x10>
  }
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b006      	add	sp, #24
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021800 	.word	0x40021800
 80017e0:	50000400 	.word	0x50000400
 80017e4:	50000800 	.word	0x50000800
 80017e8:	50000c00 	.word	0x50000c00

080017ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	000a      	movs	r2, r1
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	1cba      	adds	r2, r7, #2
 8001800:	8812      	ldrh	r2, [r2, #0]
 8001802:	4013      	ands	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001806:	230f      	movs	r3, #15
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e003      	b.n	8001818 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001818:	230f      	movs	r3, #15
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	0008      	movs	r0, r1
 8001830:	0011      	movs	r1, r2
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	1c02      	adds	r2, r0, #0
 8001836:	801a      	strh	r2, [r3, #0]
 8001838:	1c7b      	adds	r3, r7, #1
 800183a:	1c0a      	adds	r2, r1, #0
 800183c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183e:	1c7b      	adds	r3, r7, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001846:	1cbb      	adds	r3, r7, #2
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184e:	e003      	b.n	8001858 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001850:	1cbb      	adds	r3, r7, #2
 8001852:	881a      	ldrh	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	000a      	movs	r2, r1
 800186a:	1cbb      	adds	r3, r7, #2
 800186c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001874:	1cbb      	adds	r3, r7, #2
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	1cb9      	adds	r1, r7, #2
 8001884:	8809      	ldrh	r1, [r1, #0]
 8001886:	400b      	ands	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	619a      	str	r2, [r3, #24]
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e03d      	b.n	8001926 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a20      	ldr	r2, [pc, #128]	; (8001930 <HAL_IWDG_Init+0x98>)
 80018b0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <HAL_IWDG_Init+0x9c>)
 80018b8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6852      	ldr	r2, [r2, #4]
 80018c2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6892      	ldr	r2, [r2, #8]
 80018cc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80018ce:	f7ff fa9b 	bl	8000e08 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80018d6:	e00e      	b.n	80018f6 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80018d8:	f7ff fa96 	bl	8000e08 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b31      	cmp	r3, #49	; 0x31
 80018e4:	d907      	bls.n	80018f6 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2207      	movs	r2, #7
 80018ee:	4013      	ands	r3, r2
 80018f0:	d001      	beq.n	80018f6 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e017      	b.n	8001926 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2207      	movs	r2, #7
 80018fe:	4013      	ands	r3, r2
 8001900:	d1ea      	bne.n	80018d8 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d005      	beq.n	800191c <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68d2      	ldr	r2, [r2, #12]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	e003      	b.n	8001924 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_IWDG_Init+0xa0>)
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b004      	add	sp, #16
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	0000cccc 	.word	0x0000cccc
 8001934:	00005555 	.word	0x00005555
 8001938:	0000aaaa 	.word	0x0000aaaa

0800193c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a03      	ldr	r2, [pc, #12]	; (8001958 <HAL_IWDG_Refresh+0x1c>)
 800194a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	0000aaaa 	.word	0x0000aaaa

0800195c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800196a:	4013      	ands	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d11f      	bne.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	0013      	movs	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	189b      	adds	r3, r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4912      	ldr	r1, [pc, #72]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800198e:	0018      	movs	r0, r3
 8001990:	f7fe fbc8 	bl	8000124 <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199a:	e008      	b.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e001      	b.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e009      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	401a      	ands	r2, r3
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	429a      	cmp	r2, r3
 80019be:	d0ed      	beq.n	800199c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40007000 	.word	0x40007000
 80019d0:	fffff9ff 	.word	0xfffff9ff
 80019d4:	20000000 	.word	0x20000000
 80019d8:	000f4240 	.word	0x000f4240

080019dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	23e0      	movs	r3, #224	; 0xe0
 80019e6:	01db      	lsls	r3, r3, #7
 80019e8:	4013      	ands	r3, r2
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e2f3      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x1e>
 8001a10:	e07c      	b.n	8001b0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a12:	4bc3      	ldr	r3, [pc, #780]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2238      	movs	r2, #56	; 0x38
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a1c:	4bc0      	ldr	r3, [pc, #768]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4013      	ands	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0x3e>
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d10b      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	4bb9      	ldr	r3, [pc, #740]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	029b      	lsls	r3, r3, #10
 8001a40:	4013      	ands	r3, r2
 8001a42:	d062      	beq.n	8001b0a <HAL_RCC_OscConfig+0x116>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d15e      	bne.n	8001b0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e2ce      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x78>
 8001a5c:	4bb0      	ldr	r3, [pc, #704]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4baf      	ldr	r3, [pc, #700]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	0249      	lsls	r1, r1, #9
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e020      	b.n	8001aae <HAL_RCC_OscConfig+0xba>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	23a0      	movs	r3, #160	; 0xa0
 8001a72:	02db      	lsls	r3, r3, #11
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d10e      	bne.n	8001a96 <HAL_RCC_OscConfig+0xa2>
 8001a78:	4ba9      	ldr	r3, [pc, #676]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4ba8      	ldr	r3, [pc, #672]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	02c9      	lsls	r1, r1, #11
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	4ba6      	ldr	r3, [pc, #664]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4ba5      	ldr	r3, [pc, #660]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0249      	lsls	r1, r1, #9
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0xba>
 8001a96:	4ba2      	ldr	r3, [pc, #648]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4ba1      	ldr	r3, [pc, #644]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	49a1      	ldr	r1, [pc, #644]	; (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	4b9f      	ldr	r3, [pc, #636]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b9e      	ldr	r3, [pc, #632]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001aa8:	499f      	ldr	r1, [pc, #636]	; (8001d28 <HAL_RCC_OscConfig+0x334>)
 8001aaa:	400a      	ands	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d014      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f9a7 	bl	8000e08 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff f9a2 	bl	8000e08 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e28d      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad2:	4b93      	ldr	r3, [pc, #588]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	029b      	lsls	r3, r3, #10
 8001ada:	4013      	ands	r3, r2
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xcc>
 8001ade:	e015      	b.n	8001b0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f992 	bl	8000e08 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aea:	f7ff f98d 	bl	8000e08 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e278      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afc:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0xf6>
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d100      	bne.n	8001b18 <HAL_RCC_OscConfig+0x124>
 8001b16:	e099      	b.n	8001c4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2238      	movs	r2, #56	; 0x38
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b22:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2203      	movs	r2, #3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d102      	bne.n	8001b38 <HAL_RCC_OscConfig+0x144>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d002      	beq.n	8001b3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d135      	bne.n	8001baa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3e:	4b78      	ldr	r3, [pc, #480]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4013      	ands	r3, r2
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x162>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e24b      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a74      	ldr	r2, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x338>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	021a      	lsls	r2, r3, #8
 8001b66:	4b6e      	ldr	r3, [pc, #440]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b72:	4b6b      	ldr	r3, [pc, #428]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6e      	ldr	r2, [pc, #440]	; (8001d30 <HAL_RCC_OscConfig+0x33c>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b86:	4b66      	ldr	r3, [pc, #408]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0adb      	lsrs	r3, r3, #11
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4013      	ands	r3, r2
 8001b90:	4a68      	ldr	r2, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x340>)
 8001b92:	40da      	lsrs	r2, r3
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x344>)
 8001b96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x348>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff f8d7 	bl	8000d50 <HAL_InitTick>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d051      	beq.n	8001c4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e221      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5e      	ldr	r2, [pc, #376]	; (8001d30 <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	0049      	lsls	r1, r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f918 	bl	8000e08 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff f913 	bl	8000e08 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1fe      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a4a      	ldr	r2, [pc, #296]	; (8001d2c <HAL_RCC_OscConfig+0x338>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	021a      	lsls	r2, r3, #8
 8001c0c:	4b44      	ldr	r3, [pc, #272]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	e01b      	b.n	8001c4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	4949      	ldr	r1, [pc, #292]	; (8001d40 <HAL_RCC_OscConfig+0x34c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f8f2 	bl	8000e08 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f8ed 	bl	8000e08 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1d8      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4013      	ands	r3, r2
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x236>
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2208      	movs	r2, #8
 8001c52:	4013      	ands	r3, r2
 8001c54:	d047      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2238      	movs	r2, #56	; 0x38
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b18      	cmp	r3, #24
 8001c60:	d10a      	bne.n	8001c78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d138      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e1ba      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d019      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f8bc 	bl	8000e08 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f8b7 	bl	8000e08 <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1a2      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f1      	beq.n	8001c96 <HAL_RCC_OscConfig+0x2a2>
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f8a2 	bl	8000e08 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff f89d 	bl	8000e08 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e188      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f1      	bne.n	8001cca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2fe>
 8001cf0:	e0c6      	b.n	8001e80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	231f      	movs	r3, #31
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2238      	movs	r2, #56	; 0x38
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d11e      	bne.n	8001d44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x32c>)
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x31e>
 8001d10:	e0b6      	b.n	8001e80 <HAL_RCC_OscConfig+0x48c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d000      	beq.n	8001d1c <HAL_RCC_OscConfig+0x328>
 8001d1a:	e0b1      	b.n	8001e80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e166      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	fffeffff 	.word	0xfffeffff
 8001d28:	fffbffff 	.word	0xfffbffff
 8001d2c:	ffff80ff 	.word	0xffff80ff
 8001d30:	ffffc7ff 	.word	0xffffc7ff
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d44:	4bac      	ldr	r3, [pc, #688]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	055b      	lsls	r3, r3, #21
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x360>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x362>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d011      	beq.n	8001d7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4ba7      	ldr	r3, [pc, #668]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5e:	4ba6      	ldr	r3, [pc, #664]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0549      	lsls	r1, r1, #21
 8001d64:	430a      	orrs	r2, r1
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d68:	4ba3      	ldr	r3, [pc, #652]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	055b      	lsls	r3, r3, #21
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d76:	231f      	movs	r3, #31
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7e:	4b9f      	ldr	r3, [pc, #636]	; (8001ffc <HAL_RCC_OscConfig+0x608>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d11a      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d8a:	4b9c      	ldr	r3, [pc, #624]	; (8001ffc <HAL_RCC_OscConfig+0x608>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b9b      	ldr	r3, [pc, #620]	; (8001ffc <HAL_RCC_OscConfig+0x608>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0049      	lsls	r1, r1, #1
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d98:	f7ff f836 	bl	8000e08 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f831 	bl	8000e08 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e11c      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db4:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x608>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3e2>
 8001dc8:	4b8b      	ldr	r3, [pc, #556]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001dca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dcc:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x41c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x404>
 8001dde:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001de0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001de2:	4b85      	ldr	r3, [pc, #532]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001de4:	2104      	movs	r1, #4
 8001de6:	430a      	orrs	r2, r1
 8001de8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dea:	4b83      	ldr	r3, [pc, #524]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001dec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dee:	4b82      	ldr	r3, [pc, #520]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x41c>
 8001df8:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	438a      	bics	r2, r1
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e04:	4b7c      	ldr	r3, [pc, #496]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001e06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe fff6 	bl	8000e08 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fff1 	bl	8000e08 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a74      	ldr	r2, [pc, #464]	; (8002000 <HAL_RCC_OscConfig+0x60c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0db      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e36:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x42e>
 8001e40:	e013      	b.n	8001e6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe ffe1 	bl	8000e08 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7fe ffdc 	bl	8000e08 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4a6a      	ldr	r2, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x60c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0c6      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e60:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e6a:	231f      	movs	r3, #31
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b60      	ldr	r3, [pc, #384]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e78:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001e7a:	4962      	ldr	r1, [pc, #392]	; (8002004 <HAL_RCC_OscConfig+0x610>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d100      	bne.n	8001e8a <HAL_RCC_OscConfig+0x496>
 8001e88:	e0b0      	b.n	8001fec <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2238      	movs	r2, #56	; 0x38
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d100      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4a4>
 8001e96:	e078      	b.n	8001f8a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d153      	bne.n	8001f48 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b54      	ldr	r3, [pc, #336]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001ea6:	4958      	ldr	r1, [pc, #352]	; (8002008 <HAL_RCC_OscConfig+0x614>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ffac 	bl	8000e08 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe ffa7 	bl	8000e08 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e092      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	049b      	lsls	r3, r3, #18
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_RCC_OscConfig+0x618>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	431a      	orrs	r2, r3
 8001efc:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0449      	lsls	r1, r1, #17
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0549      	lsls	r1, r1, #21
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe ff73 	bl	8000e08 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe ff6e 	bl	8000e08 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e059      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x534>
 8001f46:	e051      	b.n	8001fec <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f4e:	492e      	ldr	r1, [pc, #184]	; (8002008 <HAL_RCC_OscConfig+0x614>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff58 	bl	8000e08 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe ff53 	bl	8000e08 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e03e      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f82:	4923      	ldr	r1, [pc, #140]	; (8002010 <HAL_RCC_OscConfig+0x61c>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	e030      	b.n	8001fec <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e02b      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_OscConfig+0x604>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d11e      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2270      	movs	r2, #112	; 0x70
 8001fae:	401a      	ands	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d117      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	23fe      	movs	r3, #254	; 0xfe
 8001fbc:	01db      	lsls	r3, r3, #7
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	23f8      	movs	r3, #248	; 0xf8
 8001fce:	039b      	lsls	r3, r3, #14
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	0f5b      	lsrs	r3, r3, #29
 8001fde:	075a      	lsls	r2, r3, #29
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b008      	add	sp, #32
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	00001388 	.word	0x00001388
 8002004:	efffffff 	.word	0xefffffff
 8002008:	feffffff 	.word	0xfeffffff
 800200c:	1fc1808c 	.word	0x1fc1808c
 8002010:	effefffc 	.word	0xeffefffc

08002014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0e9      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b76      	ldr	r3, [pc, #472]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2207      	movs	r2, #7
 800202e:	4013      	ands	r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d91e      	bls.n	8002074 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2207      	movs	r2, #7
 800203c:	4393      	bics	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	4b70      	ldr	r3, [pc, #448]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002048:	f7fe fede 	bl	8000e08 <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002050:	e009      	b.n	8002066 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002052:	f7fe fed9 	bl	8000e08 <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	4a6a      	ldr	r2, [pc, #424]	; (8002208 <HAL_RCC_ClockConfig+0x1f4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0ca      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002066:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2207      	movs	r2, #7
 800206c:	4013      	ands	r3, r2
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2202      	movs	r2, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d015      	beq.n	80020aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2204      	movs	r2, #4
 8002084:	4013      	ands	r3, r2
 8002086:	d006      	beq.n	8002096 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002088:	4b60      	ldr	r3, [pc, #384]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 800208e:	21e0      	movs	r1, #224	; 0xe0
 8002090:	01c9      	lsls	r1, r1, #7
 8002092:	430a      	orrs	r2, r1
 8002094:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002096:	4b5d      	ldr	r3, [pc, #372]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <HAL_RCC_ClockConfig+0x1fc>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	d057      	beq.n	8002164 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020bc:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	4013      	ands	r3, r2
 80020c6:	d12b      	bne.n	8002120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e097      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	049b      	lsls	r3, r3, #18
 80020dc:	4013      	ands	r3, r2
 80020de:	d11f      	bne.n	8002120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e08b      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ec:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4013      	ands	r3, r2
 80020f6:	d113      	bne.n	8002120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e07f      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d106      	bne.n	8002112 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002104:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d108      	bne.n	8002120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e074      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e06d      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2207      	movs	r2, #7
 8002126:	4393      	bics	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002134:	f7fe fe68 	bl	8000e08 <HAL_GetTick>
 8002138:	0003      	movs	r3, r0
 800213a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213c:	e009      	b.n	8002152 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213e:	f7fe fe63 	bl	8000e08 <HAL_GetTick>
 8002142:	0002      	movs	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_RCC_ClockConfig+0x1f4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e054      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2238      	movs	r2, #56	; 0x38
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	429a      	cmp	r2, r3
 8002162:	d1ec      	bne.n	800213e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2207      	movs	r2, #7
 800216a:	4013      	ands	r3, r2
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d21e      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2207      	movs	r2, #7
 8002178:	4393      	bics	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002184:	f7fe fe40 	bl	8000e08 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218e:	f7fe fe3b 	bl	8000e08 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_RCC_ClockConfig+0x1f4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e02c      	b.n	80021fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2207      	movs	r2, #7
 80021a8:	4013      	ands	r3, r2
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2204      	movs	r2, #4
 80021b6:	4013      	ands	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <HAL_RCC_ClockConfig+0x200>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021ce:	f000 f829 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021d2:	0001      	movs	r1, r0
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_RCC_ClockConfig+0x1f8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	220f      	movs	r2, #15
 80021dc:	401a      	ands	r2, r3
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_RCC_ClockConfig+0x204>)
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	58d3      	ldr	r3, [r2, r3]
 80021e4:	221f      	movs	r2, #31
 80021e6:	4013      	ands	r3, r2
 80021e8:	000a      	movs	r2, r1
 80021ea:	40da      	lsrs	r2, r3
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x208>)
 80021ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x20c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fe fdab 	bl	8000d50 <HAL_InitTick>
 80021fa:	0003      	movs	r3, r0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b004      	add	sp, #16
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40022000 	.word	0x40022000
 8002208:	00001388 	.word	0x00001388
 800220c:	40021000 	.word	0x40021000
 8002210:	fffff0ff 	.word	0xfffff0ff
 8002214:	ffff8fff 	.word	0xffff8fff
 8002218:	080099c8 	.word	0x080099c8
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2238      	movs	r2, #56	; 0x38
 8002230:	4013      	ands	r3, r2
 8002232:	d10f      	bne.n	8002254 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002234:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0adb      	lsrs	r3, r3, #11
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	2201      	movs	r2, #1
 8002240:	409a      	lsls	r2, r3
 8002242:	0013      	movs	r3, r2
 8002244:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	4835      	ldr	r0, [pc, #212]	; (8002320 <HAL_RCC_GetSysClockFreq+0xfc>)
 800224a:	f7fd ff6b 	bl	8000124 <__udivsi3>
 800224e:	0003      	movs	r3, r0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e05d      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2238      	movs	r2, #56	; 0x38
 800225a:	4013      	ands	r3, r2
 800225c:	2b08      	cmp	r3, #8
 800225e:	d102      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <HAL_RCC_GetSysClockFreq+0x100>)
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e054      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2238      	movs	r2, #56	; 0x38
 800226c:	4013      	ands	r3, r2
 800226e:	2b10      	cmp	r3, #16
 8002270:	d138      	bne.n	80022e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2203      	movs	r2, #3
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	2207      	movs	r2, #7
 8002284:	4013      	ands	r3, r2
 8002286:	3301      	adds	r3, #1
 8002288:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d10d      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	4824      	ldr	r0, [pc, #144]	; (8002324 <HAL_RCC_GetSysClockFreq+0x100>)
 8002294:	f7fd ff46 	bl	8000124 <__udivsi3>
 8002298:	0003      	movs	r3, r0
 800229a:	0019      	movs	r1, r3
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	227f      	movs	r2, #127	; 0x7f
 80022a4:	4013      	ands	r3, r2
 80022a6:	434b      	muls	r3, r1
 80022a8:	617b      	str	r3, [r7, #20]
        break;
 80022aa:	e00d      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	481c      	ldr	r0, [pc, #112]	; (8002320 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022b0:	f7fd ff38 	bl	8000124 <__udivsi3>
 80022b4:	0003      	movs	r3, r0
 80022b6:	0019      	movs	r1, r3
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	227f      	movs	r2, #127	; 0x7f
 80022c0:	4013      	ands	r3, r2
 80022c2:	434b      	muls	r3, r1
 80022c4:	617b      	str	r3, [r7, #20]
        break;
 80022c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0f5b      	lsrs	r3, r3, #29
 80022ce:	2207      	movs	r2, #7
 80022d0:	4013      	ands	r3, r2
 80022d2:	3301      	adds	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7fd ff23 	bl	8000124 <__udivsi3>
 80022de:	0003      	movs	r3, r0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e015      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2238      	movs	r2, #56	; 0x38
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d103      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2238      	movs	r2, #56	; 0x38
 80022fe:	4013      	ands	r3, r2
 8002300:	2b18      	cmp	r3, #24
 8002302:	d103      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002304:	23fa      	movs	r3, #250	; 0xfa
 8002306:	01db      	lsls	r3, r3, #7
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	e001      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002310:	693b      	ldr	r3, [r7, #16]
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b006      	add	sp, #24
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	40021000 	.word	0x40021000
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200

08002328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <HAL_RCC_GetHCLKFreq+0x10>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000000 	.word	0x20000000

0800233c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800233c:	b5b0      	push	{r4, r5, r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002340:	f7ff fff2 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002344:	0004      	movs	r4, r0
 8002346:	f7ff fb49 	bl	80019dc <LL_RCC_GetAPB1Prescaler>
 800234a:	0003      	movs	r3, r0
 800234c:	0b1a      	lsrs	r2, r3, #12
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	58d3      	ldr	r3, [r2, r3]
 8002354:	221f      	movs	r2, #31
 8002356:	4013      	ands	r3, r2
 8002358:	40dc      	lsrs	r4, r3
 800235a:	0023      	movs	r3, r4
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bdb0      	pop	{r4, r5, r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	08009a08 	.word	0x08009a08

08002368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002370:	2313      	movs	r3, #19
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002378:	2312      	movs	r3, #18
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	4013      	ands	r3, r2
 800238a:	d100      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800238c:	e0a3      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2011      	movs	r0, #17
 8002390:	183b      	adds	r3, r7, r0
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	055b      	lsls	r3, r3, #21
 800239e:	4013      	ands	r3, r2
 80023a0:	d110      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b7c      	ldr	r3, [pc, #496]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a6:	4b7b      	ldr	r3, [pc, #492]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	0549      	lsls	r1, r1, #21
 80023ac:	430a      	orrs	r2, r1
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80023b0:	4b78      	ldr	r3, [pc, #480]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	055b      	lsls	r3, r3, #21
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023be:	183b      	adds	r3, r7, r0
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c4:	4b74      	ldr	r3, [pc, #464]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	0049      	lsls	r1, r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fd19 	bl	8000e08 <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023da:	e00b      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7fe fd14 	bl	8000e08 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d904      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023ea:	2313      	movs	r3, #19
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
        break;
 80023f2:	e005      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4013      	ands	r3, r2
 80023fe:	d0ed      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002400:	2313      	movs	r3, #19
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d154      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800240a:	4b62      	ldr	r3, [pc, #392]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800240c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800240e:	23c0      	movs	r3, #192	; 0xc0
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4013      	ands	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d019      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	429a      	cmp	r2, r3
 8002424:	d014      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	4a5c      	ldr	r2, [pc, #368]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800242c:	4013      	ands	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002430:	4b58      	ldr	r3, [pc, #352]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002434:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	0249      	lsls	r1, r1, #9
 800243a:	430a      	orrs	r2, r1
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800243e:	4b55      	ldr	r3, [pc, #340]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002444:	4956      	ldr	r1, [pc, #344]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002446:	400a      	ands	r2, r1
 8002448:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800244a:	4b52      	ldr	r3, [pc, #328]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	d016      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fcd6 	bl	8000e08 <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002460:	e00c      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fcd1 	bl	8000e08 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d904      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002472:	2313      	movs	r3, #19
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2203      	movs	r2, #3
 8002478:	701a      	strb	r2, [r3, #0]
            break;
 800247a:	e004      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d0ed      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002486:	2313      	movs	r3, #19
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002490:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	4a41      	ldr	r2, [pc, #260]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002496:	4013      	ands	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80024a4:	e00c      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a6:	2312      	movs	r3, #18
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2213      	movs	r2, #19
 80024ac:	18ba      	adds	r2, r7, r2
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e005      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b4:	2312      	movs	r3, #18
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2213      	movs	r2, #19
 80024ba:	18ba      	adds	r2, r7, r2
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024c0:	2311      	movs	r3, #17
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024d0:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d2:	400a      	ands	r2, r1
 80024d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d009      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	2203      	movs	r2, #3
 80024e6:	4393      	bics	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80024f0:	430a      	orrs	r2, r1
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2220      	movs	r2, #32
 80024fa:	4013      	ands	r3, r2
 80024fc:	d009      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024fe:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002504:	4013      	ands	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800250e:	430a      	orrs	r2, r1
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	01db      	lsls	r3, r3, #7
 800251a:	4013      	ands	r3, r2
 800251c:	d015      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	0899      	lsrs	r1, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800252c:	430a      	orrs	r2, r1
 800252e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	05db      	lsls	r3, r3, #23
 8002538:	429a      	cmp	r2, r3
 800253a:	d106      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	0249      	lsls	r1, r1, #9
 8002546:	430a      	orrs	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4013      	ands	r3, r2
 8002554:	d016      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800255c:	4013      	ands	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002566:	430a      	orrs	r2, r1
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	01db      	lsls	r3, r3, #7
 8002572:	429a      	cmp	r2, r3
 8002574:	d106      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	0249      	lsls	r1, r1, #9
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002584:	2312      	movs	r3, #18
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b006      	add	sp, #24
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	fffffcff 	.word	0xfffffcff
 80025a0:	fffeffff 	.word	0xfffeffff
 80025a4:	00001388 	.word	0x00001388
 80025a8:	efffffff 	.word	0xefffffff
 80025ac:	ffffcfff 	.word	0xffffcfff
 80025b0:	ffff3fff 	.word	0xffff3fff

080025b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0a8      	b.n	8002718 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	2382      	movs	r3, #130	; 0x82
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d009      	beq.n	80025ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	61da      	str	r2, [r3, #28]
 80025e0:	e005      	b.n	80025ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	225d      	movs	r2, #93	; 0x5d
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	225c      	movs	r2, #92	; 0x5c
 8002604:	2100      	movs	r1, #0
 8002606:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f7fe f9c4 	bl	8000998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	225d      	movs	r2, #93	; 0x5d
 8002614:	2102      	movs	r1, #2
 8002616:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2140      	movs	r1, #64	; 0x40
 8002624:	438a      	bics	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	23e0      	movs	r3, #224	; 0xe0
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	429a      	cmp	r2, r3
 8002632:	d902      	bls.n	800263a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e002      	b.n	8002640 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	015b      	lsls	r3, r3, #5
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	23f0      	movs	r3, #240	; 0xf0
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	429a      	cmp	r2, r3
 800264a:	d008      	beq.n	800265e <HAL_SPI_Init+0xaa>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	23e0      	movs	r3, #224	; 0xe0
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	429a      	cmp	r2, r3
 8002656:	d002      	beq.n	800265e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	2382      	movs	r3, #130	; 0x82
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	2384      	movs	r3, #132	; 0x84
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	400b      	ands	r3, r1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2102      	movs	r1, #2
 800267a:	400b      	ands	r3, r1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2101      	movs	r1, #1
 8002684:	400b      	ands	r3, r1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6999      	ldr	r1, [r3, #24]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	400b      	ands	r3, r1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2138      	movs	r1, #56	; 0x38
 800269a:	400b      	ands	r3, r1
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	400b      	ands	r3, r1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	0011      	movs	r1, r2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	019b      	lsls	r3, r3, #6
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	2204      	movs	r2, #4
 80026c4:	401a      	ands	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	2110      	movs	r1, #16
 80026cc:	400b      	ands	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	2108      	movs	r1, #8
 80026d6:	400b      	ands	r3, r1
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	23f0      	movs	r3, #240	; 0xf0
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	400b      	ands	r3, r1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	0011      	movs	r1, r2
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	015b      	lsls	r3, r3, #5
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4907      	ldr	r1, [pc, #28]	; (8002720 <HAL_SPI_Init+0x16c>)
 8002704:	400a      	ands	r2, r1
 8002706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	225d      	movs	r2, #93	; 0x5d
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	fffff7ff 	.word	0xfffff7ff

08002724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e046      	b.n	80027c4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2288      	movs	r2, #136	; 0x88
 800273a:	589b      	ldr	r3, [r3, r2]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2284      	movs	r2, #132	; 0x84
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0018      	movs	r0, r3
 800274c:	f7fe f99e 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2288      	movs	r2, #136	; 0x88
 8002754:	2124      	movs	r1, #36	; 0x24
 8002756:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2101      	movs	r1, #1
 8002764:	438a      	bics	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fd42 	bl	80031f4 <UART_SetConfig>
 8002770:	0003      	movs	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e024      	b.n	80027c4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fe9f 	bl	80034c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	490d      	ldr	r1, [pc, #52]	; (80027cc <HAL_UART_Init+0xa8>)
 8002796:	400a      	ands	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	212a      	movs	r1, #42	; 0x2a
 80027a6:	438a      	bics	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	430a      	orrs	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 ff37 	bl	8003630 <UART_CheckIdleState>
 80027c2:	0003      	movs	r3, r0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	ffffb7ff 	.word	0xffffb7ff

080027d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	1dbb      	adds	r3, r7, #6
 80027dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2288      	movs	r2, #136	; 0x88
 80027e2:	589b      	ldr	r3, [r3, r2]
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d000      	beq.n	80027ea <HAL_UART_Transmit_IT+0x1a>
 80027e8:	e08d      	b.n	8002906 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_UART_Transmit_IT+0x28>
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e085      	b.n	8002908 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	015b      	lsls	r3, r3, #5
 8002804:	429a      	cmp	r2, r3
 8002806:	d109      	bne.n	800281c <HAL_UART_Transmit_IT+0x4c>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d001      	beq.n	800281c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e075      	b.n	8002908 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1dba      	adds	r2, r7, #6
 8002826:	2154      	movs	r1, #84	; 0x54
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1dba      	adds	r2, r7, #6
 8002830:	2156      	movs	r1, #86	; 0x56
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2290      	movs	r2, #144	; 0x90
 8002840:	2100      	movs	r1, #0
 8002842:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2288      	movs	r2, #136	; 0x88
 8002848:	2121      	movs	r1, #33	; 0x21
 800284a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	059b      	lsls	r3, r3, #22
 8002854:	429a      	cmp	r2, r3
 8002856:	d12a      	bne.n	80028ae <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	015b      	lsls	r3, r3, #5
 8002860:	429a      	cmp	r2, r3
 8002862:	d107      	bne.n	8002874 <HAL_UART_Transmit_IT+0xa4>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_UART_Transmit_IT+0x140>)
 8002870:	679a      	str	r2, [r3, #120]	; 0x78
 8002872:	e002      	b.n	800287a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a27      	ldr	r2, [pc, #156]	; (8002914 <HAL_UART_Transmit_IT+0x144>)
 8002878:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287a:	f3ef 8310 	mrs	r3, PRIMASK
 800287e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002880:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
 8002884:	2301      	movs	r3, #1
 8002886:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	f383 8810 	msr	PRIMASK, r3
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	0409      	lsls	r1, r1, #16
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	f383 8810 	msr	PRIMASK, r3
}
 80028ac:	e029      	b.n	8002902 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	015b      	lsls	r3, r3, #5
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d107      	bne.n	80028ca <HAL_UART_Transmit_IT+0xfa>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <HAL_UART_Transmit_IT+0x148>)
 80028c6:	679a      	str	r2, [r3, #120]	; 0x78
 80028c8:	e002      	b.n	80028d0 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <HAL_UART_Transmit_IT+0x14c>)
 80028ce:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d0:	f3ef 8310 	mrs	r3, PRIMASK
 80028d4:	613b      	str	r3, [r7, #16]
  return(result);
 80028d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028da:	2301      	movs	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f383 8810 	msr	PRIMASK, r3
}
 8002900:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
  }
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b00c      	add	sp, #48	; 0x30
 800290e:	bd80      	pop	{r7, pc}
 8002910:	08003e49 	.word	0x08003e49
 8002914:	08003d5d 	.word	0x08003d5d
 8002918:	08003c9f 	.word	0x08003c9f
 800291c:	08003beb 	.word	0x08003beb

08002920 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	228c      	movs	r2, #140	; 0x8c
 8002932:	589b      	ldr	r3, [r3, r2]
 8002934:	2b20      	cmp	r3, #32
 8002936:	d145      	bne.n	80029c4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_UART_Receive_IT+0x26>
 800293e:	1dbb      	adds	r3, r7, #6
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e03d      	b.n	80029c6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	015b      	lsls	r3, r3, #5
 8002952:	429a      	cmp	r2, r3
 8002954:	d109      	bne.n	800296a <HAL_UART_Receive_IT+0x4a>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	d001      	beq.n	800296a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e02d      	b.n	80029c6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	4013      	ands	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297e:	f3ef 8310 	mrs	r3, PRIMASK
 8002982:	613b      	str	r3, [r7, #16]
  return(result);
 8002984:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	2301      	movs	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f383 8810 	msr	PRIMASK, r3
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	04c9      	lsls	r1, r1, #19
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f383 8810 	msr	PRIMASK, r3
}
 80029b0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029b2:	1dbb      	adds	r3, r7, #6
 80029b4:	881a      	ldrh	r2, [r3, #0]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 ff4e 	bl	800385c <UART_Start_Receive_IT>
 80029c0:	0003      	movs	r3, r0
 80029c2:	e000      	b.n	80029c6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
  }
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b008      	add	sp, #32
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b092      	sub	sp, #72	; 0x48
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d8:	f3ef 8310 	mrs	r3, PRIMASK
 80029dc:	623b      	str	r3, [r7, #32]
  return(result);
 80029de:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
 80029e2:	2301      	movs	r3, #1
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f383 8810 	msr	PRIMASK, r3
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	495a      	ldr	r1, [pc, #360]	; (8002b64 <HAL_UART_AbortReceive_IT+0x194>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	f383 8810 	msr	PRIMASK, r3
}
 8002a08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40
 8002a14:	2301      	movs	r3, #1
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	494f      	ldr	r1, [pc, #316]	; (8002b68 <HAL_UART_AbortReceive_IT+0x198>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	f383 8810 	msr	PRIMASK, r3
}
 8002a3a:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d118      	bne.n	8002a76 <HAL_UART_AbortReceive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a44:	f3ef 8310 	mrs	r3, PRIMASK
 8002a48:	617b      	str	r3, [r7, #20]
  return(result);
 8002a4a:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2110      	movs	r1, #16
 8002a66:	438a      	bics	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	46c0      	nop			; (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2240      	movs	r2, #64	; 0x40
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d153      	bne.n	8002b2c <HAL_UART_AbortReceive_IT+0x15c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a84:	f3ef 8310 	mrs	r3, PRIMASK
 8002a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a8e:	2301      	movs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f383 8810 	msr	PRIMASK, r3
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2140      	movs	r1, #64	; 0x40
 8002aa6:	438a      	bics	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	589b      	ldr	r3, [r3, r2]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d016      	beq.n	8002aee <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	589b      	ldr	r3, [r3, r2]
 8002ac6:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <HAL_UART_AbortReceive_IT+0x19c>)
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	589b      	ldr	r3, [r3, r2]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fe fb1d 	bl	8001110 <HAL_DMA_Abort_IT>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d03e      	beq.n	8002b58 <HAL_UART_AbortReceive_IT+0x188>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	589b      	ldr	r3, [r3, r2]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	5852      	ldr	r2, [r2, r1]
 8002ae8:	0010      	movs	r0, r2
 8002aea:	4798      	blx	r3
 8002aec:	e034      	b.n	8002b58 <HAL_UART_AbortReceive_IT+0x188>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	225e      	movs	r2, #94	; 0x5e
 8002af2:	2100      	movs	r1, #0
 8002af4:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	220f      	movs	r2, #15
 8002b02:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2108      	movs	r1, #8
 8002b10:	430a      	orrs	r2, r1
 8002b12:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	228c      	movs	r2, #140	; 0x8c
 8002b18:	2120      	movs	r1, #32
 8002b1a:	5099      	str	r1, [r3, r2]
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 fb51 	bl	80031cc <HAL_UART_AbortReceiveCpltCallback>
 8002b2a:	e015      	b.n	8002b58 <HAL_UART_AbortReceive_IT+0x188>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	225e      	movs	r2, #94	; 0x5e
 8002b30:	2100      	movs	r1, #0
 8002b32:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	220f      	movs	r2, #15
 8002b40:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	228c      	movs	r2, #140	; 0x8c
 8002b46:	2120      	movs	r1, #32
 8002b48:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 fb3a 	bl	80031cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b012      	add	sp, #72	; 0x48
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	fffffedf 	.word	0xfffffedf
 8002b68:	effffffe 	.word	0xeffffffe
 8002b6c:	08003b9f 	.word	0x08003b9f

08002b70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b0aa      	sub	sp, #168	; 0xa8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	22a4      	movs	r2, #164	; 0xa4
 8002b80:	18b9      	adds	r1, r7, r2
 8002b82:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	20a0      	movs	r0, #160	; 0xa0
 8002b8c:	1839      	adds	r1, r7, r0
 8002b8e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	249c      	movs	r4, #156	; 0x9c
 8002b98:	1939      	adds	r1, r7, r4
 8002b9a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b9c:	0011      	movs	r1, r2
 8002b9e:	18bb      	adds	r3, r7, r2
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4aa2      	ldr	r2, [pc, #648]	; (8002e2c <HAL_UART_IRQHandler+0x2bc>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2298      	movs	r2, #152	; 0x98
 8002ba8:	18bd      	adds	r5, r7, r2
 8002baa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002bac:	18bb      	adds	r3, r7, r2
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11a      	bne.n	8002bea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d015      	beq.n	8002bea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d105      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	055b      	lsls	r3, r3, #21
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d00a      	beq.n	8002bea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d100      	bne.n	8002bde <HAL_UART_IRQHandler+0x6e>
 8002bdc:	e2dc      	b.n	8003198 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	0010      	movs	r0, r2
 8002be6:	4798      	blx	r3
      }
      return;
 8002be8:	e2d6      	b.n	8003198 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bea:	2398      	movs	r3, #152	; 0x98
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d100      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x86>
 8002bf4:	e122      	b.n	8002e3c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002bf6:	239c      	movs	r3, #156	; 0x9c
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a8c      	ldr	r2, [pc, #560]	; (8002e30 <HAL_UART_IRQHandler+0x2c0>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002c02:	23a0      	movs	r3, #160	; 0xa0
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8a      	ldr	r2, [pc, #552]	; (8002e34 <HAL_UART_IRQHandler+0x2c4>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d100      	bne.n	8002c10 <HAL_UART_IRQHandler+0xa0>
 8002c0e:	e115      	b.n	8002e3c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c10:	23a4      	movs	r3, #164	; 0xa4
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d012      	beq.n	8002c42 <HAL_UART_IRQHandler+0xd2>
 8002c1c:	23a0      	movs	r3, #160	; 0xa0
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00b      	beq.n	8002c42 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2290      	movs	r2, #144	; 0x90
 8002c36:	589b      	ldr	r3, [r3, r2]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2190      	movs	r1, #144	; 0x90
 8002c40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c42:	23a4      	movs	r3, #164	; 0xa4
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d011      	beq.n	8002c72 <HAL_UART_IRQHandler+0x102>
 8002c4e:	239c      	movs	r3, #156	; 0x9c
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2290      	movs	r2, #144	; 0x90
 8002c66:	589b      	ldr	r3, [r3, r2]
 8002c68:	2204      	movs	r2, #4
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2190      	movs	r1, #144	; 0x90
 8002c70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c72:	23a4      	movs	r3, #164	; 0xa4
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d011      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x132>
 8002c7e:	239c      	movs	r3, #156	; 0x9c
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2290      	movs	r2, #144	; 0x90
 8002c96:	589b      	ldr	r3, [r3, r2]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2190      	movs	r1, #144	; 0x90
 8002ca0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ca2:	23a4      	movs	r3, #164	; 0xa4
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	4013      	ands	r3, r2
 8002cac:	d017      	beq.n	8002cde <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cae:	23a0      	movs	r3, #160	; 0xa0
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d105      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002cba:	239c      	movs	r3, #156	; 0x9c
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a5b      	ldr	r2, [pc, #364]	; (8002e30 <HAL_UART_IRQHandler+0x2c0>)
 8002cc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cc4:	d00b      	beq.n	8002cde <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2290      	movs	r2, #144	; 0x90
 8002cd2:	589b      	ldr	r3, [r3, r2]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2190      	movs	r1, #144	; 0x90
 8002cdc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cde:	23a4      	movs	r3, #164	; 0xa4
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d013      	beq.n	8002d14 <HAL_UART_IRQHandler+0x1a4>
 8002cec:	23a0      	movs	r3, #160	; 0xa0
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	04db      	lsls	r3, r3, #19
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d00c      	beq.n	8002d14 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2290      	movs	r2, #144	; 0x90
 8002d08:	589b      	ldr	r3, [r3, r2]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2190      	movs	r1, #144	; 0x90
 8002d12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2290      	movs	r2, #144	; 0x90
 8002d18:	589b      	ldr	r3, [r3, r2]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d100      	bne.n	8002d20 <HAL_UART_IRQHandler+0x1b0>
 8002d1e:	e23d      	b.n	800319c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d20:	23a4      	movs	r3, #164	; 0xa4
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2220      	movs	r2, #32
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d015      	beq.n	8002d58 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d2c:	23a0      	movs	r3, #160	; 0xa0
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	4013      	ands	r3, r2
 8002d36:	d106      	bne.n	8002d46 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d38:	239c      	movs	r3, #156	; 0x9c
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	4013      	ands	r3, r2
 8002d44:	d008      	beq.n	8002d58 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	0010      	movs	r0, r2
 8002d56:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2290      	movs	r2, #144	; 0x90
 8002d5c:	589b      	ldr	r3, [r3, r2]
 8002d5e:	2194      	movs	r1, #148	; 0x94
 8002d60:	187a      	adds	r2, r7, r1
 8002d62:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d004      	beq.n	8002d7c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2228      	movs	r2, #40	; 0x28
 8002d78:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d7a:	d04c      	beq.n	8002e16 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fe90 	bl	8003aa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2240      	movs	r2, #64	; 0x40
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d13c      	bne.n	8002e0c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d92:	f3ef 8310 	mrs	r3, PRIMASK
 8002d96:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9a:	2090      	movs	r0, #144	; 0x90
 8002d9c:	183a      	adds	r2, r7, r0
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	2301      	movs	r3, #1
 8002da2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da6:	f383 8810 	msr	PRIMASK, r3
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2140      	movs	r1, #64	; 0x40
 8002db8:	438a      	bics	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	589b      	ldr	r3, [r3, r2]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	589b      	ldr	r3, [r3, r2]
 8002dda:	4a17      	ldr	r2, [pc, #92]	; (8002e38 <HAL_UART_IRQHandler+0x2c8>)
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	589b      	ldr	r3, [r3, r2]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7fe f993 	bl	8001110 <HAL_DMA_Abort_IT>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d01c      	beq.n	8002e28 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	589b      	ldr	r3, [r3, r2]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	5852      	ldr	r2, [r2, r1]
 8002dfc:	0010      	movs	r0, r2
 8002dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e012      	b.n	8002e28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 f9d9 	bl	80031bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0a:	e00d      	b.n	8002e28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 f9d4 	bl	80031bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	e008      	b.n	8002e28 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 f9cf 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2290      	movs	r2, #144	; 0x90
 8002e22:	2100      	movs	r1, #0
 8002e24:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002e26:	e1b9      	b.n	800319c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	46c0      	nop			; (mov r8, r8)
    return;
 8002e2a:	e1b7      	b.n	800319c <HAL_UART_IRQHandler+0x62c>
 8002e2c:	0000080f 	.word	0x0000080f
 8002e30:	10000001 	.word	0x10000001
 8002e34:	04000120 	.word	0x04000120
 8002e38:	08003b71 	.word	0x08003b71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d000      	beq.n	8002e46 <HAL_UART_IRQHandler+0x2d6>
 8002e44:	e13e      	b.n	80030c4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e46:	23a4      	movs	r3, #164	; 0xa4
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d100      	bne.n	8002e54 <HAL_UART_IRQHandler+0x2e4>
 8002e52:	e137      	b.n	80030c4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e54:	23a0      	movs	r3, #160	; 0xa0
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d100      	bne.n	8002e62 <HAL_UART_IRQHandler+0x2f2>
 8002e60:	e130      	b.n	80030c4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2210      	movs	r2, #16
 8002e68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d000      	beq.n	8002e7a <HAL_UART_IRQHandler+0x30a>
 8002e78:	e0a4      	b.n	8002fc4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	589b      	ldr	r3, [r3, r2]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	217e      	movs	r1, #126	; 0x7e
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d100      	bne.n	8002e94 <HAL_UART_IRQHandler+0x324>
 8002e92:	e185      	b.n	80031a0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	225c      	movs	r2, #92	; 0x5c
 8002e98:	5a9b      	ldrh	r3, [r3, r2]
 8002e9a:	187a      	adds	r2, r7, r1
 8002e9c:	8812      	ldrh	r2, [r2, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d300      	bcc.n	8002ea4 <HAL_UART_IRQHandler+0x334>
 8002ea2:	e17d      	b.n	80031a0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	187a      	adds	r2, r7, r1
 8002ea8:	215e      	movs	r1, #94	; 0x5e
 8002eaa:	8812      	ldrh	r2, [r2, #0]
 8002eac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d170      	bne.n	8002fa0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ec6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec8:	2301      	movs	r3, #1
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	49b4      	ldr	r1, [pc, #720]	; (80031b0 <HAL_UART_IRQHandler+0x640>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	f383 8810 	msr	PRIMASK, r3
}
 8002eee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef8:	677b      	str	r3, [r7, #116]	; 0x74
 8002efa:	2301      	movs	r3, #1
 8002efc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	438a      	bics	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f22:	f3ef 8310 	mrs	r3, PRIMASK
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	438a      	bics	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f4a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	228c      	movs	r2, #140	; 0x8c
 8002f58:	2120      	movs	r1, #32
 8002f5a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8310 	mrs	r3, PRIMASK
 8002f66:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f72:	f383 8810 	msr	PRIMASK, r3
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2110      	movs	r1, #16
 8002f84:	438a      	bics	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	589b      	ldr	r3, [r3, r2]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fe f856 	bl	800104c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	225c      	movs	r2, #92	; 0x5c
 8002faa:	5a9a      	ldrh	r2, [r3, r2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	215e      	movs	r1, #94	; 0x5e
 8002fb0:	5a5b      	ldrh	r3, [r3, r1]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	0011      	movs	r1, r2
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 f90d 	bl	80031dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fc2:	e0ed      	b.n	80031a0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	225c      	movs	r2, #92	; 0x5c
 8002fc8:	5a99      	ldrh	r1, [r3, r2]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	225e      	movs	r2, #94	; 0x5e
 8002fce:	5a9b      	ldrh	r3, [r3, r2]
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	208e      	movs	r0, #142	; 0x8e
 8002fd4:	183b      	adds	r3, r7, r0
 8002fd6:	1a8a      	subs	r2, r1, r2
 8002fd8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	225e      	movs	r2, #94	; 0x5e
 8002fde:	5a9b      	ldrh	r3, [r3, r2]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x478>
 8002fe6:	e0dd      	b.n	80031a4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002fe8:	183b      	adds	r3, r7, r0
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d100      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x482>
 8002ff0:	e0d8      	b.n	80031a4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ffa:	2488      	movs	r4, #136	; 0x88
 8002ffc:	193a      	adds	r2, r7, r4
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	2301      	movs	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4967      	ldr	r1, [pc, #412]	; (80031b4 <HAL_UART_IRQHandler+0x644>)
 8003018:	400a      	ands	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	193b      	adds	r3, r7, r4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302a:	f3ef 8310 	mrs	r3, PRIMASK
 800302e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003030:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003032:	2484      	movs	r4, #132	; 0x84
 8003034:	193a      	adds	r2, r7, r4
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	2301      	movs	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	495a      	ldr	r1, [pc, #360]	; (80031b8 <HAL_UART_IRQHandler+0x648>)
 8003050:	400a      	ands	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	193b      	adds	r3, r7, r4
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f383 8810 	msr	PRIMASK, r3
}
 8003060:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	228c      	movs	r2, #140	; 0x8c
 8003066:	2120      	movs	r1, #32
 8003068:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003076:	f3ef 8310 	mrs	r3, PRIMASK
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307e:	2480      	movs	r4, #128	; 0x80
 8003080:	193a      	adds	r2, r7, r4
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	2301      	movs	r3, #1
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	f383 8810 	msr	PRIMASK, r3
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2110      	movs	r1, #16
 800309c:	438a      	bics	r2, r1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030b4:	183b      	adds	r3, r7, r0
 80030b6:	881a      	ldrh	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f88d 	bl	80031dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030c2:	e06f      	b.n	80031a4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030c4:	23a4      	movs	r3, #164	; 0xa4
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	035b      	lsls	r3, r3, #13
 80030ce:	4013      	ands	r3, r2
 80030d0:	d010      	beq.n	80030f4 <HAL_UART_IRQHandler+0x584>
 80030d2:	239c      	movs	r3, #156	; 0x9c
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	03db      	lsls	r3, r3, #15
 80030dc:	4013      	ands	r3, r2
 80030de:	d009      	beq.n	80030f4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	0352      	lsls	r2, r2, #13
 80030e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f001 fbb1 	bl	8004854 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030f2:	e05a      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80030f4:	23a4      	movs	r3, #164	; 0xa4
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	4013      	ands	r3, r2
 80030fe:	d016      	beq.n	800312e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003100:	23a0      	movs	r3, #160	; 0xa0
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	4013      	ands	r3, r2
 800310a:	d106      	bne.n	800311a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800310c:	239c      	movs	r3, #156	; 0x9c
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	4013      	ands	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311e:	2b00      	cmp	r3, #0
 8003120:	d042      	beq.n	80031a8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	0010      	movs	r0, r2
 800312a:	4798      	blx	r3
    }
    return;
 800312c:	e03c      	b.n	80031a8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800312e:	23a4      	movs	r3, #164	; 0xa4
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	4013      	ands	r3, r2
 8003138:	d00a      	beq.n	8003150 <HAL_UART_IRQHandler+0x5e0>
 800313a:	23a0      	movs	r3, #160	; 0xa0
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2240      	movs	r2, #64	; 0x40
 8003142:	4013      	ands	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fef7 	bl	8003f3c <UART_EndTransmit_IT>
    return;
 800314e:	e02c      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003150:	23a4      	movs	r3, #164	; 0xa4
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	4013      	ands	r3, r2
 800315c:	d00b      	beq.n	8003176 <HAL_UART_IRQHandler+0x606>
 800315e:	23a0      	movs	r3, #160	; 0xa0
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	05db      	lsls	r3, r3, #23
 8003168:	4013      	ands	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f001 fb80 	bl	8004874 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003174:	e019      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003176:	23a4      	movs	r3, #164	; 0xa4
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	045b      	lsls	r3, r3, #17
 8003180:	4013      	ands	r3, r2
 8003182:	d012      	beq.n	80031aa <HAL_UART_IRQHandler+0x63a>
 8003184:	23a0      	movs	r3, #160	; 0xa0
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da0d      	bge.n	80031aa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f001 fb67 	bl	8004864 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003196:	e008      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
      return;
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	e006      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
    return;
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	e004      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
      return;
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	e002      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
      return;
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	e000      	b.n	80031aa <HAL_UART_IRQHandler+0x63a>
    return;
 80031a8:	46c0      	nop			; (mov r8, r8)
  }
}
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b02a      	add	sp, #168	; 0xa8
 80031ae:	bdb0      	pop	{r4, r5, r7, pc}
 80031b0:	fffffeff 	.word	0xfffffeff
 80031b4:	fffffedf 	.word	0xfffffedf
 80031b8:	effffffe 	.word	0xeffffffe

080031bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	000a      	movs	r2, r1
 80031e6:	1cbb      	adds	r3, r7, #2
 80031e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b002      	add	sp, #8
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fc:	231a      	movs	r3, #26
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4313      	orrs	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4aa1      	ldr	r2, [pc, #644]	; (80034a8 <UART_SetConfig+0x2b4>)
 8003224:	4013      	ands	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a9c      	ldr	r2, [pc, #624]	; (80034ac <UART_SetConfig+0x2b8>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a93      	ldr	r2, [pc, #588]	; (80034b0 <UART_SetConfig+0x2bc>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	220f      	movs	r2, #15
 8003278:	4393      	bics	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a89      	ldr	r2, [pc, #548]	; (80034b4 <UART_SetConfig+0x2c0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d127      	bne.n	80032e2 <UART_SetConfig+0xee>
 8003292:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <UART_SetConfig+0x2c4>)
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	2203      	movs	r2, #3
 8003298:	4013      	ands	r3, r2
 800329a:	2b03      	cmp	r3, #3
 800329c:	d017      	beq.n	80032ce <UART_SetConfig+0xda>
 800329e:	d81b      	bhi.n	80032d8 <UART_SetConfig+0xe4>
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d00a      	beq.n	80032ba <UART_SetConfig+0xc6>
 80032a4:	d818      	bhi.n	80032d8 <UART_SetConfig+0xe4>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <UART_SetConfig+0xbc>
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d00a      	beq.n	80032c4 <UART_SetConfig+0xd0>
 80032ae:	e013      	b.n	80032d8 <UART_SetConfig+0xe4>
 80032b0:	231b      	movs	r3, #27
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e021      	b.n	80032fe <UART_SetConfig+0x10a>
 80032ba:	231b      	movs	r3, #27
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e01c      	b.n	80032fe <UART_SetConfig+0x10a>
 80032c4:	231b      	movs	r3, #27
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	2204      	movs	r2, #4
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e017      	b.n	80032fe <UART_SetConfig+0x10a>
 80032ce:	231b      	movs	r3, #27
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2208      	movs	r2, #8
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e012      	b.n	80032fe <UART_SetConfig+0x10a>
 80032d8:	231b      	movs	r3, #27
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2210      	movs	r2, #16
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e00d      	b.n	80032fe <UART_SetConfig+0x10a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a75      	ldr	r2, [pc, #468]	; (80034bc <UART_SetConfig+0x2c8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d104      	bne.n	80032f6 <UART_SetConfig+0x102>
 80032ec:	231b      	movs	r3, #27
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e003      	b.n	80032fe <UART_SetConfig+0x10a>
 80032f6:	231b      	movs	r3, #27
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2210      	movs	r2, #16
 80032fc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	429a      	cmp	r2, r3
 8003308:	d000      	beq.n	800330c <UART_SetConfig+0x118>
 800330a:	e065      	b.n	80033d8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800330c:	231b      	movs	r3, #27
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b08      	cmp	r3, #8
 8003314:	d015      	beq.n	8003342 <UART_SetConfig+0x14e>
 8003316:	dc18      	bgt.n	800334a <UART_SetConfig+0x156>
 8003318:	2b04      	cmp	r3, #4
 800331a:	d00d      	beq.n	8003338 <UART_SetConfig+0x144>
 800331c:	dc15      	bgt.n	800334a <UART_SetConfig+0x156>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <UART_SetConfig+0x134>
 8003322:	2b02      	cmp	r3, #2
 8003324:	d005      	beq.n	8003332 <UART_SetConfig+0x13e>
 8003326:	e010      	b.n	800334a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7ff f808 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 800332c:	0003      	movs	r3, r0
 800332e:	617b      	str	r3, [r7, #20]
        break;
 8003330:	e012      	b.n	8003358 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003332:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <UART_SetConfig+0x2cc>)
 8003334:	617b      	str	r3, [r7, #20]
        break;
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003338:	f7fe ff74 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 800333c:	0003      	movs	r3, r0
 800333e:	617b      	str	r3, [r7, #20]
        break;
 8003340:	e00a      	b.n	8003358 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	617b      	str	r3, [r7, #20]
        break;
 8003348:	e006      	b.n	8003358 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800334e:	231a      	movs	r3, #26
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
        break;
 8003356:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d100      	bne.n	8003360 <UART_SetConfig+0x16c>
 800335e:	e08d      	b.n	800347c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003364:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <UART_SetConfig+0x2d0>)
 8003366:	0052      	lsls	r2, r2, #1
 8003368:	5ad3      	ldrh	r3, [r2, r3]
 800336a:	0019      	movs	r1, r3
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f7fc fed9 	bl	8000124 <__udivsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	005a      	lsls	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	18d2      	adds	r2, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0019      	movs	r1, r3
 8003384:	0010      	movs	r0, r2
 8003386:	f7fc fecd 	bl	8000124 <__udivsi3>
 800338a:	0003      	movs	r3, r0
 800338c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d91c      	bls.n	80033ce <UART_SetConfig+0x1da>
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	025b      	lsls	r3, r3, #9
 800339a:	429a      	cmp	r2, r3
 800339c:	d217      	bcs.n	80033ce <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	200e      	movs	r0, #14
 80033a4:	183b      	adds	r3, r7, r0
 80033a6:	210f      	movs	r1, #15
 80033a8:	438a      	bics	r2, r1
 80033aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2207      	movs	r2, #7
 80033b4:	4013      	ands	r3, r2
 80033b6:	b299      	uxth	r1, r3
 80033b8:	183b      	adds	r3, r7, r0
 80033ba:	183a      	adds	r2, r7, r0
 80033bc:	8812      	ldrh	r2, [r2, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	183a      	adds	r2, r7, r0
 80033c8:	8812      	ldrh	r2, [r2, #0]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e056      	b.n	800347c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80033ce:	231a      	movs	r3, #26
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	e051      	b.n	800347c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033d8:	231b      	movs	r3, #27
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d015      	beq.n	800340e <UART_SetConfig+0x21a>
 80033e2:	dc18      	bgt.n	8003416 <UART_SetConfig+0x222>
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d00d      	beq.n	8003404 <UART_SetConfig+0x210>
 80033e8:	dc15      	bgt.n	8003416 <UART_SetConfig+0x222>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <UART_SetConfig+0x200>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d005      	beq.n	80033fe <UART_SetConfig+0x20a>
 80033f2:	e010      	b.n	8003416 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe ffa2 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 80033f8:	0003      	movs	r3, r0
 80033fa:	617b      	str	r3, [r7, #20]
        break;
 80033fc:	e012      	b.n	8003424 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fe:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <UART_SetConfig+0x2cc>)
 8003400:	617b      	str	r3, [r7, #20]
        break;
 8003402:	e00f      	b.n	8003424 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003404:	f7fe ff0e 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8003408:	0003      	movs	r3, r0
 800340a:	617b      	str	r3, [r7, #20]
        break;
 800340c:	e00a      	b.n	8003424 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	617b      	str	r3, [r7, #20]
        break;
 8003414:	e006      	b.n	8003424 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800341a:	231a      	movs	r3, #26
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
        break;
 8003422:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d028      	beq.n	800347c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800342e:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <UART_SetConfig+0x2d0>)
 8003430:	0052      	lsls	r2, r2, #1
 8003432:	5ad3      	ldrh	r3, [r2, r3]
 8003434:	0019      	movs	r1, r3
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7fc fe74 	bl	8000124 <__udivsi3>
 800343c:	0003      	movs	r3, r0
 800343e:	001a      	movs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	18d2      	adds	r2, r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0019      	movs	r1, r3
 800344e:	0010      	movs	r0, r2
 8003450:	f7fc fe68 	bl	8000124 <__udivsi3>
 8003454:	0003      	movs	r3, r0
 8003456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	d90a      	bls.n	8003474 <UART_SetConfig+0x280>
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	025b      	lsls	r3, r3, #9
 8003464:	429a      	cmp	r2, r3
 8003466:	d205      	bcs.n	8003474 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e003      	b.n	800347c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003474:	231a      	movs	r3, #26
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	226a      	movs	r2, #106	; 0x6a
 8003480:	2101      	movs	r1, #1
 8003482:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2268      	movs	r2, #104	; 0x68
 8003488:	2101      	movs	r1, #1
 800348a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003498:	231a      	movs	r3, #26
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	781b      	ldrb	r3, [r3, #0]
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b008      	add	sp, #32
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	cfff69f3 	.word	0xcfff69f3
 80034ac:	ffffcfff 	.word	0xffffcfff
 80034b0:	11fff4ff 	.word	0x11fff4ff
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40004400 	.word	0x40004400
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	08009a28 	.word	0x08009a28

080034c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	2201      	movs	r2, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <UART_AdvFeatureConfig+0x144>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	2202      	movs	r2, #2
 80034f8:	4013      	ands	r3, r2
 80034fa:	d00b      	beq.n	8003514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4a43      	ldr	r2, [pc, #268]	; (8003610 <UART_AdvFeatureConfig+0x148>)
 8003504:	4013      	ands	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	2204      	movs	r2, #4
 800351a:	4013      	ands	r3, r2
 800351c:	d00b      	beq.n	8003536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <UART_AdvFeatureConfig+0x14c>)
 8003526:	4013      	ands	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	2208      	movs	r2, #8
 800353c:	4013      	ands	r3, r2
 800353e:	d00b      	beq.n	8003558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <UART_AdvFeatureConfig+0x150>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	2210      	movs	r2, #16
 800355e:	4013      	ands	r3, r2
 8003560:	d00b      	beq.n	800357a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a2c      	ldr	r2, [pc, #176]	; (800361c <UART_AdvFeatureConfig+0x154>)
 800356a:	4013      	ands	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	2220      	movs	r2, #32
 8003580:	4013      	ands	r3, r2
 8003582:	d00b      	beq.n	800359c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	4a25      	ldr	r2, [pc, #148]	; (8003620 <UART_AdvFeatureConfig+0x158>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	4013      	ands	r3, r2
 80035a4:	d01d      	beq.n	80035e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <UART_AdvFeatureConfig+0x15c>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	035b      	lsls	r3, r3, #13
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d10b      	bne.n	80035e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <UART_AdvFeatureConfig+0x160>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	4013      	ands	r3, r2
 80035ea:	d00b      	beq.n	8003604 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <UART_AdvFeatureConfig+0x164>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}
 800360c:	fffdffff 	.word	0xfffdffff
 8003610:	fffeffff 	.word	0xfffeffff
 8003614:	fffbffff 	.word	0xfffbffff
 8003618:	ffff7fff 	.word	0xffff7fff
 800361c:	ffffefff 	.word	0xffffefff
 8003620:	ffffdfff 	.word	0xffffdfff
 8003624:	ffefffff 	.word	0xffefffff
 8003628:	ff9fffff 	.word	0xff9fffff
 800362c:	fff7ffff 	.word	0xfff7ffff

08003630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2290      	movs	r2, #144	; 0x90
 800363c:	2100      	movs	r1, #0
 800363e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003640:	f7fd fbe2 	bl	8000e08 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2208      	movs	r2, #8
 8003650:	4013      	ands	r3, r2
 8003652:	2b08      	cmp	r3, #8
 8003654:	d10c      	bne.n	8003670 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	0391      	lsls	r1, r2, #14
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <UART_CheckIdleState+0x98>)
 8003660:	9200      	str	r2, [sp, #0]
 8003662:	2200      	movs	r2, #0
 8003664:	f000 f832 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d001      	beq.n	8003670 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e026      	b.n	80036be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2204      	movs	r2, #4
 8003678:	4013      	ands	r3, r2
 800367a:	2b04      	cmp	r3, #4
 800367c:	d10c      	bne.n	8003698 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	03d1      	lsls	r1, r2, #15
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <UART_CheckIdleState+0x98>)
 8003688:	9200      	str	r2, [sp, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	f000 f81e 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e012      	b.n	80036be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2288      	movs	r2, #136	; 0x88
 800369c:	2120      	movs	r1, #32
 800369e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	228c      	movs	r2, #140	; 0x8c
 80036a4:	2120      	movs	r1, #32
 80036a6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2284      	movs	r2, #132	; 0x84
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b004      	add	sp, #16
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	01ffffff 	.word	0x01ffffff

080036cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b094      	sub	sp, #80	; 0x50
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036dc:	e0a7      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e0:	3301      	adds	r3, #1
 80036e2:	d100      	bne.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80036e4:	e0a3      	b.n	800382e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fd fb8f 	bl	8000e08 <HAL_GetTick>
 80036ea:	0002      	movs	r2, r0
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <UART_WaitOnFlagUntilTimeout+0x30>
 80036f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d13f      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003704:	647b      	str	r3, [r7, #68]	; 0x44
 8003706:	2301      	movs	r3, #1
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	f383 8810 	msr	PRIMASK, r3
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	494e      	ldr	r1, [pc, #312]	; (8003858 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800371e:	400a      	ands	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	f383 8810 	msr	PRIMASK, r3
}
 800372c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372e:	f3ef 8310 	mrs	r3, PRIMASK
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	643b      	str	r3, [r7, #64]	; 0x40
 8003738:	2301      	movs	r3, #1
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	f383 8810 	msr	PRIMASK, r3
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2101      	movs	r1, #1
 8003750:	438a      	bics	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375a:	f383 8810 	msr	PRIMASK, r3
}
 800375e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2288      	movs	r2, #136	; 0x88
 8003764:	2120      	movs	r1, #32
 8003766:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	228c      	movs	r2, #140	; 0x8c
 800376c:	2120      	movs	r1, #32
 800376e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2284      	movs	r2, #132	; 0x84
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e069      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2204      	movs	r2, #4
 8003784:	4013      	ands	r3, r2
 8003786:	d052      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	401a      	ands	r2, r3
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	429a      	cmp	r2, r3
 800379a:	d148      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	0112      	lsls	r2, r2, #4
 80037a4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a6:	f3ef 8310 	mrs	r3, PRIMASK
 80037aa:	613b      	str	r3, [r7, #16]
  return(result);
 80037ac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b0:	2301      	movs	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4924      	ldr	r1, [pc, #144]	; (8003858 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d8:	f3ef 8310 	mrs	r3, PRIMASK
 80037dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80037de:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e2:	2301      	movs	r3, #1
 80037e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f383 8810 	msr	PRIMASK, r3
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	438a      	bics	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	f383 8810 	msr	PRIMASK, r3
}
 8003808:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2288      	movs	r2, #136	; 0x88
 800380e:	2120      	movs	r1, #32
 8003810:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	228c      	movs	r2, #140	; 0x8c
 8003816:	2120      	movs	r1, #32
 8003818:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2290      	movs	r2, #144	; 0x90
 800381e:	2120      	movs	r1, #32
 8003820:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2284      	movs	r2, #132	; 0x84
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e010      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	425a      	negs	r2, r3
 800383e:	4153      	adcs	r3, r2
 8003840:	b2db      	uxtb	r3, r3
 8003842:	001a      	movs	r2, r3
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d100      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0x182>
 800384c:	e747      	b.n	80036de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b014      	add	sp, #80	; 0x50
 8003856:	bd80      	pop	{r7, pc}
 8003858:	fffffe5f 	.word	0xfffffe5f

0800385c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b098      	sub	sp, #96	; 0x60
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	1dbb      	adds	r3, r7, #6
 8003868:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1dba      	adds	r2, r7, #6
 8003874:	215c      	movs	r1, #92	; 0x5c
 8003876:	8812      	ldrh	r2, [r2, #0]
 8003878:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1dba      	adds	r2, r7, #6
 800387e:	215e      	movs	r1, #94	; 0x5e
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	015b      	lsls	r3, r3, #5
 8003892:	429a      	cmp	r2, r3
 8003894:	d10d      	bne.n	80038b2 <UART_Start_Receive_IT+0x56>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <UART_Start_Receive_IT+0x4c>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2260      	movs	r2, #96	; 0x60
 80038a2:	497b      	ldr	r1, [pc, #492]	; (8003a90 <UART_Start_Receive_IT+0x234>)
 80038a4:	5299      	strh	r1, [r3, r2]
 80038a6:	e02e      	b.n	8003906 <UART_Start_Receive_IT+0xaa>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2260      	movs	r2, #96	; 0x60
 80038ac:	21ff      	movs	r1, #255	; 0xff
 80038ae:	5299      	strh	r1, [r3, r2]
 80038b0:	e029      	b.n	8003906 <UART_Start_Receive_IT+0xaa>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <UART_Start_Receive_IT+0x7a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <UART_Start_Receive_IT+0x70>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2260      	movs	r2, #96	; 0x60
 80038c6:	21ff      	movs	r1, #255	; 0xff
 80038c8:	5299      	strh	r1, [r3, r2]
 80038ca:	e01c      	b.n	8003906 <UART_Start_Receive_IT+0xaa>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2260      	movs	r2, #96	; 0x60
 80038d0:	217f      	movs	r1, #127	; 0x7f
 80038d2:	5299      	strh	r1, [r3, r2]
 80038d4:	e017      	b.n	8003906 <UART_Start_Receive_IT+0xaa>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	055b      	lsls	r3, r3, #21
 80038de:	429a      	cmp	r2, r3
 80038e0:	d10d      	bne.n	80038fe <UART_Start_Receive_IT+0xa2>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <UART_Start_Receive_IT+0x98>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2260      	movs	r2, #96	; 0x60
 80038ee:	217f      	movs	r1, #127	; 0x7f
 80038f0:	5299      	strh	r1, [r3, r2]
 80038f2:	e008      	b.n	8003906 <UART_Start_Receive_IT+0xaa>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2260      	movs	r2, #96	; 0x60
 80038f8:	213f      	movs	r1, #63	; 0x3f
 80038fa:	5299      	strh	r1, [r3, r2]
 80038fc:	e003      	b.n	8003906 <UART_Start_Receive_IT+0xaa>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2260      	movs	r2, #96	; 0x60
 8003902:	2100      	movs	r1, #0
 8003904:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2290      	movs	r2, #144	; 0x90
 800390a:	2100      	movs	r1, #0
 800390c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	228c      	movs	r2, #140	; 0x8c
 8003912:	2122      	movs	r1, #34	; 0x22
 8003914:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003916:	f3ef 8310 	mrs	r3, PRIMASK
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800391c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003920:	2301      	movs	r3, #1
 8003922:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2101      	movs	r1, #1
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	059b      	lsls	r3, r3, #22
 8003950:	429a      	cmp	r2, r3
 8003952:	d150      	bne.n	80039f6 <UART_Start_Receive_IT+0x19a>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2268      	movs	r2, #104	; 0x68
 8003958:	5a9b      	ldrh	r3, [r3, r2]
 800395a:	1dba      	adds	r2, r7, #6
 800395c:	8812      	ldrh	r2, [r2, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d349      	bcc.n	80039f6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	015b      	lsls	r3, r3, #5
 800396a:	429a      	cmp	r2, r3
 800396c:	d107      	bne.n	800397e <UART_Start_Receive_IT+0x122>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <UART_Start_Receive_IT+0x238>)
 800397a:	675a      	str	r2, [r3, #116]	; 0x74
 800397c:	e002      	b.n	8003984 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <UART_Start_Receive_IT+0x23c>)
 8003982:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d019      	beq.n	80039c0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398c:	f3ef 8310 	mrs	r3, PRIMASK
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003994:	65bb      	str	r3, [r7, #88]	; 0x58
 8003996:	2301      	movs	r3, #1
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	f383 8810 	msr	PRIMASK, r3
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0049      	lsls	r1, r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8310 	mrs	r3, PRIMASK
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80039c8:	657b      	str	r3, [r7, #84]	; 0x54
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	f383 8810 	msr	PRIMASK, r3
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2180      	movs	r1, #128	; 0x80
 80039e2:	0549      	lsls	r1, r1, #21
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	e047      	b.n	8003a86 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	015b      	lsls	r3, r3, #5
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d107      	bne.n	8003a12 <UART_Start_Receive_IT+0x1b6>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <UART_Start_Receive_IT+0x240>)
 8003a0e:	675a      	str	r2, [r3, #116]	; 0x74
 8003a10:	e002      	b.n	8003a18 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <UART_Start_Receive_IT+0x244>)
 8003a16:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d019      	beq.n	8003a54 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8310 	mrs	r3, PRIMASK
 8003a24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a26:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f383 8810 	msr	PRIMASK, r3
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2190      	movs	r1, #144	; 0x90
 8003a42:	0049      	lsls	r1, r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	e018      	b.n	8003a86 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	613b      	str	r3, [r7, #16]
  return(result);
 8003a5a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a5e:	2301      	movs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2120      	movs	r1, #32
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b018      	add	sp, #96	; 0x60
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	000001ff 	.word	0x000001ff
 8003a94:	08004569 	.word	0x08004569
 8003a98:	0800427d 	.word	0x0800427d
 8003a9c:	08004109 	.word	0x08004109
 8003aa0:	08003f95 	.word	0x08003f95

08003aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08e      	sub	sp, #56	; 0x38
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aac:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ab2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f383 8810 	msr	PRIMASK, r3
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4926      	ldr	r1, [pc, #152]	; (8003b68 <UART_EndRxTransfer+0xc4>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ade:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae2:	623b      	str	r3, [r7, #32]
  return(result);
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae8:	2301      	movs	r3, #1
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	491b      	ldr	r1, [pc, #108]	; (8003b6c <UART_EndRxTransfer+0xc8>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d118      	bne.n	8003b4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b18:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b22:	2301      	movs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2110      	movs	r1, #16
 8003b3a:	438a      	bics	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	228c      	movs	r2, #140	; 0x8c
 8003b4e:	2120      	movs	r1, #32
 8003b50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b00e      	add	sp, #56	; 0x38
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	fffffedf 	.word	0xfffffedf
 8003b6c:	effffffe 	.word	0xeffffffe

08003b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	225e      	movs	r2, #94	; 0x5e
 8003b82:	2100      	movs	r1, #0
 8003b84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2256      	movs	r2, #86	; 0x56
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7ff fb13 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	225e      	movs	r2, #94	; 0x5e
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	220f      	movs	r2, #15
 8003bba:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699a      	ldr	r2, [r3, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2108      	movs	r1, #8
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	228c      	movs	r2, #140	; 0x8c
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff faf5 	bl	80031cc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08a      	sub	sp, #40	; 0x28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2288      	movs	r2, #136	; 0x88
 8003bf6:	589b      	ldr	r3, [r3, r2]
 8003bf8:	2b21      	cmp	r3, #33	; 0x21
 8003bfa:	d14c      	bne.n	8003c96 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2256      	movs	r2, #86	; 0x56
 8003c00:	5a9b      	ldrh	r3, [r3, r2]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d132      	bne.n	8003c6e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c08:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	2301      	movs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3e:	617b      	str	r3, [r7, #20]
  return(result);
 8003c40:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	2301      	movs	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f383 8810 	msr	PRIMASK, r3
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2140      	movs	r1, #64	; 0x40
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c6c:	e013      	b.n	8003c96 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2256      	movs	r2, #86	; 0x56
 8003c88:	5a9b      	ldrh	r3, [r3, r2]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b299      	uxth	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2256      	movs	r2, #86	; 0x56
 8003c94:	5299      	strh	r1, [r3, r2]
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b00a      	add	sp, #40	; 0x28
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b08c      	sub	sp, #48	; 0x30
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2288      	movs	r2, #136	; 0x88
 8003caa:	589b      	ldr	r3, [r3, r2]
 8003cac:	2b21      	cmp	r3, #33	; 0x21
 8003cae:	d151      	bne.n	8003d54 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2256      	movs	r2, #86	; 0x56
 8003cb4:	5a9b      	ldrh	r3, [r3, r2]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d132      	bne.n	8003d22 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f383 8810 	msr	PRIMASK, r3
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	438a      	bics	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f383 8810 	msr	PRIMASK, r3
}
 8003cec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cee:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cf4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f383 8810 	msr	PRIMASK, r3
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d20:	e018      	b.n	8003d54 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	05d2      	lsls	r2, r2, #23
 8003d34:	0dd2      	lsrs	r2, r2, #23
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2256      	movs	r2, #86	; 0x56
 8003d46:	5a9b      	ldrh	r3, [r3, r2]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b299      	uxth	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2256      	movs	r2, #86	; 0x56
 8003d52:	5299      	strh	r1, [r3, r2]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b00c      	add	sp, #48	; 0x30
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	; 0x30
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2288      	movs	r2, #136	; 0x88
 8003d68:	589b      	ldr	r3, [r3, r2]
 8003d6a:	2b21      	cmp	r3, #33	; 0x21
 8003d6c:	d165      	bne.n	8003e3a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003d6e:	232e      	movs	r3, #46	; 0x2e
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	216a      	movs	r1, #106	; 0x6a
 8003d76:	5a52      	ldrh	r2, [r2, r1]
 8003d78:	801a      	strh	r2, [r3, #0]
 8003d7a:	e059      	b.n	8003e30 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2256      	movs	r2, #86	; 0x56
 8003d80:	5a9b      	ldrh	r3, [r3, r2]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d133      	bne.n	8003df0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d88:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d92:	2301      	movs	r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4926      	ldr	r1, [pc, #152]	; (8003e44 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003daa:	400a      	ands	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dba:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003dc0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f383 8810 	msr	PRIMASK, r3
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003dec:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003dee:	e024      	b.n	8003e3a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2256      	movs	r2, #86	; 0x56
 8003e16:	5a9b      	ldrh	r3, [r3, r2]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b299      	uxth	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2256      	movs	r2, #86	; 0x56
 8003e22:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e24:	212e      	movs	r1, #46	; 0x2e
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	187b      	adds	r3, r7, r1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	232e      	movs	r3, #46	; 0x2e
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1a0      	bne.n	8003d7c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b00c      	add	sp, #48	; 0x30
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	ff7fffff 	.word	0xff7fffff

08003e48 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2288      	movs	r2, #136	; 0x88
 8003e54:	589b      	ldr	r3, [r3, r2]
 8003e56:	2b21      	cmp	r3, #33	; 0x21
 8003e58:	d16a      	bne.n	8003f30 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e5a:	232e      	movs	r3, #46	; 0x2e
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	216a      	movs	r1, #106	; 0x6a
 8003e62:	5a52      	ldrh	r2, [r2, r1]
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e05e      	b.n	8003f26 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2256      	movs	r2, #86	; 0x56
 8003e6c:	5a9b      	ldrh	r3, [r3, r2]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d133      	bne.n	8003edc <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e74:	f3ef 8310 	mrs	r3, PRIMASK
 8003e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	2301      	movs	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4928      	ldr	r1, [pc, #160]	; (8003f38 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003e96:	400a      	ands	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eaa:	617b      	str	r3, [r7, #20]
  return(result);
 8003eac:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2140      	movs	r1, #64	; 0x40
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003ed8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003eda:	e029      	b.n	8003f30 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	05d2      	lsls	r2, r2, #23
 8003efa:	0dd2      	lsrs	r2, r2, #23
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2256      	movs	r2, #86	; 0x56
 8003f0c:	5a9b      	ldrh	r3, [r3, r2]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b299      	uxth	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2256      	movs	r2, #86	; 0x56
 8003f18:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f1a:	212e      	movs	r1, #46	; 0x2e
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	3a01      	subs	r2, #1
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	232e      	movs	r3, #46	; 0x2e
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d19b      	bne.n	8003e68 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b00c      	add	sp, #48	; 0x30
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	ff7fffff 	.word	0xff7fffff

08003f3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	2301      	movs	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	438a      	bics	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2288      	movs	r2, #136	; 0x88
 8003f7a:	2120      	movs	r1, #32
 8003f7c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f001 fc4c 	bl	8005824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b006      	add	sp, #24
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b090      	sub	sp, #64	; 0x40
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f9c:	203e      	movs	r0, #62	; 0x3e
 8003f9e:	183b      	adds	r3, r7, r0
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	2160      	movs	r1, #96	; 0x60
 8003fa4:	5a52      	ldrh	r2, [r2, r1]
 8003fa6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	228c      	movs	r2, #140	; 0x8c
 8003fac:	589b      	ldr	r3, [r3, r2]
 8003fae:	2b22      	cmp	r3, #34	; 0x22
 8003fb0:	d000      	beq.n	8003fb4 <UART_RxISR_8BIT+0x20>
 8003fb2:	e09a      	b.n	80040ea <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fba:	213c      	movs	r1, #60	; 0x3c
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	183b      	adds	r3, r7, r0
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b2d9      	uxtb	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	225e      	movs	r2, #94	; 0x5e
 8003fe4:	5a9b      	ldrh	r3, [r3, r2]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b299      	uxth	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	225e      	movs	r2, #94	; 0x5e
 8003ff0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	225e      	movs	r2, #94	; 0x5e
 8003ff6:	5a9b      	ldrh	r3, [r3, r2]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d000      	beq.n	8004000 <UART_RxISR_8BIT+0x6c>
 8003ffe:	e07c      	b.n	80040fa <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004000:	f3ef 8310 	mrs	r3, PRIMASK
 8004004:	61bb      	str	r3, [r7, #24]
  return(result);
 8004006:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4938      	ldr	r1, [pc, #224]	; (8004104 <UART_RxISR_8BIT+0x170>)
 8004022:	400a      	ands	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f383 8810 	msr	PRIMASK, r3
}
 8004030:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004032:	f3ef 8310 	mrs	r3, PRIMASK
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
 800403c:	2301      	movs	r3, #1
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	f383 8810 	msr	PRIMASK, r3
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	438a      	bics	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	228c      	movs	r2, #140	; 0x8c
 8004068:	2120      	movs	r1, #32
 800406a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d12f      	bne.n	80040e0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004086:	f3ef 8310 	mrs	r3, PRIMASK
 800408a:	60fb      	str	r3, [r7, #12]
  return(result);
 800408c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
 8004090:	2301      	movs	r3, #1
 8004092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f383 8810 	msr	PRIMASK, r3
}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2110      	movs	r1, #16
 80040a8:	438a      	bics	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f383 8810 	msr	PRIMASK, r3
}
 80040b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	2210      	movs	r2, #16
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d103      	bne.n	80040ce <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2210      	movs	r2, #16
 80040cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	225c      	movs	r2, #92	; 0x5c
 80040d2:	5a9a      	ldrh	r2, [r3, r2]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0011      	movs	r1, r2
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff f87f 	bl	80031dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040de:	e00c      	b.n	80040fa <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f001 fbc8 	bl	8005878 <HAL_UART_RxCpltCallback>
}
 80040e8:	e007      	b.n	80040fa <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699a      	ldr	r2, [r3, #24]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2108      	movs	r1, #8
 80040f6:	430a      	orrs	r2, r1
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b010      	add	sp, #64	; 0x40
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	fffffedf 	.word	0xfffffedf

08004108 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b090      	sub	sp, #64	; 0x40
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004110:	203e      	movs	r0, #62	; 0x3e
 8004112:	183b      	adds	r3, r7, r0
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	2160      	movs	r1, #96	; 0x60
 8004118:	5a52      	ldrh	r2, [r2, r1]
 800411a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	228c      	movs	r2, #140	; 0x8c
 8004120:	589b      	ldr	r3, [r3, r2]
 8004122:	2b22      	cmp	r3, #34	; 0x22
 8004124:	d000      	beq.n	8004128 <UART_RxISR_16BIT+0x20>
 8004126:	e09a      	b.n	800425e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412e:	213c      	movs	r1, #60	; 0x3c
 8004130:	187b      	adds	r3, r7, r1
 8004132:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800413a:	187b      	adds	r3, r7, r1
 800413c:	183a      	adds	r2, r7, r0
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	8812      	ldrh	r2, [r2, #0]
 8004142:	4013      	ands	r3, r2
 8004144:	b29a      	uxth	r2, r3
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	1c9a      	adds	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	225e      	movs	r2, #94	; 0x5e
 8004158:	5a9b      	ldrh	r3, [r3, r2]
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b299      	uxth	r1, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	225e      	movs	r2, #94	; 0x5e
 8004164:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	225e      	movs	r2, #94	; 0x5e
 800416a:	5a9b      	ldrh	r3, [r3, r2]
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d000      	beq.n	8004174 <UART_RxISR_16BIT+0x6c>
 8004172:	e07c      	b.n	800426e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004174:	f3ef 8310 	mrs	r3, PRIMASK
 8004178:	617b      	str	r3, [r7, #20]
  return(result);
 800417a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
 800417e:	2301      	movs	r3, #1
 8004180:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f383 8810 	msr	PRIMASK, r3
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4938      	ldr	r1, [pc, #224]	; (8004278 <UART_RxISR_16BIT+0x170>)
 8004196:	400a      	ands	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	f383 8810 	msr	PRIMASK, r3
}
 80041a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a6:	f3ef 8310 	mrs	r3, PRIMASK
 80041aa:	623b      	str	r3, [r7, #32]
  return(result);
 80041ac:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
 80041b0:	2301      	movs	r3, #1
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	f383 8810 	msr	PRIMASK, r3
}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2101      	movs	r1, #1
 80041c8:	438a      	bics	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	228c      	movs	r2, #140	; 0x8c
 80041dc:	2120      	movs	r1, #32
 80041de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d12f      	bne.n	8004254 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004200:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004204:	2301      	movs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2110      	movs	r1, #16
 800421c:	438a      	bics	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	2210      	movs	r2, #16
 8004234:	4013      	ands	r3, r2
 8004236:	2b10      	cmp	r3, #16
 8004238:	d103      	bne.n	8004242 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2210      	movs	r2, #16
 8004240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	225c      	movs	r2, #92	; 0x5c
 8004246:	5a9a      	ldrh	r2, [r3, r2]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f7fe ffc5 	bl	80031dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004252:	e00c      	b.n	800426e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0018      	movs	r0, r3
 8004258:	f001 fb0e 	bl	8005878 <HAL_UART_RxCpltCallback>
}
 800425c:	e007      	b.n	800426e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2108      	movs	r1, #8
 800426a:	430a      	orrs	r2, r1
 800426c:	619a      	str	r2, [r3, #24]
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b010      	add	sp, #64	; 0x40
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	fffffedf 	.word	0xfffffedf

0800427c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b09c      	sub	sp, #112	; 0x70
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004284:	236a      	movs	r3, #106	; 0x6a
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	2160      	movs	r1, #96	; 0x60
 800428c:	5a52      	ldrh	r2, [r2, r1]
 800428e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	228c      	movs	r2, #140	; 0x8c
 80042ac:	589b      	ldr	r3, [r3, r2]
 80042ae:	2b22      	cmp	r3, #34	; 0x22
 80042b0:	d000      	beq.n	80042b4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80042b2:	e144      	b.n	800453e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042b4:	235e      	movs	r3, #94	; 0x5e
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	2168      	movs	r1, #104	; 0x68
 80042bc:	5a52      	ldrh	r2, [r2, r1]
 80042be:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042c0:	e0eb      	b.n	800449a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c8:	215c      	movs	r1, #92	; 0x5c
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	236a      	movs	r3, #106	; 0x6a
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b2d9      	uxtb	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	400a      	ands	r2, r1
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	225e      	movs	r2, #94	; 0x5e
 80042f4:	5a9b      	ldrh	r3, [r3, r2]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b299      	uxth	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	225e      	movs	r2, #94	; 0x5e
 8004300:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	2207      	movs	r2, #7
 800430e:	4013      	ands	r3, r2
 8004310:	d049      	beq.n	80043a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	d010      	beq.n	800433c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800431a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4013      	ands	r3, r2
 8004322:	d00b      	beq.n	800433c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2201      	movs	r2, #1
 800432a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2290      	movs	r2, #144	; 0x90
 8004330:	589b      	ldr	r3, [r3, r2]
 8004332:	2201      	movs	r2, #1
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2190      	movs	r1, #144	; 0x90
 800433a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433e:	2202      	movs	r2, #2
 8004340:	4013      	ands	r3, r2
 8004342:	d00f      	beq.n	8004364 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004346:	2201      	movs	r2, #1
 8004348:	4013      	ands	r3, r2
 800434a:	d00b      	beq.n	8004364 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2202      	movs	r2, #2
 8004352:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2290      	movs	r2, #144	; 0x90
 8004358:	589b      	ldr	r3, [r3, r2]
 800435a:	2204      	movs	r2, #4
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2190      	movs	r1, #144	; 0x90
 8004362:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	2204      	movs	r2, #4
 8004368:	4013      	ands	r3, r2
 800436a:	d00f      	beq.n	800438c <UART_RxISR_8BIT_FIFOEN+0x110>
 800436c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436e:	2201      	movs	r2, #1
 8004370:	4013      	ands	r3, r2
 8004372:	d00b      	beq.n	800438c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2204      	movs	r2, #4
 800437a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2290      	movs	r2, #144	; 0x90
 8004380:	589b      	ldr	r3, [r3, r2]
 8004382:	2202      	movs	r2, #2
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2190      	movs	r1, #144	; 0x90
 800438a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2290      	movs	r2, #144	; 0x90
 8004390:	589b      	ldr	r3, [r3, r2]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0018      	movs	r0, r3
 800439a:	f7fe ff0f 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2290      	movs	r2, #144	; 0x90
 80043a2:	2100      	movs	r1, #0
 80043a4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	225e      	movs	r2, #94	; 0x5e
 80043aa:	5a9b      	ldrh	r3, [r3, r2]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d173      	bne.n	800449a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b2:	f3ef 8310 	mrs	r3, PRIMASK
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80043b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80043bc:	2301      	movs	r3, #1
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	f383 8810 	msr	PRIMASK, r3
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4961      	ldr	r1, [pc, #388]	; (8004558 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e4:	f3ef 8310 	mrs	r3, PRIMASK
 80043e8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043ec:	657b      	str	r3, [r7, #84]	; 0x54
 80043ee:	2301      	movs	r3, #1
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f4:	f383 8810 	msr	PRIMASK, r3
}
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4955      	ldr	r1, [pc, #340]	; (800455c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004406:	400a      	ands	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004410:	f383 8810 	msr	PRIMASK, r3
}
 8004414:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	228c      	movs	r2, #140	; 0x8c
 800441a:	2120      	movs	r1, #32
 800441c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d12f      	bne.n	8004492 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004438:	f3ef 8310 	mrs	r3, PRIMASK
 800443c:	623b      	str	r3, [r7, #32]
  return(result);
 800443e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	653b      	str	r3, [r7, #80]	; 0x50
 8004442:	2301      	movs	r3, #1
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f383 8810 	msr	PRIMASK, r3
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2110      	movs	r1, #16
 800445a:	438a      	bics	r2, r1
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	2210      	movs	r2, #16
 8004472:	4013      	ands	r3, r2
 8004474:	2b10      	cmp	r3, #16
 8004476:	d103      	bne.n	8004480 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2210      	movs	r2, #16
 800447e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	225c      	movs	r2, #92	; 0x5c
 8004484:	5a9a      	ldrh	r2, [r3, r2]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0011      	movs	r1, r2
 800448a:	0018      	movs	r0, r3
 800448c:	f7fe fea6 	bl	80031dc <HAL_UARTEx_RxEventCallback>
 8004490:	e003      	b.n	800449a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f001 f9ef 	bl	8005878 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800449a:	235e      	movs	r3, #94	; 0x5e
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <UART_RxISR_8BIT_FIFOEN+0x232>
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	2220      	movs	r2, #32
 80044a8:	4013      	ands	r3, r2
 80044aa:	d000      	beq.n	80044ae <UART_RxISR_8BIT_FIFOEN+0x232>
 80044ac:	e709      	b.n	80042c2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044ae:	204e      	movs	r0, #78	; 0x4e
 80044b0:	183b      	adds	r3, r7, r0
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	215e      	movs	r1, #94	; 0x5e
 80044b6:	5a52      	ldrh	r2, [r2, r1]
 80044b8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044ba:	0001      	movs	r1, r0
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d044      	beq.n	800454e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2268      	movs	r2, #104	; 0x68
 80044c8:	5a9b      	ldrh	r3, [r3, r2]
 80044ca:	187a      	adds	r2, r7, r1
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d23d      	bcs.n	800454e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8310 	mrs	r3, PRIMASK
 80044d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80044d8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
 80044dc:	2301      	movs	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f383 8810 	msr	PRIMASK, r3
}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	491b      	ldr	r1, [pc, #108]	; (8004560 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a17      	ldr	r2, [pc, #92]	; (8004564 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8004508:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800450a:	f3ef 8310 	mrs	r3, PRIMASK
 800450e:	617b      	str	r3, [r7, #20]
  return(result);
 8004510:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	2301      	movs	r3, #1
 8004516:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2120      	movs	r1, #32
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800453c:	e007      	b.n	800454e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2108      	movs	r1, #8
 800454a:	430a      	orrs	r2, r1
 800454c:	619a      	str	r2, [r3, #24]
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	b01c      	add	sp, #112	; 0x70
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	fffffeff 	.word	0xfffffeff
 800455c:	effffffe 	.word	0xeffffffe
 8004560:	efffffff 	.word	0xefffffff
 8004564:	08003f95 	.word	0x08003f95

08004568 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b09e      	sub	sp, #120	; 0x78
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004570:	2372      	movs	r3, #114	; 0x72
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	2160      	movs	r1, #96	; 0x60
 8004578:	5a52      	ldrh	r2, [r2, r1]
 800457a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	228c      	movs	r2, #140	; 0x8c
 8004598:	589b      	ldr	r3, [r3, r2]
 800459a:	2b22      	cmp	r3, #34	; 0x22
 800459c:	d000      	beq.n	80045a0 <UART_RxISR_16BIT_FIFOEN+0x38>
 800459e:	e144      	b.n	800482a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045a0:	2366      	movs	r3, #102	; 0x66
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	2168      	movs	r1, #104	; 0x68
 80045a8:	5a52      	ldrh	r2, [r2, r1]
 80045aa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045ac:	e0eb      	b.n	8004786 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b4:	2164      	movs	r1, #100	; 0x64
 80045b6:	187b      	adds	r3, r7, r1
 80045b8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	2272      	movs	r2, #114	; 0x72
 80045c4:	18ba      	adds	r2, r7, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	8812      	ldrh	r2, [r2, #0]
 80045ca:	4013      	ands	r3, r2
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	1c9a      	adds	r2, r3, #2
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	225e      	movs	r2, #94	; 0x5e
 80045e0:	5a9b      	ldrh	r3, [r3, r2]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b299      	uxth	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	225e      	movs	r2, #94	; 0x5e
 80045ec:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80045f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f8:	2207      	movs	r2, #7
 80045fa:	4013      	ands	r3, r2
 80045fc:	d049      	beq.n	8004692 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004600:	2201      	movs	r2, #1
 8004602:	4013      	ands	r3, r2
 8004604:	d010      	beq.n	8004628 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004606:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4013      	ands	r3, r2
 800460e:	d00b      	beq.n	8004628 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2201      	movs	r2, #1
 8004616:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2290      	movs	r2, #144	; 0x90
 800461c:	589b      	ldr	r3, [r3, r2]
 800461e:	2201      	movs	r2, #1
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2190      	movs	r1, #144	; 0x90
 8004626:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462a:	2202      	movs	r2, #2
 800462c:	4013      	ands	r3, r2
 800462e:	d00f      	beq.n	8004650 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004632:	2201      	movs	r2, #1
 8004634:	4013      	ands	r3, r2
 8004636:	d00b      	beq.n	8004650 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2202      	movs	r2, #2
 800463e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2290      	movs	r2, #144	; 0x90
 8004644:	589b      	ldr	r3, [r3, r2]
 8004646:	2204      	movs	r2, #4
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2190      	movs	r1, #144	; 0x90
 800464e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004652:	2204      	movs	r2, #4
 8004654:	4013      	ands	r3, r2
 8004656:	d00f      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800465a:	2201      	movs	r2, #1
 800465c:	4013      	ands	r3, r2
 800465e:	d00b      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2204      	movs	r2, #4
 8004666:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2290      	movs	r2, #144	; 0x90
 800466c:	589b      	ldr	r3, [r3, r2]
 800466e:	2202      	movs	r2, #2
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2190      	movs	r1, #144	; 0x90
 8004676:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2290      	movs	r2, #144	; 0x90
 800467c:	589b      	ldr	r3, [r3, r2]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f7fe fd99 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2290      	movs	r2, #144	; 0x90
 800468e:	2100      	movs	r1, #0
 8004690:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	225e      	movs	r2, #94	; 0x5e
 8004696:	5a9b      	ldrh	r3, [r3, r2]
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d173      	bne.n	8004786 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469e:	f3ef 8310 	mrs	r3, PRIMASK
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046a8:	2301      	movs	r3, #1
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4961      	ldr	r1, [pc, #388]	; (8004844 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d0:	f3ef 8310 	mrs	r3, PRIMASK
 80046d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80046d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80046da:	2301      	movs	r3, #1
 80046dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e0:	f383 8810 	msr	PRIMASK, r3
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4955      	ldr	r1, [pc, #340]	; (8004848 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80046f2:	400a      	ands	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
 80046f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fc:	f383 8810 	msr	PRIMASK, r3
}
 8004700:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	228c      	movs	r2, #140	; 0x8c
 8004706:	2120      	movs	r1, #32
 8004708:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d12f      	bne.n	800477e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472c:	657b      	str	r3, [r7, #84]	; 0x54
 800472e:	2301      	movs	r3, #1
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2110      	movs	r1, #16
 8004746:	438a      	bics	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2210      	movs	r2, #16
 800475e:	4013      	ands	r3, r2
 8004760:	2b10      	cmp	r3, #16
 8004762:	d103      	bne.n	800476c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2210      	movs	r2, #16
 800476a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	225c      	movs	r2, #92	; 0x5c
 8004770:	5a9a      	ldrh	r2, [r3, r2]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0011      	movs	r1, r2
 8004776:	0018      	movs	r0, r3
 8004778:	f7fe fd30 	bl	80031dc <HAL_UARTEx_RxEventCallback>
 800477c:	e003      	b.n	8004786 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f001 f879 	bl	8005878 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004786:	2366      	movs	r3, #102	; 0x66
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004792:	2220      	movs	r2, #32
 8004794:	4013      	ands	r3, r2
 8004796:	d000      	beq.n	800479a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004798:	e709      	b.n	80045ae <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800479a:	2052      	movs	r0, #82	; 0x52
 800479c:	183b      	adds	r3, r7, r0
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	215e      	movs	r1, #94	; 0x5e
 80047a2:	5a52      	ldrh	r2, [r2, r1]
 80047a4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80047a6:	0001      	movs	r1, r0
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d044      	beq.n	800483a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2268      	movs	r2, #104	; 0x68
 80047b4:	5a9b      	ldrh	r3, [r3, r2]
 80047b6:	187a      	adds	r2, r7, r1
 80047b8:	8812      	ldrh	r2, [r2, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d23d      	bcs.n	800483a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047be:	f3ef 8310 	mrs	r3, PRIMASK
 80047c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80047c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c8:	2301      	movs	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f383 8810 	msr	PRIMASK, r3
}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	491b      	ldr	r1, [pc, #108]	; (800484c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f383 8810 	msr	PRIMASK, r3
}
 80047ee:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a17      	ldr	r2, [pc, #92]	; (8004850 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80047f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f6:	f3ef 8310 	mrs	r3, PRIMASK
 80047fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80047fc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004800:	2301      	movs	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2120      	movs	r1, #32
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	f383 8810 	msr	PRIMASK, r3
}
 8004826:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004828:	e007      	b.n	800483a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2108      	movs	r1, #8
 8004836:	430a      	orrs	r2, r1
 8004838:	619a      	str	r2, [r3, #24]
}
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	46bd      	mov	sp, r7
 800483e:	b01e      	add	sp, #120	; 0x78
 8004840:	bd80      	pop	{r7, pc}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	fffffeff 	.word	0xfffffeff
 8004848:	effffffe 	.word	0xeffffffe
 800484c:	efffffff 	.word	0xefffffff
 8004850:	08004109 	.word	0x08004109

08004854 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	46bd      	mov	sp, r7
 8004870:	b002      	add	sp, #8
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800487c:	46c0      	nop			; (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	b002      	add	sp, #8
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2284      	movs	r2, #132	; 0x84
 8004890:	5c9b      	ldrb	r3, [r3, r2]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_UARTEx_DisableFifoMode+0x16>
 8004896:	2302      	movs	r3, #2
 8004898:	e027      	b.n	80048ea <HAL_UARTEx_DisableFifoMode+0x66>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2284      	movs	r2, #132	; 0x84
 800489e:	2101      	movs	r1, #1
 80048a0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2288      	movs	r2, #136	; 0x88
 80048a6:	2124      	movs	r1, #36	; 0x24
 80048a8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2101      	movs	r1, #1
 80048be:	438a      	bics	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a0b      	ldr	r2, [pc, #44]	; (80048f4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2288      	movs	r2, #136	; 0x88
 80048dc:	2120      	movs	r1, #32
 80048de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2284      	movs	r2, #132	; 0x84
 80048e4:	2100      	movs	r1, #0
 80048e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b004      	add	sp, #16
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	dfffffff 	.word	0xdfffffff

080048f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2284      	movs	r2, #132	; 0x84
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800490c:	2302      	movs	r3, #2
 800490e:	e02e      	b.n	800496e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2284      	movs	r2, #132	; 0x84
 8004914:	2101      	movs	r1, #1
 8004916:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2288      	movs	r2, #136	; 0x88
 800491c:	2124      	movs	r1, #36	; 0x24
 800491e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2101      	movs	r1, #1
 8004934:	438a      	bics	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	08d9      	lsrs	r1, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	0018      	movs	r0, r3
 8004950:	f000 f854 	bl	80049fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2288      	movs	r2, #136	; 0x88
 8004960:	2120      	movs	r1, #32
 8004962:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2284      	movs	r2, #132	; 0x84
 8004968:	2100      	movs	r1, #0
 800496a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b004      	add	sp, #16
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2284      	movs	r2, #132	; 0x84
 8004986:	5c9b      	ldrb	r3, [r3, r2]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e02f      	b.n	80049f0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2284      	movs	r2, #132	; 0x84
 8004994:	2101      	movs	r1, #1
 8004996:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2288      	movs	r2, #136	; 0x88
 800499c:	2124      	movs	r1, #36	; 0x24
 800499e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2101      	movs	r1, #1
 80049b4:	438a      	bics	r2, r1
 80049b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f000 f813 	bl	80049fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2288      	movs	r2, #136	; 0x88
 80049e2:	2120      	movs	r1, #32
 80049e4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2284      	movs	r2, #132	; 0x84
 80049ea:	2100      	movs	r1, #0
 80049ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b004      	add	sp, #16
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	f1ffffff 	.word	0xf1ffffff

080049fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	226a      	movs	r2, #106	; 0x6a
 8004a10:	2101      	movs	r1, #1
 8004a12:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2268      	movs	r2, #104	; 0x68
 8004a18:	2101      	movs	r1, #1
 8004a1a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a1c:	e043      	b.n	8004aa6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a1e:	260f      	movs	r6, #15
 8004a20:	19bb      	adds	r3, r7, r6
 8004a22:	2208      	movs	r2, #8
 8004a24:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a26:	200e      	movs	r0, #14
 8004a28:	183b      	adds	r3, r7, r0
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	0e5b      	lsrs	r3, r3, #25
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	240d      	movs	r4, #13
 8004a3a:	193b      	adds	r3, r7, r4
 8004a3c:	2107      	movs	r1, #7
 8004a3e:	400a      	ands	r2, r1
 8004a40:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	0f5b      	lsrs	r3, r3, #29
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	250c      	movs	r5, #12
 8004a4e:	197b      	adds	r3, r7, r5
 8004a50:	2107      	movs	r1, #7
 8004a52:	400a      	ands	r2, r1
 8004a54:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a56:	183b      	adds	r3, r7, r0
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	197a      	adds	r2, r7, r5
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	4914      	ldr	r1, [pc, #80]	; (8004ab0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004a60:	5c8a      	ldrb	r2, [r1, r2]
 8004a62:	435a      	muls	r2, r3
 8004a64:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a66:	197b      	adds	r3, r7, r5
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004a6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a6e:	0019      	movs	r1, r3
 8004a70:	f7fb fbe2 	bl	8000238 <__divsi3>
 8004a74:	0003      	movs	r3, r0
 8004a76:	b299      	uxth	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	226a      	movs	r2, #106	; 0x6a
 8004a7c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a7e:	19bb      	adds	r3, r7, r6
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	193a      	adds	r2, r7, r4
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	490a      	ldr	r1, [pc, #40]	; (8004ab0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004a88:	5c8a      	ldrb	r2, [r1, r2]
 8004a8a:	435a      	muls	r2, r3
 8004a8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a8e:	193b      	adds	r3, r7, r4
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004a94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a96:	0019      	movs	r1, r3
 8004a98:	f7fb fbce 	bl	8000238 <__divsi3>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	b299      	uxth	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2268      	movs	r2, #104	; 0x68
 8004aa4:	5299      	strh	r1, [r3, r2]
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b005      	add	sp, #20
 8004aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	08009a40 	.word	0x08009a40
 8004ab4:	08009a48 	.word	0x08009a48

08004ab8 <boardPreInit>:
//static u8 getAddr(void);
/* Private function prototypes -----------------------------------------------*/
// after GPIO initial, excute this function to enable
static void sayHello();

void boardPreInit(void){
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
	setupSimulatedEEPROM(&sEeprom);		// use 2 page for eeprom
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <boardPreInit+0x18>)
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 fee2 	bl	8005888 <setupSimulatedEEPROM>
	configRead();
 8004ac4:	f000 fa7c 	bl	8004fc0 <configRead>
}
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	20000e80 	.word	0x20000e80

08004ad4 <boardInit>:

void boardInit(void){
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	b08b      	sub	sp, #44	; 0x2c
 8004ad8:	af0a      	add	r7, sp, #40	; 0x28

	sayHello();
 8004ada:	f000 f8f5 	bl	8004cc8 <sayHello>
	//read board addr
	setupUartDev(&console, &huart2, uartTxPool, RX_POOL_LEN, uartRxPool, RX_POOL_LEN, uartRxBuf, RX_BUF_LEN);
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	009c      	lsls	r4, r3, #2
 8004ae2:	4a56      	ldr	r2, [pc, #344]	; (8004c3c <boardInit+0x168>)
 8004ae4:	4956      	ldr	r1, [pc, #344]	; (8004c40 <boardInit+0x16c>)
 8004ae6:	4857      	ldr	r0, [pc, #348]	; (8004c44 <boardInit+0x170>)
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	9303      	str	r3, [sp, #12]
 8004aec:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <boardInit+0x174>)
 8004aee:	9302      	str	r3, [sp, #8]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	4b55      	ldr	r3, [pc, #340]	; (8004c4c <boardInit+0x178>)
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	0023      	movs	r3, r4
 8004afc:	f002 fd3e 	bl	800757c <setupUartDev>

	memset(addrPre,0,4);
 8004b00:	4b53      	ldr	r3, [pc, #332]	; (8004c50 <boardInit+0x17c>)
 8004b02:	2204      	movs	r2, #4
 8004b04:	2100      	movs	r1, #0
 8004b06:	0018      	movs	r0, r3
 8004b08:	f003 fa04 	bl	8007f14 <memset>
	strFormat(addrPre, 4, "%d.", boardAddr);
 8004b0c:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <boardInit+0x180>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4a51      	ldr	r2, [pc, #324]	; (8004c58 <boardInit+0x184>)
 8004b12:	484f      	ldr	r0, [pc, #316]	; (8004c50 <boardInit+0x17c>)
 8004b14:	2104      	movs	r1, #4
 8004b16:	f001 ff9d 	bl	8006a54 <strFormat>
	print("%d.about(\"%s\")\r\n", boardAddr, ABOUT);
 8004b1a:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <boardInit+0x180>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	0019      	movs	r1, r3
 8004b20:	4a4e      	ldr	r2, [pc, #312]	; (8004c5c <boardInit+0x188>)
 8004b22:	4b4f      	ldr	r3, [pc, #316]	; (8004c60 <boardInit+0x18c>)
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f915 	bl	8004d54 <print>

	printS("setup input...");
 8004b2a:	4b4e      	ldr	r3, [pc, #312]	; (8004c64 <boardInit+0x190>)
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 f8f9 	bl	8004d24 <printS>
	outputDevSetup(&outputDev, GPIO_OUTPUTS, GPIO_OUTPUTS_LEN, 0x00000000);
 8004b32:	494d      	ldr	r1, [pc, #308]	; (8004c68 <boardInit+0x194>)
 8004b34:	484d      	ldr	r0, [pc, #308]	; (8004c6c <boardInit+0x198>)
 8004b36:	2300      	movs	r3, #0
 8004b38:	2208      	movs	r2, #8
 8004b3a:	f001 fba7 	bl	800628c <outputDevSetup>
	printS("ok\r\n");
 8004b3e:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <boardInit+0x19c>)
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 f8ef 	bl	8004d24 <printS>

	printS("setup ouput...");
 8004b46:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <boardInit+0x1a0>)
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 f8eb 	bl	8004d24 <printS>
	InputDevSetup(&inputDev, GPIO_INPUTS, GPIO_INPUTS_LEN);
 8004b4e:	494a      	ldr	r1, [pc, #296]	; (8004c78 <boardInit+0x1a4>)
 8004b50:	4b4a      	ldr	r3, [pc, #296]	; (8004c7c <boardInit+0x1a8>)
 8004b52:	2210      	movs	r2, #16
 8004b54:	0018      	movs	r0, r3
 8004b56:	f001 f883 	bl	8005c60 <InputDevSetup>
	printS("ok\r\n");
 8004b5a:	4b45      	ldr	r3, [pc, #276]	; (8004c70 <boardInit+0x19c>)
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f000 f8e1 	bl	8004d24 <printS>
	inputDev.rsrc.fallingCallback = inputFallingCB;
 8004b62:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <boardInit+0x1a8>)
 8004b64:	4a46      	ldr	r2, [pc, #280]	; (8004c80 <boardInit+0x1ac>)
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
	inputDev.rsrc.raisingCallback =inputRaisingCB;
 8004b68:	4b44      	ldr	r3, [pc, #272]	; (8004c7c <boardInit+0x1a8>)
 8004b6a:	4a46      	ldr	r2, [pc, #280]	; (8004c84 <boardInit+0x1b0>)
 8004b6c:	62da      	str	r2, [r3, #44]	; 0x2c

	printS("setup rs485...");
 8004b6e:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <boardInit+0x1b4>)
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 f8d7 	bl	8004d24 <printS>
	setupRs485Dev(&rs485, &huart1, rs485TxPool, RX_POOL_LEN, rs485RxPool, RX_POOL_LEN, rs485RxBuf, RX_BUF_LEN, DE, DET,
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	009d      	lsls	r5, r3, #2
 8004b7a:	4c44      	ldr	r4, [pc, #272]	; (8004c8c <boardInit+0x1b8>)
 8004b7c:	4b44      	ldr	r3, [pc, #272]	; (8004c90 <boardInit+0x1bc>)
 8004b7e:	469c      	mov	ip, r3
 8004b80:	4844      	ldr	r0, [pc, #272]	; (8004c94 <boardInit+0x1c0>)
 8004b82:	4b45      	ldr	r3, [pc, #276]	; (8004c98 <boardInit+0x1c4>)
 8004b84:	9309      	str	r3, [sp, #36]	; 0x24
 8004b86:	4b45      	ldr	r3, [pc, #276]	; (8004c9c <boardInit+0x1c8>)
 8004b88:	9308      	str	r3, [sp, #32]
 8004b8a:	4a45      	ldr	r2, [pc, #276]	; (8004ca0 <boardInit+0x1cc>)
 8004b8c:	2318      	movs	r3, #24
 8004b8e:	446b      	add	r3, sp
 8004b90:	ca42      	ldmia	r2!, {r1, r6}
 8004b92:	c342      	stmia	r3!, {r1, r6}
 8004b94:	4a43      	ldr	r2, [pc, #268]	; (8004ca4 <boardInit+0x1d0>)
 8004b96:	2310      	movs	r3, #16
 8004b98:	446b      	add	r3, sp
 8004b9a:	ca42      	ldmia	r2!, {r1, r6}
 8004b9c:	c342      	stmia	r3!, {r1, r6}
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	9303      	str	r3, [sp, #12]
 8004ba2:	4b41      	ldr	r3, [pc, #260]	; (8004ca8 <boardInit+0x1d4>)
 8004ba4:	9302      	str	r3, [sp, #8]
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <boardInit+0x1d8>)
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	002b      	movs	r3, r5
 8004bb2:	0022      	movs	r2, r4
 8004bb4:	4661      	mov	r1, ip
 8004bb6:	f002 f923 	bl	8006e00 <setupRs485Dev>
		rs485BeforeSend_1,
		rs485AfterSend_1
	);
	printS("ok\r\n");
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <boardInit+0x19c>)
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f8b1 	bl	8004d24 <printS>

	console.StartRcv(&console.rsrc);
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <boardInit+0x170>)
 8004bc4:	2298      	movs	r2, #152	; 0x98
 8004bc6:	589b      	ldr	r3, [r3, r2]
 8004bc8:	4a1e      	ldr	r2, [pc, #120]	; (8004c44 <boardInit+0x170>)
 8004bca:	0010      	movs	r0, r2
 8004bcc:	4798      	blx	r3
	rs485.rsrc.uartdev.StartRcv(&rs485.rsrc.uartdev.rsrc);
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <boardInit+0x1c0>)
 8004bd0:	2298      	movs	r2, #152	; 0x98
 8004bd2:	589b      	ldr	r3, [r3, r2]
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <boardInit+0x1c0>)
 8004bd6:	0010      	movs	r0, r2
 8004bd8:	4798      	blx	r3
	// when it get ready to receive
	HAL_GPIO_WritePin(rs485.rsrc.DE.GPIOx, rs485.rsrc.DE.GPIO_Pin, GPIO_PIN_RESET);
 8004bda:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <boardInit+0x1c0>)
 8004bdc:	22bc      	movs	r2, #188	; 0xbc
 8004bde:	5898      	ldr	r0, [r3, r2]
 8004be0:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <boardInit+0x1c0>)
 8004be2:	22c0      	movs	r2, #192	; 0xc0
 8004be4:	5a9b      	ldrh	r3, [r3, r2]
 8004be6:	2200      	movs	r2, #0
 8004be8:	0019      	movs	r1, r3
 8004bea:	f7fc fe1c 	bl	8001826 <HAL_GPIO_WritePin>

	printS("\ninitial complete, need help?");
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <boardInit+0x1dc>)
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f897 	bl	8004d24 <printS>
	print("\n%d.help()", boardAddr);
 8004bf6:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <boardInit+0x180>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <boardInit+0x1e0>)
 8004bfe:	0011      	movs	r1, r2
 8004c00:	0018      	movs	r0, r3
 8004c02:	f000 f8a7 	bl	8004d54 <print>
	print("\n%d.%s.help()", boardAddr, inputDev.rsrc.name);
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <boardInit+0x180>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <boardInit+0x1e4>)
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <boardInit+0x1e8>)
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 f89f 	bl	8004d54 <print>
	print("\n%d.%s.help()", boardAddr, outputDev.rsrc.name);
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <boardInit+0x180>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <boardInit+0x198>)
 8004c1e:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <boardInit+0x1e8>)
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 f897 	bl	8004d54 <print>
	printS("\r\n");
 8004c26:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <boardInit+0x1ec>)
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 f87b 	bl	8004d24 <printS>
	initalDone = 1;
 8004c2e:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <boardInit+0x1f0>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b001      	add	sp, #4
 8004c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3c:	200005e0 	.word	0x200005e0
 8004c40:	20000220 	.word	0x20000220
 8004c44:	200007e0 	.word	0x200007e0
 8004c48:	200004e0 	.word	0x200004e0
 8004c4c:	200002e0 	.word	0x200002e0
 8004c50:	200002d8 	.word	0x200002d8
 8004c54:	200002dc 	.word	0x200002dc
 8004c58:	08009268 	.word	0x08009268
 8004c5c:	08009a50 	.word	0x08009a50
 8004c60:	0800926c 	.word	0x0800926c
 8004c64:	08009280 	.word	0x08009280
 8004c68:	08009c08 	.word	0x08009c08
 8004c6c:	20000ec8 	.word	0x20000ec8
 8004c70:	08009290 	.word	0x08009290
 8004c74:	08009298 	.word	0x08009298
 8004c78:	08009b88 	.word	0x08009b88
 8004c7c:	20000e8c 	.word	0x20000e8c
 8004c80:	080057bd 	.word	0x080057bd
 8004c84:	080057f1 	.word	0x080057f1
 8004c88:	080092a8 	.word	0x080092a8
 8004c8c:	20000b9c 	.word	0x20000b9c
 8004c90:	2000018c 	.word	0x2000018c
 8004c94:	20000d9c 	.word	0x20000d9c
 8004c98:	08005771 	.word	0x08005771
 8004c9c:	080056fd 	.word	0x080056fd
 8004ca0:	08009b80 	.word	0x08009b80
 8004ca4:	08009b78 	.word	0x08009b78
 8004ca8:	20000a9c 	.word	0x20000a9c
 8004cac:	2000089c 	.word	0x2000089c
 8004cb0:	080092b8 	.word	0x080092b8
 8004cb4:	080092d8 	.word	0x080092d8
 8004cb8:	20000e91 	.word	0x20000e91
 8004cbc:	080092e4 	.word	0x080092e4
 8004cc0:	080092f4 	.word	0x080092f4
 8004cc4:	200002dd 	.word	0x200002dd

08004cc8 <sayHello>:

static void sayHello(){
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	u8 i;
	for(i=0;i<10;i++){
 8004cce:	1dfb      	adds	r3, r7, #7
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	e01a      	b.n	8004d0c <sayHello+0x44>
		HAL_GPIO_TogglePin(RUNNING.GPIOx, RUNNING.GPIO_Pin);
 8004cd6:	23a0      	movs	r3, #160	; 0xa0
 8004cd8:	05db      	lsls	r3, r3, #23
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	01d2      	lsls	r2, r2, #7
 8004cde:	0011      	movs	r1, r2
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7fc fdbd 	bl	8001860 <HAL_GPIO_TogglePin>
		HAL_Delay(10); HAL_IWDG_Refresh(&hiwdg);
 8004ce6:	200a      	movs	r0, #10
 8004ce8:	f7fc f898 	bl	8000e1c <HAL_Delay>
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <sayHello+0x58>)
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7fc fe24 	bl	800193c <HAL_IWDG_Refresh>
		HAL_Delay(10); HAL_IWDG_Refresh(&hiwdg);
 8004cf4:	200a      	movs	r0, #10
 8004cf6:	f7fc f891 	bl	8000e1c <HAL_Delay>
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <sayHello+0x58>)
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7fc fe1d 	bl	800193c <HAL_IWDG_Refresh>
	for(i=0;i<10;i++){
 8004d02:	1dfb      	adds	r3, r7, #7
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	3201      	adds	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	1dfb      	adds	r3, r7, #7
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b09      	cmp	r3, #9
 8004d12:	d9e0      	bls.n	8004cd6 <sayHello+0xe>
	}
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	20000118 	.word	0x20000118

08004d24 <printS>:
	}
	printS("\n");
	console.TxPolling(&console.rsrc);
}

void printS(const char* STRING){
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	console.Send(&console.rsrc, (const u8*)STRING, strlen(STRING));
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <printS+0x2c>)
 8004d2e:	22b0      	movs	r2, #176	; 0xb0
 8004d30:	589c      	ldr	r4, [r3, r2]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fb f9e3 	bl	8000100 <strlen>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <printS+0x2c>)
 8004d42:	0018      	movs	r0, r3
 8004d44:	47a0      	blx	r4
}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b003      	add	sp, #12
 8004d4c:	bd90      	pop	{r4, r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	200007e0 	.word	0x200007e0

08004d54 <print>:

void print(const char* FORMAT_ORG, ...){
 8004d54:	b40f      	push	{r0, r1, r2, r3}
 8004d56:	b580      	push	{r7, lr}
 8004d58:	4f1e      	ldr	r7, [pc, #120]	; (8004dd4 <print+0x80>)
 8004d5a:	44bd      	add	sp, r7
 8004d5c:	af00      	add	r7, sp, #0
	va_list ap;
	char buf[MAX_CMD_LEN] = {0};
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <print+0x80>)
 8004d60:	2282      	movs	r2, #130	; 0x82
 8004d62:	0092      	lsls	r2, r2, #2
 8004d64:	189b      	adds	r3, r3, r2
 8004d66:	19db      	adds	r3, r3, r7
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	22fe      	movs	r2, #254	; 0xfe
 8004d70:	0052      	lsls	r2, r2, #1
 8004d72:	2100      	movs	r1, #0
 8004d74:	0018      	movs	r0, r3
 8004d76:	f003 f8cd 	bl	8007f14 <memset>
	s16 bytes;
	//take string
	va_start(ap, FORMAT_ORG);
 8004d7a:	2385      	movs	r3, #133	; 0x85
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	2280      	movs	r2, #128	; 0x80
 8004d82:	0092      	lsls	r2, r2, #2
 8004d84:	18b9      	adds	r1, r7, r2
 8004d86:	600b      	str	r3, [r1, #0]
	bytes = vsnprintf(buf, MAX_CMD_LEN, FORMAT_ORG, ap);
 8004d88:	18bb      	adds	r3, r7, r2
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2284      	movs	r2, #132	; 0x84
 8004d8e:	0092      	lsls	r2, r2, #2
 8004d90:	18ba      	adds	r2, r7, r2
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	0089      	lsls	r1, r1, #2
 8004d98:	0038      	movs	r0, r7
 8004d9a:	f003 f941 	bl	8008020 <vsniprintf>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	490d      	ldr	r1, [pc, #52]	; (8004dd8 <print+0x84>)
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	801a      	strh	r2, [r3, #0]
	va_end(ap);
	//send out
	if(bytes>0)	console.Send(&console.rsrc, (u8*)buf, bytes);
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	2200      	movs	r2, #0
 8004daa:	5e9b      	ldrsh	r3, [r3, r2]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dd07      	ble.n	8004dc0 <print+0x6c>
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <print+0x88>)
 8004db2:	22b0      	movs	r2, #176	; 0xb0
 8004db4:	589b      	ldr	r3, [r3, r2]
 8004db6:	187a      	adds	r2, r7, r1
 8004db8:	8812      	ldrh	r2, [r2, #0]
 8004dba:	0039      	movs	r1, r7
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <print+0x88>)
 8004dbe:	4798      	blx	r3
}
 8004dc0:	46c0      	nop			; (mov r8, r8)
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	2382      	movs	r3, #130	; 0x82
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	449d      	add	sp, r3
 8004dca:	bc80      	pop	{r7}
 8004dcc:	bc08      	pop	{r3}
 8004dce:	b004      	add	sp, #16
 8004dd0:	4718      	bx	r3
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	fffffdf8 	.word	0xfffffdf8
 8004dd8:	00000206 	.word	0x00000206
 8004ddc:	200007e0 	.word	0x200007e0

08004de0 <printS485>:

void printS485(const char* STRING){
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	rs485.Send(&rs485.rsrc, (const u8*)STRING, strlen(STRING));
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <printS485+0x2c>)
 8004dea:	22d8      	movs	r2, #216	; 0xd8
 8004dec:	589c      	ldr	r4, [r3, r2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7fb f985 	bl	8000100 <strlen>
 8004df6:	0003      	movs	r3, r0
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <printS485+0x2c>)
 8004dfe:	0018      	movs	r0, r3
 8004e00:	47a0      	blx	r4
}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b003      	add	sp, #12
 8004e08:	bd90      	pop	{r4, r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	20000d9c 	.word	0x20000d9c

08004e10 <print485>:

void print485(const char* FORMAT_ORG, ...){
 8004e10:	b40f      	push	{r0, r1, r2, r3}
 8004e12:	b580      	push	{r7, lr}
 8004e14:	4f1e      	ldr	r7, [pc, #120]	; (8004e90 <print485+0x80>)
 8004e16:	44bd      	add	sp, r7
 8004e18:	af00      	add	r7, sp, #0
	va_list ap;
	char buf[MAX_CMD_LEN] = {0};
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <print485+0x80>)
 8004e1c:	2282      	movs	r2, #130	; 0x82
 8004e1e:	0092      	lsls	r2, r2, #2
 8004e20:	189b      	adds	r3, r3, r2
 8004e22:	19db      	adds	r3, r3, r7
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	22fe      	movs	r2, #254	; 0xfe
 8004e2c:	0052      	lsls	r2, r2, #1
 8004e2e:	2100      	movs	r1, #0
 8004e30:	0018      	movs	r0, r3
 8004e32:	f003 f86f 	bl	8007f14 <memset>
	s16 bytes;
	//take string
	va_start(ap, FORMAT_ORG);
 8004e36:	2385      	movs	r3, #133	; 0x85
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	2280      	movs	r2, #128	; 0x80
 8004e3e:	0092      	lsls	r2, r2, #2
 8004e40:	18b9      	adds	r1, r7, r2
 8004e42:	600b      	str	r3, [r1, #0]
	bytes = vsnprintf(buf, MAX_CMD_LEN, FORMAT_ORG, ap);
 8004e44:	18bb      	adds	r3, r7, r2
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2284      	movs	r2, #132	; 0x84
 8004e4a:	0092      	lsls	r2, r2, #2
 8004e4c:	18ba      	adds	r2, r7, r2
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	0089      	lsls	r1, r1, #2
 8004e54:	0038      	movs	r0, r7
 8004e56:	f003 f8e3 	bl	8008020 <vsniprintf>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	490d      	ldr	r1, [pc, #52]	; (8004e94 <print485+0x84>)
 8004e5e:	187b      	adds	r3, r7, r1
 8004e60:	801a      	strh	r2, [r3, #0]
	va_end(ap);
	//send out
	if(bytes>0)	rs485.Send(&rs485.rsrc, (u8*)buf, bytes);
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	2200      	movs	r2, #0
 8004e66:	5e9b      	ldrsh	r3, [r3, r2]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dd07      	ble.n	8004e7c <print485+0x6c>
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <print485+0x88>)
 8004e6e:	22d8      	movs	r2, #216	; 0xd8
 8004e70:	589b      	ldr	r3, [r3, r2]
 8004e72:	187a      	adds	r2, r7, r1
 8004e74:	8812      	ldrh	r2, [r2, #0]
 8004e76:	0039      	movs	r1, r7
 8004e78:	4807      	ldr	r0, [pc, #28]	; (8004e98 <print485+0x88>)
 8004e7a:	4798      	blx	r3
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	2382      	movs	r3, #130	; 0x82
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	449d      	add	sp, r3
 8004e86:	bc80      	pop	{r7}
 8004e88:	bc08      	pop	{r3}
 8004e8a:	b004      	add	sp, #16
 8004e8c:	4718      	bx	r3
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	fffffdf8 	.word	0xfffffdf8
 8004e94:	00000206 	.word	0x00000206
 8004e98:	20000d9c 	.word	0x20000d9c

08004e9c <ioReadReg>:
s8 ioRead(u16 addr, u8 *pDat, u16 nBytes){
	sEeprom.read(EEPROM_BASE_USER + addr, pDat, nBytes);
	return 0;
}

s8 ioReadReg(u16 addr, s32 *val){
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	1dbb      	adds	r3, r7, #6
 8004ea8:	801a      	strh	r2, [r3, #0]
	return(sEeprom.read(EEPROM_BASE_REG + addr*4, (u8*)val, 4));
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <ioReadReg+0x30>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1dba      	adds	r2, r7, #6
 8004eb0:	8812      	ldrh	r2, [r2, #0]
 8004eb2:	322c      	adds	r2, #44	; 0x2c
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	0092      	lsls	r2, r2, #2
 8004eb8:	b290      	uxth	r0, r2
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	4798      	blx	r3
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	b25b      	sxtb	r3, r3
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000e80 	.word	0x20000e80

08004ed0 <ioWriteReg>:

s8 ioWriteReg(u16 addr, s32 val){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	6039      	str	r1, [r7, #0]
 8004eda:	1dbb      	adds	r3, r7, #6
 8004edc:	801a      	strh	r2, [r3, #0]
	return(sEeprom.write(EEPROM_BASE_REG + addr*4, (u8*)&val, 4));
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <ioWriteReg+0x30>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	1dba      	adds	r2, r7, #6
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	322c      	adds	r2, #44	; 0x2c
 8004ee8:	b292      	uxth	r2, r2
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	b290      	uxth	r0, r2
 8004eee:	0039      	movs	r1, r7
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	4798      	blx	r3
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	b25b      	sxtb	r3, r3
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000e80 	.word	0x20000e80

08004f04 <configWrite>:

static s8 configWrite(void){
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
	u8 buff[16]={0};
 8004f0a:	1d3b      	adds	r3, r7, #4
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	220c      	movs	r2, #12
 8004f14:	2100      	movs	r1, #0
 8004f16:	0018      	movs	r0, r3
 8004f18:	f002 fffc 	bl	8007f14 <memset>
	u16 sum = 0,i;
 8004f1c:	2316      	movs	r3, #22
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2200      	movs	r2, #0
 8004f22:	801a      	strh	r2, [r3, #0]
	buff[0] = baudHost;
 8004f24:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <configWrite+0xac>)
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	1d3b      	adds	r3, r7, #4
 8004f2a:	701a      	strb	r2, [r3, #0]
	buff[1] = baud485;
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <configWrite+0xb0>)
 8004f2e:	781a      	ldrb	r2, [r3, #0]
 8004f30:	1d3b      	adds	r3, r7, #4
 8004f32:	705a      	strb	r2, [r3, #1]
	buff[2] = boardAddr;
 8004f34:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <configWrite+0xb4>)
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	709a      	strb	r2, [r3, #2]
	buff[3] = boardAddr>>8;
 8004f3c:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <configWrite+0xb4>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	121b      	asrs	r3, r3, #8
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	70da      	strb	r2, [r3, #3]
	for(i=0;i<14;i++){	sum += buff[i];	}
 8004f48:	2314      	movs	r3, #20
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	e010      	b.n	8004f74 <configWrite+0x70>
 8004f52:	2014      	movs	r0, #20
 8004f54:	183b      	adds	r3, r7, r0
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	1d3a      	adds	r2, r7, #4
 8004f5a:	5cd3      	ldrb	r3, [r2, r3]
 8004f5c:	b299      	uxth	r1, r3
 8004f5e:	2216      	movs	r2, #22
 8004f60:	18bb      	adds	r3, r7, r2
 8004f62:	18ba      	adds	r2, r7, r2
 8004f64:	8812      	ldrh	r2, [r2, #0]
 8004f66:	188a      	adds	r2, r1, r2
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	183b      	adds	r3, r7, r0
 8004f6c:	881a      	ldrh	r2, [r3, #0]
 8004f6e:	183b      	adds	r3, r7, r0
 8004f70:	3201      	adds	r2, #1
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	2314      	movs	r3, #20
 8004f76:	18fb      	adds	r3, r7, r3
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	2b0d      	cmp	r3, #13
 8004f7c:	d9e9      	bls.n	8004f52 <configWrite+0x4e>
	buff[14] = sum;
 8004f7e:	2116      	movs	r1, #22
 8004f80:	187b      	adds	r3, r7, r1
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	739a      	strb	r2, [r3, #14]
	buff[15] = sum>>8;
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	73da      	strb	r2, [r3, #15]
	sEeprom.write(EEPROM_SIZE_CFG, buff, 16);
 8004f98:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <configWrite+0xb8>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	1d39      	adds	r1, r7, #4
 8004f9e:	2210      	movs	r2, #16
 8004fa0:	2010      	movs	r0, #16
 8004fa2:	4798      	blx	r3
	return 0;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b006      	add	sp, #24
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	20000009 	.word	0x20000009
 8004fb4:	2000000a 	.word	0x2000000a
 8004fb8:	200002dc 	.word	0x200002dc
 8004fbc:	20000e80 	.word	0x20000e80

08004fc0 <configRead>:

static s8 configRead(void){
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
	u8 buff[16] = {0};
 8004fc6:	003b      	movs	r3, r7
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	220c      	movs	r2, #12
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f002 ff9e 	bl	8007f14 <memset>
	u16 sum,checkcode,i;
	sEeprom.read(EEPROM_SIZE_CFG, buff, 16);
 8004fd8:	4b38      	ldr	r3, [pc, #224]	; (80050bc <configRead+0xfc>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0039      	movs	r1, r7
 8004fde:	2210      	movs	r2, #16
 8004fe0:	2010      	movs	r0, #16
 8004fe2:	4798      	blx	r3
	for(i=0,sum=0;i<14;i++){	sum += buff[i];	}
 8004fe4:	2314      	movs	r3, #20
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	2200      	movs	r2, #0
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	2316      	movs	r3, #22
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	e010      	b.n	8005018 <configRead+0x58>
 8004ff6:	2014      	movs	r0, #20
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	003a      	movs	r2, r7
 8004ffe:	5cd3      	ldrb	r3, [r2, r3]
 8005000:	b299      	uxth	r1, r3
 8005002:	2216      	movs	r2, #22
 8005004:	18bb      	adds	r3, r7, r2
 8005006:	18ba      	adds	r2, r7, r2
 8005008:	8812      	ldrh	r2, [r2, #0]
 800500a:	188a      	adds	r2, r1, r2
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	183b      	adds	r3, r7, r0
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	183b      	adds	r3, r7, r0
 8005014:	3201      	adds	r2, #1
 8005016:	801a      	strh	r2, [r3, #0]
 8005018:	2314      	movs	r3, #20
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	2b0d      	cmp	r3, #13
 8005020:	d9e9      	bls.n	8004ff6 <configRead+0x36>
	checkcode = buff[15];	checkcode <<= 8;
 8005022:	003b      	movs	r3, r7
 8005024:	7bda      	ldrb	r2, [r3, #15]
 8005026:	2012      	movs	r0, #18
 8005028:	183b      	adds	r3, r7, r0
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	183b      	adds	r3, r7, r0
 800502e:	183a      	adds	r2, r7, r0
 8005030:	8812      	ldrh	r2, [r2, #0]
 8005032:	0212      	lsls	r2, r2, #8
 8005034:	801a      	strh	r2, [r3, #0]
	checkcode |= buff[14];
 8005036:	003b      	movs	r3, r7
 8005038:	7b9b      	ldrb	r3, [r3, #14]
 800503a:	b299      	uxth	r1, r3
 800503c:	183b      	adds	r3, r7, r0
 800503e:	183a      	adds	r2, r7, r0
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	801a      	strh	r2, [r3, #0]

	if(sum == checkcode){
 8005046:	2316      	movs	r3, #22
 8005048:	18fa      	adds	r2, r7, r3
 800504a:	183b      	adds	r3, r7, r0
 800504c:	8812      	ldrh	r2, [r2, #0]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d125      	bne.n	80050a0 <configRead+0xe0>
		baudHost = buff[0];
 8005054:	003b      	movs	r3, r7
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <configRead+0x100>)
 800505a:	701a      	strb	r2, [r3, #0]
		baud485 = buff[1];
 800505c:	003b      	movs	r3, r7
 800505e:	785a      	ldrb	r2, [r3, #1]
 8005060:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <configRead+0x104>)
 8005062:	701a      	strb	r2, [r3, #0]
		if(baudHost >= 7)	 baudHost = 2;	// 2@115200
 8005064:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <configRead+0x100>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d902      	bls.n	8005072 <configRead+0xb2>
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <configRead+0x100>)
 800506e:	2202      	movs	r2, #2
 8005070:	701a      	strb	r2, [r3, #0]
		if(baud485 >= 7)	 baud485 = 2;	// 2@115200
 8005072:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <configRead+0x104>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b06      	cmp	r3, #6
 8005078:	d902      	bls.n	8005080 <configRead+0xc0>
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <configRead+0x104>)
 800507c:	2202      	movs	r2, #2
 800507e:	701a      	strb	r2, [r3, #0]
		boardAddr = buff[3];	boardAddr <<= 8;
 8005080:	003b      	movs	r3, r7
 8005082:	78da      	ldrb	r2, [r3, #3]
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <configRead+0x108>)
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <configRead+0x108>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
		boardAddr |= buff[2];
 800508e:	003b      	movs	r3, r7
 8005090:	789a      	ldrb	r2, [r3, #2]
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <configRead+0x108>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	b2da      	uxtb	r2, r3
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <configRead+0x108>)
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	e008      	b.n	80050b2 <configRead+0xf2>
	}
	else{
		baudHost = 2;	// 2@115200
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <configRead+0x100>)
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]
		baud485 = 2;	// 2@115200
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <configRead+0x104>)
 80050a8:	2202      	movs	r2, #2
 80050aa:	701a      	strb	r2, [r3, #0]
		boardAddr = 0;
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <configRead+0x108>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
	}

	return 0;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b006      	add	sp, #24
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000e80 	.word	0x20000e80
 80050c0:	20000009 	.word	0x20000009
 80050c4:	2000000a 	.word	0x2000000a
 80050c8:	200002dc 	.word	0x200002dc

080050cc <printHelp>:

void printHelp(u8 brdAddr, void (*xprint)(const char* FORMAT_ORG, ...)){
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af04      	add	r7, sp, #16
 80050d2:	0002      	movs	r2, r0
 80050d4:	6039      	str	r1, [r7, #0]
 80050d6:	1dfb      	adds	r3, r7, #7
 80050d8:	701a      	strb	r2, [r3, #0]
	xprint("+ok@%d.help()\n%s"
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <printHelp+0x40>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	001d      	movs	r5, r3
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <printHelp+0x40>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	001e      	movs	r6, r3
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <printHelp+0x40>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	0019      	movs	r1, r3
 80050ec:	4a08      	ldr	r2, [pc, #32]	; (8005110 <printHelp+0x44>)
 80050ee:	4809      	ldr	r0, [pc, #36]	; (8005114 <printHelp+0x48>)
 80050f0:	4b09      	ldr	r3, [pc, #36]	; (8005118 <printHelp+0x4c>)
 80050f2:	9302      	str	r3, [sp, #8]
 80050f4:	9101      	str	r1, [sp, #4]
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <printHelp+0x50>)
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	683c      	ldr	r4, [r7, #0]
 80050fc:	0033      	movs	r3, r6
 80050fe:	0029      	movs	r1, r5
 8005100:	47a0      	blx	r4
			"%d.%s.help()\n"
			"%d.%s.help()\r\n",
			boardAddr, COMMON_HELP,
			boardAddr, inputDev.rsrc.name,
			boardAddr, outputDev.rsrc.name);
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b003      	add	sp, #12
 8005108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	200002dc 	.word	0x200002dc
 8005110:	08009a64 	.word	0x08009a64
 8005114:	08009304 	.word	0x08009304
 8005118:	20000ec8 	.word	0x20000ec8
 800511c:	20000e91 	.word	0x20000e91

08005120 <brdCmd>:

u8 brdCmd(const char* CMD, u8 brdAddr, void (*xprint)(const char* FORMAT_ORG, ...)){
 8005120:	b5b0      	push	{r4, r5, r7, lr}
 8005122:	b0c8      	sub	sp, #288	; 0x120
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	4be4      	ldr	r3, [pc, #912]	; (80054bc <brdCmd+0x39c>)
 800512c:	2090      	movs	r0, #144	; 0x90
 800512e:	0040      	lsls	r0, r0, #1
 8005130:	181b      	adds	r3, r3, r0
 8005132:	19db      	adds	r3, r3, r7
 8005134:	1c0a      	adds	r2, r1, #0
 8005136:	701a      	strb	r2, [r3, #0]
	s32 i=0,j=0,k=0, ii;
 8005138:	2300      	movs	r3, #0
 800513a:	228a      	movs	r2, #138	; 0x8a
 800513c:	0052      	lsls	r2, r2, #1
 800513e:	18ba      	adds	r2, r7, r2
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	2300      	movs	r3, #0
 8005144:	2288      	movs	r2, #136	; 0x88
 8005146:	0052      	lsls	r2, r2, #1
 8005148:	18ba      	adds	r2, r7, r2
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	2300      	movs	r3, #0
 800514e:	228e      	movs	r2, #142	; 0x8e
 8005150:	0052      	lsls	r2, r2, #1
 8005152:	18ba      	adds	r2, r7, r2
 8005154:	6013      	str	r3, [r2, #0]
	u8 buff[256] = {0};
 8005156:	4bda      	ldr	r3, [pc, #872]	; (80054c0 <brdCmd+0x3a0>)
 8005158:	0004      	movs	r4, r0
 800515a:	181b      	adds	r3, r3, r0
 800515c:	19db      	adds	r3, r3, r7
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	3304      	adds	r3, #4
 8005164:	22fc      	movs	r2, #252	; 0xfc
 8005166:	2100      	movs	r1, #0
 8005168:	0018      	movs	r0, r3
 800516a:	f002 fed3 	bl	8007f14 <memset>
	// common

	if(strncmp(CMD, "about", strlen("about")) == 0){
 800516e:	49d5      	ldr	r1, [pc, #852]	; (80054c4 <brdCmd+0x3a4>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2205      	movs	r2, #5
 8005174:	0018      	movs	r0, r3
 8005176:	f002 feff 	bl	8007f78 <strncmp>
 800517a:	1e03      	subs	r3, r0, #0
 800517c:	d10b      	bne.n	8005196 <brdCmd+0x76>
		xprint("+ok@%d.about(\"%s\")\r\n", brdAddr, ABOUT);
 800517e:	4bcf      	ldr	r3, [pc, #828]	; (80054bc <brdCmd+0x39c>)
 8005180:	191b      	adds	r3, r3, r4
 8005182:	19db      	adds	r3, r3, r7
 8005184:	7819      	ldrb	r1, [r3, #0]
 8005186:	4ad0      	ldr	r2, [pc, #832]	; (80054c8 <brdCmd+0x3a8>)
 8005188:	48d0      	ldr	r0, [pc, #832]	; (80054cc <brdCmd+0x3ac>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4798      	blx	r3
		sayHello();
 800518e:	f7ff fd9b 	bl	8004cc8 <sayHello>
		return 1;
 8005192:	2301      	movs	r3, #1
 8005194:	e297      	b.n	80056c6 <brdCmd+0x5a6>
	}
	else if(strncmp(CMD, "help", strlen("help")) == 0){
 8005196:	49ce      	ldr	r1, [pc, #824]	; (80054d0 <brdCmd+0x3b0>)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2204      	movs	r2, #4
 800519c:	0018      	movs	r0, r3
 800519e:	f002 feeb 	bl	8007f78 <strncmp>
 80051a2:	1e03      	subs	r3, r0, #0
 80051a4:	d10c      	bne.n	80051c0 <brdCmd+0xa0>
		printHelp(brdAddr, xprint);
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4bc4      	ldr	r3, [pc, #784]	; (80054bc <brdCmd+0x39c>)
 80051aa:	2190      	movs	r1, #144	; 0x90
 80051ac:	0049      	lsls	r1, r1, #1
 80051ae:	185b      	adds	r3, r3, r1
 80051b0:	19db      	adds	r3, r3, r7
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	0011      	movs	r1, r2
 80051b6:	0018      	movs	r0, r3
 80051b8:	f7ff ff88 	bl	80050cc <printHelp>
		return 1;
 80051bc:	2301      	movs	r3, #1
 80051be:	e282      	b.n	80056c6 <brdCmd+0x5a6>
	}

	else if(strncmp(CMD, "restart", strlen("restart")) == 0){
 80051c0:	49c4      	ldr	r1, [pc, #784]	; (80054d4 <brdCmd+0x3b4>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2207      	movs	r2, #7
 80051c6:	0018      	movs	r0, r3
 80051c8:	f002 fed6 	bl	8007f78 <strncmp>
 80051cc:	1e03      	subs	r3, r0, #0
 80051ce:	d103      	bne.n	80051d8 <brdCmd+0xb8>
		HAL_NVIC_SystemReset();
 80051d0:	f7fb ff2b 	bl	800102a <HAL_NVIC_SystemReset>
		return 1;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e276      	b.n	80056c6 <brdCmd+0x5a6>
	}

	else if(sscanf(CMD, "address %d", &i)==1){
 80051d8:	248a      	movs	r4, #138	; 0x8a
 80051da:	0064      	lsls	r4, r4, #1
 80051dc:	193a      	adds	r2, r7, r4
 80051de:	49be      	ldr	r1, [pc, #760]	; (80054d8 <brdCmd+0x3b8>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f002 fe9e 	bl	8007f24 <siscanf>
 80051e8:	0003      	movs	r3, r0
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d120      	bne.n	8005230 <brdCmd+0x110>
		boardAddr = i;
 80051ee:	193b      	adds	r3, r7, r4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	4bb9      	ldr	r3, [pc, #740]	; (80054dc <brdCmd+0x3bc>)
 80051f6:	701a      	strb	r2, [r3, #0]
		configWrite();
 80051f8:	f7ff fe84 	bl	8004f04 <configWrite>
		memset(addrPre,0,4);
 80051fc:	4bb8      	ldr	r3, [pc, #736]	; (80054e0 <brdCmd+0x3c0>)
 80051fe:	2204      	movs	r2, #4
 8005200:	2100      	movs	r1, #0
 8005202:	0018      	movs	r0, r3
 8005204:	f002 fe86 	bl	8007f14 <memset>
		strFormat(addrPre, 4, "%d.", boardAddr);
 8005208:	4bb4      	ldr	r3, [pc, #720]	; (80054dc <brdCmd+0x3bc>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	4ab5      	ldr	r2, [pc, #724]	; (80054e4 <brdCmd+0x3c4>)
 800520e:	48b4      	ldr	r0, [pc, #720]	; (80054e0 <brdCmd+0x3c0>)
 8005210:	2104      	movs	r1, #4
 8005212:	f001 fc1f 	bl	8006a54 <strFormat>
		xprint("+ok@%d.address(%d)\r\n", brdAddr, i);
 8005216:	4ba9      	ldr	r3, [pc, #676]	; (80054bc <brdCmd+0x39c>)
 8005218:	2290      	movs	r2, #144	; 0x90
 800521a:	0052      	lsls	r2, r2, #1
 800521c:	189b      	adds	r3, r3, r2
 800521e:	19db      	adds	r3, r3, r7
 8005220:	7819      	ldrb	r1, [r3, #0]
 8005222:	193b      	adds	r3, r7, r4
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	48b0      	ldr	r0, [pc, #704]	; (80054e8 <brdCmd+0x3c8>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4798      	blx	r3
		return 1;
 800522c:	2301      	movs	r3, #1
 800522e:	e24a      	b.n	80056c6 <brdCmd+0x5a6>
	}

	else if(sscanf(CMD, "rom.format %d", &i)==1){
 8005230:	248a      	movs	r4, #138	; 0x8a
 8005232:	0064      	lsls	r4, r4, #1
 8005234:	193a      	adds	r2, r7, r4
 8005236:	49ad      	ldr	r1, [pc, #692]	; (80054ec <brdCmd+0x3cc>)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	0018      	movs	r0, r3
 800523c:	f002 fe72 	bl	8007f24 <siscanf>
 8005240:	0003      	movs	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d11c      	bne.n	8005280 <brdCmd+0x160>
		memset(buff,i,256);
 8005246:	193b      	adds	r3, r7, r4
 8005248:	6819      	ldr	r1, [r3, #0]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	005a      	lsls	r2, r3, #1
 800524e:	2510      	movs	r5, #16
 8005250:	197b      	adds	r3, r7, r5
 8005252:	0018      	movs	r0, r3
 8005254:	f002 fe5e 	bl	8007f14 <memset>
		sEeprom.write(0,buff,256);
 8005258:	4ba5      	ldr	r3, [pc, #660]	; (80054f0 <brdCmd+0x3d0>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2280      	movs	r2, #128	; 0x80
 800525e:	0052      	lsls	r2, r2, #1
 8005260:	1979      	adds	r1, r7, r5
 8005262:	2000      	movs	r0, #0
 8005264:	4798      	blx	r3
		xprint("+ok@%d.rom.format(%d)\r\n", brdAddr, i);
 8005266:	4b95      	ldr	r3, [pc, #596]	; (80054bc <brdCmd+0x39c>)
 8005268:	2290      	movs	r2, #144	; 0x90
 800526a:	0052      	lsls	r2, r2, #1
 800526c:	189b      	adds	r3, r3, r2
 800526e:	19db      	adds	r3, r3, r7
 8005270:	7819      	ldrb	r1, [r3, #0]
 8005272:	193b      	adds	r3, r7, r4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	489f      	ldr	r0, [pc, #636]	; (80054f4 <brdCmd+0x3d4>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4798      	blx	r3
		return 1;
 800527c:	2301      	movs	r3, #1
 800527e:	e222      	b.n	80056c6 <brdCmd+0x5a6>
	}
	else if(sscanf(CMD, "rom.write_test %d %d", &i, &j)==2){
 8005280:	2388      	movs	r3, #136	; 0x88
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	248a      	movs	r4, #138	; 0x8a
 8005288:	0064      	lsls	r4, r4, #1
 800528a:	193a      	adds	r2, r7, r4
 800528c:	499a      	ldr	r1, [pc, #616]	; (80054f8 <brdCmd+0x3d8>)
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f002 fe48 	bl	8007f24 <siscanf>
 8005294:	0003      	movs	r3, r0
 8005296:	2b02      	cmp	r3, #2
 8005298:	d14b      	bne.n	8005332 <brdCmd+0x212>
		buff[0] = 0;
 800529a:	4b89      	ldr	r3, [pc, #548]	; (80054c0 <brdCmd+0x3a0>)
 800529c:	2290      	movs	r2, #144	; 0x90
 800529e:	0052      	lsls	r2, r2, #1
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	19db      	adds	r3, r3, r7
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
		for(ii=i;ii<=j;ii++){
 80052a8:	193b      	adds	r3, r7, r4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	228c      	movs	r2, #140	; 0x8c
 80052ae:	0052      	lsls	r2, r2, #1
 80052b0:	18ba      	adds	r2, r7, r2
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e022      	b.n	80052fc <brdCmd+0x1dc>
			sEeprom.write(ii, buff, 1);
 80052b6:	4b8e      	ldr	r3, [pc, #568]	; (80054f0 <brdCmd+0x3d0>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	248c      	movs	r4, #140	; 0x8c
 80052bc:	0064      	lsls	r4, r4, #1
 80052be:	193a      	adds	r2, r7, r4
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	b290      	uxth	r0, r2
 80052c4:	2210      	movs	r2, #16
 80052c6:	18b9      	adds	r1, r7, r2
 80052c8:	2201      	movs	r2, #1
 80052ca:	4798      	blx	r3
			buff[0] ++;
 80052cc:	4b7c      	ldr	r3, [pc, #496]	; (80054c0 <brdCmd+0x3a0>)
 80052ce:	2190      	movs	r1, #144	; 0x90
 80052d0:	0049      	lsls	r1, r1, #1
 80052d2:	185b      	adds	r3, r3, r1
 80052d4:	19db      	adds	r3, r3, r7
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	4b78      	ldr	r3, [pc, #480]	; (80054c0 <brdCmd+0x3a0>)
 80052de:	185b      	adds	r3, r3, r1
 80052e0:	19db      	adds	r3, r3, r7
 80052e2:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
 80052e4:	4b85      	ldr	r3, [pc, #532]	; (80054fc <brdCmd+0x3dc>)
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7fc fb28 	bl	800193c <HAL_IWDG_Refresh>
			HAL_Delay(10);
 80052ec:	200a      	movs	r0, #10
 80052ee:	f7fb fd95 	bl	8000e1c <HAL_Delay>
		for(ii=i;ii<=j;ii++){
 80052f2:	193b      	adds	r3, r7, r4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	193a      	adds	r2, r7, r4
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	2088      	movs	r0, #136	; 0x88
 80052fe:	0040      	lsls	r0, r0, #1
 8005300:	183b      	adds	r3, r7, r0
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	228c      	movs	r2, #140	; 0x8c
 8005306:	0052      	lsls	r2, r2, #1
 8005308:	18ba      	adds	r2, r7, r2
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	ddd2      	ble.n	80052b6 <brdCmd+0x196>
		}
		xprint("+ok@%d.rom.write_test(%d,%d)\r\n", brdAddr, i, j);
 8005310:	4b6a      	ldr	r3, [pc, #424]	; (80054bc <brdCmd+0x39c>)
 8005312:	2290      	movs	r2, #144	; 0x90
 8005314:	0052      	lsls	r2, r2, #1
 8005316:	189b      	adds	r3, r3, r2
 8005318:	19db      	adds	r3, r3, r7
 800531a:	7819      	ldrb	r1, [r3, #0]
 800531c:	238a      	movs	r3, #138	; 0x8a
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	183b      	adds	r3, r7, r0
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4875      	ldr	r0, [pc, #468]	; (8005500 <brdCmd+0x3e0>)
 800532a:	687c      	ldr	r4, [r7, #4]
 800532c:	47a0      	blx	r4
		return 1;
 800532e:	2301      	movs	r3, #1
 8005330:	e1c9      	b.n	80056c6 <brdCmd+0x5a6>
	}

	else if(sscanf(CMD, "rom.read_test %d %d", &i, &j)==2){
 8005332:	2388      	movs	r3, #136	; 0x88
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	248a      	movs	r4, #138	; 0x8a
 800533a:	0064      	lsls	r4, r4, #1
 800533c:	193a      	adds	r2, r7, r4
 800533e:	4971      	ldr	r1, [pc, #452]	; (8005504 <brdCmd+0x3e4>)
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f002 fdef 	bl	8007f24 <siscanf>
 8005346:	0003      	movs	r3, r0
 8005348:	2b02      	cmp	r3, #2
 800534a:	d168      	bne.n	800541e <brdCmd+0x2fe>
		k = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	228e      	movs	r2, #142	; 0x8e
 8005350:	0052      	lsls	r2, r2, #1
 8005352:	18ba      	adds	r2, r7, r2
 8005354:	6013      	str	r3, [r2, #0]
		for(ii=i;ii<=j;ii++){
 8005356:	193b      	adds	r3, r7, r4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	228c      	movs	r2, #140	; 0x8c
 800535c:	0052      	lsls	r2, r2, #1
 800535e:	18ba      	adds	r2, r7, r2
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e041      	b.n	80053e8 <brdCmd+0x2c8>
			sEeprom.read(ii, buff, 1);
 8005364:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <brdCmd+0x3d0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	228c      	movs	r2, #140	; 0x8c
 800536a:	0052      	lsls	r2, r2, #1
 800536c:	18ba      	adds	r2, r7, r2
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	b290      	uxth	r0, r2
 8005372:	2210      	movs	r2, #16
 8005374:	18b9      	adds	r1, r7, r2
 8005376:	2201      	movs	r2, #1
 8005378:	4798      	blx	r3
			k++;
 800537a:	248e      	movs	r4, #142	; 0x8e
 800537c:	0064      	lsls	r4, r4, #1
 800537e:	193b      	adds	r3, r7, r4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	193a      	adds	r2, r7, r4
 8005386:	6013      	str	r3, [r2, #0]
			HAL_IWDG_Refresh(&hiwdg);
 8005388:	4b5c      	ldr	r3, [pc, #368]	; (80054fc <brdCmd+0x3dc>)
 800538a:	0018      	movs	r0, r3
 800538c:	f7fc fad6 	bl	800193c <HAL_IWDG_Refresh>
			if(k%16==0){
 8005390:	193b      	adds	r3, r7, r4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	220f      	movs	r2, #15
 8005396:	4013      	ands	r3, r2
 8005398:	d10e      	bne.n	80053b8 <brdCmd+0x298>
				xprint("%02x\n", buff[0]);
 800539a:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <brdCmd+0x3a0>)
 800539c:	2290      	movs	r2, #144	; 0x90
 800539e:	0052      	lsls	r2, r2, #1
 80053a0:	189b      	adds	r3, r3, r2
 80053a2:	19db      	adds	r3, r3, r7
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	0019      	movs	r1, r3
 80053a8:	4a57      	ldr	r2, [pc, #348]	; (8005508 <brdCmd+0x3e8>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0010      	movs	r0, r2
 80053ae:	4798      	blx	r3
				k = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	193a      	adds	r2, r7, r4
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00a      	b.n	80053ce <brdCmd+0x2ae>
			}
			else xprint("%02x ", buff[0]);
 80053b8:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <brdCmd+0x3a0>)
 80053ba:	2290      	movs	r2, #144	; 0x90
 80053bc:	0052      	lsls	r2, r2, #1
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	19db      	adds	r3, r3, r7
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	0019      	movs	r1, r3
 80053c6:	4a51      	ldr	r2, [pc, #324]	; (800550c <brdCmd+0x3ec>)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0010      	movs	r0, r2
 80053cc:	4798      	blx	r3
			console.TxPolling(&console.rsrc);
 80053ce:	4b50      	ldr	r3, [pc, #320]	; (8005510 <brdCmd+0x3f0>)
 80053d0:	22a0      	movs	r2, #160	; 0xa0
 80053d2:	589b      	ldr	r3, [r3, r2]
 80053d4:	4a4e      	ldr	r2, [pc, #312]	; (8005510 <brdCmd+0x3f0>)
 80053d6:	0010      	movs	r0, r2
 80053d8:	4798      	blx	r3
		for(ii=i;ii<=j;ii++){
 80053da:	228c      	movs	r2, #140	; 0x8c
 80053dc:	0052      	lsls	r2, r2, #1
 80053de:	18bb      	adds	r3, r7, r2
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	18ba      	adds	r2, r7, r2
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	2088      	movs	r0, #136	; 0x88
 80053ea:	0040      	lsls	r0, r0, #1
 80053ec:	183b      	adds	r3, r7, r0
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	228c      	movs	r2, #140	; 0x8c
 80053f2:	0052      	lsls	r2, r2, #1
 80053f4:	18ba      	adds	r2, r7, r2
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	ddb3      	ble.n	8005364 <brdCmd+0x244>
		}
		xprint("+ok@%d.rom.read_test(%d,%d)\r\n", brdAddr, i, j);
 80053fc:	4b2f      	ldr	r3, [pc, #188]	; (80054bc <brdCmd+0x39c>)
 80053fe:	2290      	movs	r2, #144	; 0x90
 8005400:	0052      	lsls	r2, r2, #1
 8005402:	189b      	adds	r3, r3, r2
 8005404:	19db      	adds	r3, r3, r7
 8005406:	7819      	ldrb	r1, [r3, #0]
 8005408:	238a      	movs	r3, #138	; 0x8a
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	18fb      	adds	r3, r7, r3
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	183b      	adds	r3, r7, r0
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	483f      	ldr	r0, [pc, #252]	; (8005514 <brdCmd+0x3f4>)
 8005416:	687c      	ldr	r4, [r7, #4]
 8005418:	47a0      	blx	r4
		return 1;
 800541a:	2301      	movs	r3, #1
 800541c:	e153      	b.n	80056c6 <brdCmd+0x5a6>
	}

	else if(sscanf(CMD, "reg.write %d %d ", &i, &j)==2){
 800541e:	2388      	movs	r3, #136	; 0x88
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	248a      	movs	r4, #138	; 0x8a
 8005426:	0064      	lsls	r4, r4, #1
 8005428:	193a      	adds	r2, r7, r4
 800542a:	493b      	ldr	r1, [pc, #236]	; (8005518 <brdCmd+0x3f8>)
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f002 fd79 	bl	8007f24 <siscanf>
 8005432:	0003      	movs	r3, r0
 8005434:	2b02      	cmp	r3, #2
 8005436:	d000      	beq.n	800543a <brdCmd+0x31a>
 8005438:	e076      	b.n	8005528 <brdCmd+0x408>
		if(i>=EEPROM_SIZE_REG/4)	{
 800543a:	193b      	adds	r3, r7, r4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	dd0b      	ble.n	800545a <brdCmd+0x33a>
			xprint("+err@%d.reg.write(\"0..%d\")\r\n", brdAddr, EEPROM_SIZE_REG/4-1);
 8005442:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <brdCmd+0x39c>)
 8005444:	2290      	movs	r2, #144	; 0x90
 8005446:	0052      	lsls	r2, r2, #1
 8005448:	189b      	adds	r3, r3, r2
 800544a:	19db      	adds	r3, r3, r7
 800544c:	7819      	ldrb	r1, [r3, #0]
 800544e:	4833      	ldr	r0, [pc, #204]	; (800551c <brdCmd+0x3fc>)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	220f      	movs	r2, #15
 8005454:	4798      	blx	r3
			return 1;
 8005456:	2301      	movs	r3, #1
 8005458:	e135      	b.n	80056c6 <brdCmd+0x5a6>
		}
		if(ioWriteReg(i&0xffff,j) == 0)	xprint("+ok@%d.reg.write(%d,%d)\r\n", brdAddr, i, j);
 800545a:	248a      	movs	r4, #138	; 0x8a
 800545c:	0064      	lsls	r4, r4, #1
 800545e:	193b      	adds	r3, r7, r4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	2588      	movs	r5, #136	; 0x88
 8005466:	006d      	lsls	r5, r5, #1
 8005468:	197a      	adds	r2, r7, r5
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	0011      	movs	r1, r2
 800546e:	0018      	movs	r0, r3
 8005470:	f7ff fd2e 	bl	8004ed0 <ioWriteReg>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d10d      	bne.n	8005494 <brdCmd+0x374>
 8005478:	4b10      	ldr	r3, [pc, #64]	; (80054bc <brdCmd+0x39c>)
 800547a:	2290      	movs	r2, #144	; 0x90
 800547c:	0052      	lsls	r2, r2, #1
 800547e:	189b      	adds	r3, r3, r2
 8005480:	19db      	adds	r3, r3, r7
 8005482:	7819      	ldrb	r1, [r3, #0]
 8005484:	193b      	adds	r3, r7, r4
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	197b      	adds	r3, r7, r5
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4824      	ldr	r0, [pc, #144]	; (8005520 <brdCmd+0x400>)
 800548e:	687c      	ldr	r4, [r7, #4]
 8005490:	47a0      	blx	r4
 8005492:	e010      	b.n	80054b6 <brdCmd+0x396>
		else xprint("+err@%d.reg.write(%d,%d)\r\n", brdAddr, i, j);
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <brdCmd+0x39c>)
 8005496:	2290      	movs	r2, #144	; 0x90
 8005498:	0052      	lsls	r2, r2, #1
 800549a:	189b      	adds	r3, r3, r2
 800549c:	19db      	adds	r3, r3, r7
 800549e:	7819      	ldrb	r1, [r3, #0]
 80054a0:	238a      	movs	r3, #138	; 0x8a
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	2388      	movs	r3, #136	; 0x88
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	481c      	ldr	r0, [pc, #112]	; (8005524 <brdCmd+0x404>)
 80054b2:	687c      	ldr	r4, [r7, #4]
 80054b4:	47a0      	blx	r4
		return 1;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e105      	b.n	80056c6 <brdCmd+0x5a6>
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	fffffeeb 	.word	0xfffffeeb
 80054c0:	fffffef0 	.word	0xfffffef0
 80054c4:	08009330 	.word	0x08009330
 80054c8:	08009a50 	.word	0x08009a50
 80054cc:	08009338 	.word	0x08009338
 80054d0:	08009350 	.word	0x08009350
 80054d4:	08009358 	.word	0x08009358
 80054d8:	08009360 	.word	0x08009360
 80054dc:	200002dc 	.word	0x200002dc
 80054e0:	200002d8 	.word	0x200002d8
 80054e4:	08009268 	.word	0x08009268
 80054e8:	0800936c 	.word	0x0800936c
 80054ec:	08009384 	.word	0x08009384
 80054f0:	20000e80 	.word	0x20000e80
 80054f4:	08009394 	.word	0x08009394
 80054f8:	080093ac 	.word	0x080093ac
 80054fc:	20000118 	.word	0x20000118
 8005500:	080093c4 	.word	0x080093c4
 8005504:	080093e4 	.word	0x080093e4
 8005508:	080093f8 	.word	0x080093f8
 800550c:	08009400 	.word	0x08009400
 8005510:	200007e0 	.word	0x200007e0
 8005514:	08009408 	.word	0x08009408
 8005518:	08009428 	.word	0x08009428
 800551c:	0800943c 	.word	0x0800943c
 8005520:	0800945c 	.word	0x0800945c
 8005524:	08009478 	.word	0x08009478
	}
	else if(sscanf(CMD, "reg.read %d ", &i)==1){
 8005528:	248a      	movs	r4, #138	; 0x8a
 800552a:	0064      	lsls	r4, r4, #1
 800552c:	193a      	adds	r2, r7, r4
 800552e:	4968      	ldr	r1, [pc, #416]	; (80056d0 <brdCmd+0x5b0>)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	0018      	movs	r0, r3
 8005534:	f002 fcf6 	bl	8007f24 <siscanf>
 8005538:	0003      	movs	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d12d      	bne.n	800559a <brdCmd+0x47a>
		if(i>=EEPROM_SIZE_REG/4){
 800553e:	193b      	adds	r3, r7, r4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	dd0b      	ble.n	800555e <brdCmd+0x43e>
			xprint("+err@%d.reg.read(\"0..%d\")\r\n", brdAddr, EEPROM_SIZE_REG/4-1);
 8005546:	4b63      	ldr	r3, [pc, #396]	; (80056d4 <brdCmd+0x5b4>)
 8005548:	2290      	movs	r2, #144	; 0x90
 800554a:	0052      	lsls	r2, r2, #1
 800554c:	189b      	adds	r3, r3, r2
 800554e:	19db      	adds	r3, r3, r7
 8005550:	7819      	ldrb	r1, [r3, #0]
 8005552:	4861      	ldr	r0, [pc, #388]	; (80056d8 <brdCmd+0x5b8>)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	220f      	movs	r2, #15
 8005558:	4798      	blx	r3
			return 1;
 800555a:	2301      	movs	r3, #1
 800555c:	e0b3      	b.n	80056c6 <brdCmd+0x5a6>
		}
		j = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	2488      	movs	r4, #136	; 0x88
 8005562:	0064      	lsls	r4, r4, #1
 8005564:	193a      	adds	r2, r7, r4
 8005566:	6013      	str	r3, [r2, #0]
		ioReadReg(i&0xffff, &j);
 8005568:	258a      	movs	r5, #138	; 0x8a
 800556a:	006d      	lsls	r5, r5, #1
 800556c:	197b      	adds	r3, r7, r5
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	193a      	adds	r2, r7, r4
 8005574:	0011      	movs	r1, r2
 8005576:	0018      	movs	r0, r3
 8005578:	f7ff fc90 	bl	8004e9c <ioReadReg>
		xprint("+ok@%d.reg.read(%d,%d)\r\n", brdAddr, i, j);
 800557c:	4b55      	ldr	r3, [pc, #340]	; (80056d4 <brdCmd+0x5b4>)
 800557e:	2290      	movs	r2, #144	; 0x90
 8005580:	0052      	lsls	r2, r2, #1
 8005582:	189b      	adds	r3, r3, r2
 8005584:	19db      	adds	r3, r3, r7
 8005586:	7819      	ldrb	r1, [r3, #0]
 8005588:	197b      	adds	r3, r7, r5
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	193b      	adds	r3, r7, r4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4852      	ldr	r0, [pc, #328]	; (80056dc <brdCmd+0x5bc>)
 8005592:	687c      	ldr	r4, [r7, #4]
 8005594:	47a0      	blx	r4
		return 1;
 8005596:	2301      	movs	r3, #1
 8005598:	e095      	b.n	80056c6 <brdCmd+0x5a6>
	}
	// baud config command
	else if(sscanf(CMD, "baud.set %d %d", &i,&j)==2){
 800559a:	2388      	movs	r3, #136	; 0x88
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	228a      	movs	r2, #138	; 0x8a
 80055a2:	0052      	lsls	r2, r2, #1
 80055a4:	18ba      	adds	r2, r7, r2
 80055a6:	494e      	ldr	r1, [pc, #312]	; (80056e0 <brdCmd+0x5c0>)
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f002 fcbb 	bl	8007f24 <siscanf>
 80055ae:	0003      	movs	r3, r0
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d165      	bne.n	8005680 <brdCmd+0x560>
		for(k=0;k<7;k++){
 80055b4:	2300      	movs	r3, #0
 80055b6:	228e      	movs	r2, #142	; 0x8e
 80055b8:	0052      	lsls	r2, r2, #1
 80055ba:	18ba      	adds	r2, r7, r2
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e017      	b.n	80055f0 <brdCmd+0x4d0>
			baudHost = k;
 80055c0:	218e      	movs	r1, #142	; 0x8e
 80055c2:	0049      	lsls	r1, r1, #1
 80055c4:	187b      	adds	r3, r7, r1
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	4b46      	ldr	r3, [pc, #280]	; (80056e4 <brdCmd+0x5c4>)
 80055cc:	701a      	strb	r2, [r3, #0]
			if(i==BAUD[baudHost])	break;
 80055ce:	4b45      	ldr	r3, [pc, #276]	; (80056e4 <brdCmd+0x5c4>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	001a      	movs	r2, r3
 80055d4:	4b44      	ldr	r3, [pc, #272]	; (80056e8 <brdCmd+0x5c8>)
 80055d6:	0092      	lsls	r2, r2, #2
 80055d8:	58d3      	ldr	r3, [r2, r3]
 80055da:	228a      	movs	r2, #138	; 0x8a
 80055dc:	0052      	lsls	r2, r2, #1
 80055de:	18ba      	adds	r2, r7, r2
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <brdCmd+0x4de>
		for(k=0;k<7;k++){
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	187a      	adds	r2, r7, r1
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	238e      	movs	r3, #142	; 0x8e
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	dde1      	ble.n	80055c0 <brdCmd+0x4a0>
 80055fc:	e000      	b.n	8005600 <brdCmd+0x4e0>
			if(i==BAUD[baudHost])	break;
 80055fe:	46c0      	nop			; (mov r8, r8)
		}
		for(k=0;k<7;k++){
 8005600:	2300      	movs	r3, #0
 8005602:	228e      	movs	r2, #142	; 0x8e
 8005604:	0052      	lsls	r2, r2, #1
 8005606:	18ba      	adds	r2, r7, r2
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e017      	b.n	800563c <brdCmd+0x51c>
			baud485 = k;
 800560c:	218e      	movs	r1, #142	; 0x8e
 800560e:	0049      	lsls	r1, r1, #1
 8005610:	187b      	adds	r3, r7, r1
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	b2da      	uxtb	r2, r3
 8005616:	4b35      	ldr	r3, [pc, #212]	; (80056ec <brdCmd+0x5cc>)
 8005618:	701a      	strb	r2, [r3, #0]
			if(j==BAUD[baud485])	break;
 800561a:	4b34      	ldr	r3, [pc, #208]	; (80056ec <brdCmd+0x5cc>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	001a      	movs	r2, r3
 8005620:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <brdCmd+0x5c8>)
 8005622:	0092      	lsls	r2, r2, #2
 8005624:	58d3      	ldr	r3, [r2, r3]
 8005626:	2288      	movs	r2, #136	; 0x88
 8005628:	0052      	lsls	r2, r2, #1
 800562a:	18ba      	adds	r2, r7, r2
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	4293      	cmp	r3, r2
 8005630:	d00b      	beq.n	800564a <brdCmd+0x52a>
		for(k=0;k<7;k++){
 8005632:	187b      	adds	r3, r7, r1
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	187a      	adds	r2, r7, r1
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	238e      	movs	r3, #142	; 0x8e
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b06      	cmp	r3, #6
 8005646:	dde1      	ble.n	800560c <brdCmd+0x4ec>
 8005648:	e000      	b.n	800564c <brdCmd+0x52c>
			if(j==BAUD[baud485])	break;
 800564a:	46c0      	nop			; (mov r8, r8)
		}
		configWrite();
 800564c:	f7ff fc5a 	bl	8004f04 <configWrite>
		xprint("+ok@%d.baud.set(%d,%d)\r\n", brdAddr, BAUD[baudHost], BAUD[baud485]);
 8005650:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <brdCmd+0x5b4>)
 8005652:	2290      	movs	r2, #144	; 0x90
 8005654:	0052      	lsls	r2, r2, #1
 8005656:	189b      	adds	r3, r3, r2
 8005658:	19db      	adds	r3, r3, r7
 800565a:	7819      	ldrb	r1, [r3, #0]
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <brdCmd+0x5c4>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	001a      	movs	r2, r3
 8005662:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <brdCmd+0x5c8>)
 8005664:	0092      	lsls	r2, r2, #2
 8005666:	58d5      	ldr	r5, [r2, r3]
 8005668:	4b20      	ldr	r3, [pc, #128]	; (80056ec <brdCmd+0x5cc>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	001a      	movs	r2, r3
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <brdCmd+0x5c8>)
 8005670:	0092      	lsls	r2, r2, #2
 8005672:	58d3      	ldr	r3, [r2, r3]
 8005674:	481e      	ldr	r0, [pc, #120]	; (80056f0 <brdCmd+0x5d0>)
 8005676:	687c      	ldr	r4, [r7, #4]
 8005678:	002a      	movs	r2, r5
 800567a:	47a0      	blx	r4
		return 1;
 800567c:	2301      	movs	r3, #1
 800567e:	e022      	b.n	80056c6 <brdCmd+0x5a6>
	}
	else if(strncmp(CMD, "baud.get ", strlen("baud.get "))==0){
 8005680:	491c      	ldr	r1, [pc, #112]	; (80056f4 <brdCmd+0x5d4>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2209      	movs	r2, #9
 8005686:	0018      	movs	r0, r3
 8005688:	f002 fc76 	bl	8007f78 <strncmp>
 800568c:	1e03      	subs	r3, r0, #0
 800568e:	d119      	bne.n	80056c4 <brdCmd+0x5a4>
		configRead();
 8005690:	f7ff fc96 	bl	8004fc0 <configRead>
		xprint("+ok@%d.baud.get(%d,%d)\r\n", brdAddr, BAUD[baudHost], BAUD[baud485]);
 8005694:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <brdCmd+0x5b4>)
 8005696:	2290      	movs	r2, #144	; 0x90
 8005698:	0052      	lsls	r2, r2, #1
 800569a:	189b      	adds	r3, r3, r2
 800569c:	19db      	adds	r3, r3, r7
 800569e:	7819      	ldrb	r1, [r3, #0]
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <brdCmd+0x5c4>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	001a      	movs	r2, r3
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <brdCmd+0x5c8>)
 80056a8:	0092      	lsls	r2, r2, #2
 80056aa:	58d5      	ldr	r5, [r2, r3]
 80056ac:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <brdCmd+0x5cc>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	001a      	movs	r2, r3
 80056b2:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <brdCmd+0x5c8>)
 80056b4:	0092      	lsls	r2, r2, #2
 80056b6:	58d3      	ldr	r3, [r2, r3]
 80056b8:	480f      	ldr	r0, [pc, #60]	; (80056f8 <brdCmd+0x5d8>)
 80056ba:	687c      	ldr	r4, [r7, #4]
 80056bc:	002a      	movs	r2, r5
 80056be:	47a0      	blx	r4
		return 1;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <brdCmd+0x5a6>
	}

	return 0;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b048      	add	sp, #288	; 0x120
 80056cc:	bdb0      	pop	{r4, r5, r7, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	08009494 	.word	0x08009494
 80056d4:	fffffeeb 	.word	0xfffffeeb
 80056d8:	080094a4 	.word	0x080094a4
 80056dc:	080094c0 	.word	0x080094c0
 80056e0:	080094dc 	.word	0x080094dc
 80056e4:	20000009 	.word	0x20000009
 80056e8:	08009dd8 	.word	0x08009dd8
 80056ec:	2000000a 	.word	0x2000000a
 80056f0:	080094ec 	.word	0x080094ec
 80056f4:	08009508 	.word	0x08009508
 80056f8:	08009514 	.word	0x08009514

080056fc <rs485BeforeSend_1>:

static s8 rs485BeforeSend_1(void){
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
	if(initalDone == 0)	return 0;
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <rs485BeforeSend_1+0x6c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <rs485BeforeSend_1+0x10>
 8005708:	2300      	movs	r3, #0
 800570a:	e029      	b.n	8005760 <rs485BeforeSend_1+0x64>
	if(HAL_GPIO_ReadPin(rs485.rsrc.DET.GPIOx, rs485.rsrc.DET.GPIO_Pin)==GPIO_PIN_SET){
 800570c:	4b17      	ldr	r3, [pc, #92]	; (800576c <rs485BeforeSend_1+0x70>)
 800570e:	22c4      	movs	r2, #196	; 0xc4
 8005710:	589a      	ldr	r2, [r3, r2]
 8005712:	4b16      	ldr	r3, [pc, #88]	; (800576c <rs485BeforeSend_1+0x70>)
 8005714:	21c8      	movs	r1, #200	; 0xc8
 8005716:	5a5b      	ldrh	r3, [r3, r1]
 8005718:	0019      	movs	r1, r3
 800571a:	0010      	movs	r0, r2
 800571c:	f7fc f866 	bl	80017ec <HAL_GPIO_ReadPin>
 8005720:	0003      	movs	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d102      	bne.n	800572c <rs485BeforeSend_1+0x30>
		return -1;
 8005726:	2301      	movs	r3, #1
 8005728:	425b      	negs	r3, r3
 800572a:	e019      	b.n	8005760 <rs485BeforeSend_1+0x64>
	}
	HAL_GPIO_WritePin(rs485.rsrc.DE.GPIOx, rs485.rsrc.DE.GPIO_Pin, GPIO_PIN_SET);
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <rs485BeforeSend_1+0x70>)
 800572e:	22bc      	movs	r2, #188	; 0xbc
 8005730:	5898      	ldr	r0, [r3, r2]
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <rs485BeforeSend_1+0x70>)
 8005734:	22c0      	movs	r2, #192	; 0xc0
 8005736:	5a9b      	ldrh	r3, [r3, r2]
 8005738:	2201      	movs	r2, #1
 800573a:	0019      	movs	r1, r3
 800573c:	f7fc f873 	bl	8001826 <HAL_GPIO_WritePin>
	while(1){
		if(HAL_GPIO_ReadPin(rs485.rsrc.DET.GPIOx, rs485.rsrc.DET.GPIO_Pin)==GPIO_PIN_SET){
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <rs485BeforeSend_1+0x70>)
 8005742:	22c4      	movs	r2, #196	; 0xc4
 8005744:	589a      	ldr	r2, [r3, r2]
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <rs485BeforeSend_1+0x70>)
 8005748:	21c8      	movs	r1, #200	; 0xc8
 800574a:	5a5b      	ldrh	r3, [r3, r1]
 800574c:	0019      	movs	r1, r3
 800574e:	0010      	movs	r0, r2
 8005750:	f7fc f84c 	bl	80017ec <HAL_GPIO_ReadPin>
 8005754:	0003      	movs	r3, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	d000      	beq.n	800575c <rs485BeforeSend_1+0x60>
 800575a:	e7f1      	b.n	8005740 <rs485BeforeSend_1+0x44>
			break;
 800575c:	46c0      	nop			; (mov r8, r8)
		}
	}
	return 0;
 800575e:	2300      	movs	r3, #0
}
 8005760:	0018      	movs	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	200002dd 	.word	0x200002dd
 800576c:	20000d9c 	.word	0x20000d9c

08005770 <rs485AfterSend_1>:

static s8 rs485AfterSend_1(UART_HandleTypeDef *huart){
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	if(huart->Instance == rs485.rsrc.uartdev.rsrc.huart->Instance){
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <rs485AfterSend_1+0x48>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d113      	bne.n	80057ae <rs485AfterSend_1+0x3e>
		HAL_GPIO_WritePin(rs485.rsrc.DE.GPIOx, rs485.rsrc.DE.GPIO_Pin, GPIO_PIN_RESET);
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <rs485AfterSend_1+0x48>)
 8005788:	22bc      	movs	r2, #188	; 0xbc
 800578a:	5898      	ldr	r0, [r3, r2]
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <rs485AfterSend_1+0x48>)
 800578e:	22c0      	movs	r2, #192	; 0xc0
 8005790:	5a9b      	ldrh	r3, [r3, r2]
 8005792:	2200      	movs	r2, #0
 8005794:	0019      	movs	r1, r3
 8005796:	f7fc f846 	bl	8001826 <HAL_GPIO_WritePin>
		rs485.rsrc.uartdev.rsrc.flag |= BIT(0);
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <rs485AfterSend_1+0x48>)
 800579c:	224a      	movs	r2, #74	; 0x4a
 800579e:	5a9b      	ldrh	r3, [r3, r2]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2201      	movs	r2, #1
 80057a4:	4313      	orrs	r3, r2
 80057a6:	b299      	uxth	r1, r3
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <rs485AfterSend_1+0x48>)
 80057aa:	224a      	movs	r2, #74	; 0x4a
 80057ac:	5299      	strh	r1, [r3, r2]
	}
	return 0;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b002      	add	sp, #8
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20000d9c 	.word	0x20000d9c

080057bc <inputFallingCB>:

static void inputFallingCB(u8 indx){
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	0002      	movs	r2, r0
 80057c4:	1dfb      	adds	r3, r7, #7
 80057c6:	701a      	strb	r2, [r3, #0]
	print("+msg@%d.%s.falling(%d)\n", boardAddr, inputDev.rsrc.name, indx);
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <inputFallingCB+0x28>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	0019      	movs	r1, r3
 80057ce:	1dfb      	adds	r3, r7, #7
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	4a05      	ldr	r2, [pc, #20]	; (80057e8 <inputFallingCB+0x2c>)
 80057d4:	4805      	ldr	r0, [pc, #20]	; (80057ec <inputFallingCB+0x30>)
 80057d6:	f7ff fabd 	bl	8004d54 <print>
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b002      	add	sp, #8
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	200002dc 	.word	0x200002dc
 80057e8:	20000e91 	.word	0x20000e91
 80057ec:	08009530 	.word	0x08009530

080057f0 <inputRaisingCB>:

static void inputRaisingCB(u8 indx){
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	0002      	movs	r2, r0
 80057f8:	1dfb      	adds	r3, r7, #7
 80057fa:	701a      	strb	r2, [r3, #0]
	print("+msg@%d.%s.raising(%d)\n", boardAddr, inputDev.rsrc.name, indx);
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <inputRaisingCB+0x28>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	0019      	movs	r1, r3
 8005802:	1dfb      	adds	r3, r7, #7
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	4a05      	ldr	r2, [pc, #20]	; (800581c <inputRaisingCB+0x2c>)
 8005808:	4805      	ldr	r0, [pc, #20]	; (8005820 <inputRaisingCB+0x30>)
 800580a:	f7ff faa3 	bl	8004d54 <print>
}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	46bd      	mov	sp, r7
 8005812:	b002      	add	sp, #8
 8005814:	bd80      	pop	{r7, pc}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	200002dc 	.word	0x200002dc
 800581c:	20000e91 	.word	0x20000e91
 8005820:	08009548 	.word	0x08009548

08005824 <HAL_UART_TxCpltCallback>:
  *         and get conversion result. You can add your own implementation.
  * @retval None
  */
// void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle){}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	if(initalDone==0)	return;
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <HAL_UART_TxCpltCallback+0x48>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d017      	beq.n	8005864 <HAL_UART_TxCpltCallback+0x40>
	rs485.rsrc.uartdev.rsrc.afterSend(huart);
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <HAL_UART_TxCpltCallback+0x4c>)
 8005836:	2294      	movs	r2, #148	; 0x94
 8005838:	589b      	ldr	r3, [r3, r2]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	0010      	movs	r0, r2
 800583e:	4798      	blx	r3
	if(huart->Instance == console.rsrc.huart->Instance){
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_UART_TxCpltCallback+0x50>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d10b      	bne.n	8005866 <HAL_UART_TxCpltCallback+0x42>
		console.rsrc.flag |= BIT(0);
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <HAL_UART_TxCpltCallback+0x50>)
 8005850:	224a      	movs	r2, #74	; 0x4a
 8005852:	5a9b      	ldrh	r3, [r3, r2]
 8005854:	b29b      	uxth	r3, r3
 8005856:	2201      	movs	r2, #1
 8005858:	4313      	orrs	r3, r2
 800585a:	b299      	uxth	r1, r3
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_UART_TxCpltCallback+0x50>)
 800585e:	224a      	movs	r2, #74	; 0x4a
 8005860:	5299      	strh	r1, [r3, r2]
 8005862:	e000      	b.n	8005866 <HAL_UART_TxCpltCallback+0x42>
	if(initalDone==0)	return;
 8005864:	46c0      	nop			; (mov r8, r8)
	}
}
 8005866:	46bd      	mov	sp, r7
 8005868:	b002      	add	sp, #8
 800586a:	bd80      	pop	{r7, pc}
 800586c:	200002dd 	.word	0x200002dd
 8005870:	20000d9c 	.word	0x20000d9c
 8005874:	200007e0 	.word	0x200007e0

08005878 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <setupSimulatedEEPROM>:
static int simulatedEEPROM_write(const u16 addr, const u8 *buff, const u16 bytes);
static int simulatedEEPROM_firstEmptyAddr256();
static int simulatedEEPROM_read256(const u16 addr, u8 *buff);
static int simulatedEEPROM_write256(const u16 addr, const u8 *buff);

void setupSimulatedEEPROM(sEEPROM_t* dev){
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	dev->read = simulatedEEPROM_read;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a06      	ldr	r2, [pc, #24]	; (80058ac <setupSimulatedEEPROM+0x24>)
 8005894:	601a      	str	r2, [r3, #0]
	dev->write = simulatedEEPROM_write;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <setupSimulatedEEPROM+0x28>)
 800589a:	605a      	str	r2, [r3, #4]
	dev->read256= simulatedEEPROM_read256;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a05      	ldr	r2, [pc, #20]	; (80058b4 <setupSimulatedEEPROM+0x2c>)
 80058a0:	609a      	str	r2, [r3, #8]
}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b002      	add	sp, #8
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	080058b9 	.word	0x080058b9
 80058b0:	08005989 	.word	0x08005989
 80058b4:	08005af1 	.word	0x08005af1

080058b8 <simulatedEEPROM_read>:

static int simulatedEEPROM_read(const u16 addr, u8 *buff, const u16 bytes){
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b0c5      	sub	sp, #276	; 0x114
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6039      	str	r1, [r7, #0]
 80058c0:	0011      	movs	r1, r2
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <simulatedEEPROM_read+0xc8>)
 80058c4:	2488      	movs	r4, #136	; 0x88
 80058c6:	0064      	lsls	r4, r4, #1
 80058c8:	191b      	adds	r3, r3, r4
 80058ca:	19db      	adds	r3, r3, r7
 80058cc:	1c02      	adds	r2, r0, #0
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <simulatedEEPROM_read+0xcc>)
 80058d2:	0020      	movs	r0, r4
 80058d4:	181b      	adds	r3, r3, r0
 80058d6:	19db      	adds	r3, r3, r7
 80058d8:	1c0a      	adds	r2, r1, #0
 80058da:	801a      	strh	r2, [r3, #0]
	s32 i;
	u8 xBuff[256];

	if(addr >= SIMULEATED_EEPROM_SIZE){	return -1;	}
 80058dc:	4b28      	ldr	r3, [pc, #160]	; (8005980 <simulatedEEPROM_read+0xc8>)
 80058de:	181b      	adds	r3, r3, r0
 80058e0:	19db      	adds	r3, r3, r7
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	2bff      	cmp	r3, #255	; 0xff
 80058e6:	d902      	bls.n	80058ee <simulatedEEPROM_read+0x36>
 80058e8:	2301      	movs	r3, #1
 80058ea:	425b      	negs	r3, r3
 80058ec:	e043      	b.n	8005976 <simulatedEEPROM_read+0xbe>
	// seek a avalid 256 section
	i = simulatedEEPROM_firstEmptyAddr256();
 80058ee:	f000 f8bf 	bl	8005a70 <simulatedEEPROM_firstEmptyAddr256>
 80058f2:	0003      	movs	r3, r0
 80058f4:	2286      	movs	r2, #134	; 0x86
 80058f6:	0052      	lsls	r2, r2, #1
 80058f8:	18b9      	adds	r1, r7, r2
 80058fa:	600b      	str	r3, [r1, #0]
	if(i < 0){	simulatedEEPROM_read256(7*256, xBuff);	}
 80058fc:	18bb      	adds	r3, r7, r2
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	da08      	bge.n	8005916 <simulatedEEPROM_read+0x5e>
 8005904:	230c      	movs	r3, #12
 8005906:	18fa      	adds	r2, r7, r3
 8005908:	23e0      	movs	r3, #224	; 0xe0
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	0011      	movs	r1, r2
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f8ee 	bl	8005af0 <simulatedEEPROM_read256>
 8005914:	e01a      	b.n	800594c <simulatedEEPROM_read+0x94>
	else if(i >= 256){	simulatedEEPROM_read256(i-256, xBuff);	}
 8005916:	2286      	movs	r2, #134	; 0x86
 8005918:	0052      	lsls	r2, r2, #1
 800591a:	18bb      	adds	r3, r7, r2
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2bff      	cmp	r3, #255	; 0xff
 8005920:	dd0c      	ble.n	800593c <simulatedEEPROM_read+0x84>
 8005922:	18bb      	adds	r3, r7, r2
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	3bff      	subs	r3, #255	; 0xff
 800592c:	b29b      	uxth	r3, r3
 800592e:	220c      	movs	r2, #12
 8005930:	18ba      	adds	r2, r7, r2
 8005932:	0011      	movs	r1, r2
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f8db 	bl	8005af0 <simulatedEEPROM_read256>
 800593a:	e007      	b.n	800594c <simulatedEEPROM_read+0x94>
	else{	memset(xBuff,0xff,256);	}
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	005a      	lsls	r2, r3, #1
 8005940:	230c      	movs	r3, #12
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	21ff      	movs	r1, #255	; 0xff
 8005946:	0018      	movs	r0, r3
 8005948:	f002 fae4 	bl	8007f14 <memset>
	memcpy(buff, &xBuff[addr], bytes);
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <simulatedEEPROM_read+0xc8>)
 800594e:	2088      	movs	r0, #136	; 0x88
 8005950:	0040      	lsls	r0, r0, #1
 8005952:	181b      	adds	r3, r3, r0
 8005954:	19db      	adds	r3, r3, r7
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	220c      	movs	r2, #12
 800595a:	18ba      	adds	r2, r7, r2
 800595c:	18d1      	adds	r1, r2, r3
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <simulatedEEPROM_read+0xcc>)
 8005960:	181b      	adds	r3, r3, r0
 8005962:	19db      	adds	r3, r3, r7
 8005964:	881a      	ldrh	r2, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	0018      	movs	r0, r3
 800596a:	f002 fab7 	bl	8007edc <memcpy>
	return i;
 800596e:	2386      	movs	r3, #134	; 0x86
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	681b      	ldr	r3, [r3, #0]
}
 8005976:	0018      	movs	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	b045      	add	sp, #276	; 0x114
 800597c:	bd90      	pop	{r4, r7, pc}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	fffffef6 	.word	0xfffffef6
 8005984:	fffffef4 	.word	0xfffffef4

08005988 <simulatedEEPROM_write>:

static int simulatedEEPROM_write(const u16 addr, const u8 *buff, const u16 bytes){
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b0c5      	sub	sp, #276	; 0x114
 800598c:	af00      	add	r7, sp, #0
 800598e:	6039      	str	r1, [r7, #0]
 8005990:	0011      	movs	r1, r2
 8005992:	4b34      	ldr	r3, [pc, #208]	; (8005a64 <simulatedEEPROM_write+0xdc>)
 8005994:	2488      	movs	r4, #136	; 0x88
 8005996:	0064      	lsls	r4, r4, #1
 8005998:	191b      	adds	r3, r3, r4
 800599a:	19db      	adds	r3, r3, r7
 800599c:	1c02      	adds	r2, r0, #0
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	4b31      	ldr	r3, [pc, #196]	; (8005a68 <simulatedEEPROM_write+0xe0>)
 80059a2:	191b      	adds	r3, r3, r4
 80059a4:	19db      	adds	r3, r3, r7
 80059a6:	1c0a      	adds	r2, r1, #0
 80059a8:	801a      	strh	r2, [r3, #0]
	int32_t i;
	u8 xBuff[256] = {0xff};
 80059aa:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <simulatedEEPROM_write+0xe4>)
 80059ac:	191b      	adds	r3, r3, r4
 80059ae:	19db      	adds	r3, r3, r7
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	3304      	adds	r3, #4
 80059b6:	22fc      	movs	r2, #252	; 0xfc
 80059b8:	2100      	movs	r1, #0
 80059ba:	0018      	movs	r0, r3
 80059bc:	f002 faaa 	bl	8007f14 <memset>

	if(addr >= SIMULEATED_EEPROM_SIZE){	return -1;	}
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <simulatedEEPROM_write+0xdc>)
 80059c2:	191b      	adds	r3, r3, r4
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	2bff      	cmp	r3, #255	; 0xff
 80059ca:	d902      	bls.n	80059d2 <simulatedEEPROM_write+0x4a>
 80059cc:	2301      	movs	r3, #1
 80059ce:	425b      	negs	r3, r3
 80059d0:	e044      	b.n	8005a5c <simulatedEEPROM_write+0xd4>

	// seek a avalid 256 section
	i = simulatedEEPROM_firstEmptyAddr256();
 80059d2:	f000 f84d 	bl	8005a70 <simulatedEEPROM_firstEmptyAddr256>
 80059d6:	0003      	movs	r3, r0
 80059d8:	2486      	movs	r4, #134	; 0x86
 80059da:	0064      	lsls	r4, r4, #1
 80059dc:	193a      	adds	r2, r7, r4
 80059de:	6013      	str	r3, [r2, #0]

	if (i < 0){
 80059e0:	193b      	adds	r3, r7, r4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da0b      	bge.n	8005a00 <simulatedEEPROM_write+0x78>
		simulatedEEPROM_read256(7*256, xBuff);
 80059e8:	230c      	movs	r3, #12
 80059ea:	18fa      	adds	r2, r7, r3
 80059ec:	23e0      	movs	r3, #224	; 0xe0
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	0011      	movs	r1, r2
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 f87c 	bl	8005af0 <simulatedEEPROM_read256>
		i = 0;	// roll, program at head
 80059f8:	2300      	movs	r3, #0
 80059fa:	193a      	adds	r2, r7, r4
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e011      	b.n	8005a24 <simulatedEEPROM_write+0x9c>
	}
	else if (i >= 256){
 8005a00:	2286      	movs	r2, #134	; 0x86
 8005a02:	0052      	lsls	r2, r2, #1
 8005a04:	18bb      	adds	r3, r7, r2
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2bff      	cmp	r3, #255	; 0xff
 8005a0a:	dd0b      	ble.n	8005a24 <simulatedEEPROM_write+0x9c>
		simulatedEEPROM_read256(i-256, xBuff);
 8005a0c:	18bb      	adds	r3, r7, r2
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	3bff      	subs	r3, #255	; 0xff
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	220c      	movs	r2, #12
 8005a1a:	18ba      	adds	r2, r7, r2
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f000 f866 	bl	8005af0 <simulatedEEPROM_read256>
	}

	memcpy(&xBuff[addr], buff, bytes);
 8005a24:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <simulatedEEPROM_write+0xdc>)
 8005a26:	2188      	movs	r1, #136	; 0x88
 8005a28:	0049      	lsls	r1, r1, #1
 8005a2a:	185b      	adds	r3, r3, r1
 8005a2c:	19db      	adds	r3, r3, r7
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	240c      	movs	r4, #12
 8005a32:	193a      	adds	r2, r7, r4
 8005a34:	18d0      	adds	r0, r2, r3
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <simulatedEEPROM_write+0xe0>)
 8005a38:	185b      	adds	r3, r3, r1
 8005a3a:	19db      	adds	r3, r3, r7
 8005a3c:	881a      	ldrh	r2, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	0019      	movs	r1, r3
 8005a42:	f002 fa4b 	bl	8007edc <memcpy>
	return(simulatedEEPROM_write256(i, xBuff));
 8005a46:	2386      	movs	r3, #134	; 0x86
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	193a      	adds	r2, r7, r4
 8005a52:	0011      	movs	r1, r2
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 f895 	bl	8005b84 <simulatedEEPROM_write256>
 8005a5a:	0003      	movs	r3, r0
}
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b045      	add	sp, #276	; 0x114
 8005a62:	bd90      	pop	{r4, r7, pc}
 8005a64:	fffffef6 	.word	0xfffffef6
 8005a68:	fffffef4 	.word	0xfffffef4
 8005a6c:	fffffefc 	.word	0xfffffefc

08005a70 <simulatedEEPROM_firstEmptyAddr256>:

static int simulatedEEPROM_firstEmptyAddr256() {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
	u32 tmp,i,j,k;
	u32 iFlshAddr = FLASH_USER_START_ADDR + 0;
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <simulatedEEPROM_firstEmptyAddr256+0x78>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	029a      	lsls	r2, r3, #10
 8005a7c:	23fe      	movs	r3, #254	; 0xfe
 8005a7e:	025b      	lsls	r3, r3, #9
 8005a80:	4013      	ands	r3, r2
 8005a82:	0adb      	lsrs	r3, r3, #11
 8005a84:	4a19      	ldr	r2, [pc, #100]	; (8005aec <simulatedEEPROM_firstEmptyAddr256+0x7c>)
 8005a86:	4694      	mov	ip, r2
 8005a88:	4463      	add	r3, ip
 8005a8a:	02db      	lsls	r3, r3, #11
 8005a8c:	60bb      	str	r3, [r7, #8]

	for(k=0;k<8;k++){
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e01f      	b.n	8005ad4 <simulatedEEPROM_firstEmptyAddr256+0x64>
		for(i=0,j=0;i<SIMULEATED_EEPROM_SIZE/4;i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	e00e      	b.n	8005abc <simulatedEEPROM_firstEmptyAddr256+0x4c>
		{
			tmp = *(__IO uint32_t *)iFlshAddr;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	607b      	str	r3, [r7, #4]
			iFlshAddr += 4;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	60bb      	str	r3, [r7, #8]
			if(tmp == 0xffffffff){	j++;	}
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3301      	adds	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <simulatedEEPROM_firstEmptyAddr256+0x46>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	613b      	str	r3, [r7, #16]
		for(i=0,j=0;i<SIMULEATED_EEPROM_SIZE/4;i++)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b3f      	cmp	r3, #63	; 0x3f
 8005ac0:	d9ed      	bls.n	8005a9e <simulatedEEPROM_firstEmptyAddr256+0x2e>
		}
		if(j == SIMULEATED_EEPROM_SIZE/4){
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d102      	bne.n	8005ace <simulatedEEPROM_firstEmptyAddr256+0x5e>
			return k*256;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	e007      	b.n	8005ade <simulatedEEPROM_firstEmptyAddr256+0x6e>
	for(k=0;k<8;k++){
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b07      	cmp	r3, #7
 8005ad8:	d9dc      	bls.n	8005a94 <simulatedEEPROM_firstEmptyAddr256+0x24>
		}
	}
	return -1;
 8005ada:	2301      	movs	r3, #1
 8005adc:	425b      	negs	r3, r3
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b006      	add	sp, #24
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	1fff75e0 	.word	0x1fff75e0
 8005aec:	0000ffff 	.word	0x0000ffff

08005af0 <simulatedEEPROM_read256>:

static int simulatedEEPROM_read256(const u16 addr, u8 *buff){
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	0002      	movs	r2, r0
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	1dbb      	adds	r3, r7, #6
 8005afc:	801a      	strh	r2, [r3, #0]
	u8 *p = buff;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	617b      	str	r3, [r7, #20]
	u32 tmp,i;
	u32 iFlshAddr = FLASH_USER_START_ADDR + addr;
 8005b02:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <simulatedEEPROM_read256+0x8c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	029a      	lsls	r2, r3, #10
 8005b08:	23fe      	movs	r3, #254	; 0xfe
 8005b0a:	025b      	lsls	r3, r3, #9
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	0adb      	lsrs	r3, r3, #11
 8005b10:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <simulatedEEPROM_read256+0x90>)
 8005b12:	4694      	mov	ip, r2
 8005b14:	4463      	add	r3, ip
 8005b16:	02da      	lsls	r2, r3, #11
 8005b18:	1dbb      	adds	r3, r7, #6
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	18d3      	adds	r3, r2, r3
 8005b1e:	60fb      	str	r3, [r7, #12]

	for(i=0;i<256/4;i++)	//SIMULEATED_EEPROM_SIZE
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	e021      	b.n	8005b6a <simulatedEEPROM_read256+0x7a>
	{
		tmp = *(__IO uint32_t *)iFlshAddr;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60bb      	str	r3, [r7, #8]
		iFlshAddr += 4;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	60fb      	str	r3, [r7, #12]
		p[0] = tmp;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	701a      	strb	r2, [r3, #0]
		p[1] = tmp>>8;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0a1a      	lsrs	r2, r3, #8
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	3301      	adds	r3, #1
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]
		p[2] = tmp>>16;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	0c1a      	lsrs	r2, r3, #16
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
		p[3] = tmp>>24;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	0e1a      	lsrs	r2, r3, #24
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	3303      	adds	r3, #3
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
		p += 4;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	3304      	adds	r3, #4
 8005b62:	617b      	str	r3, [r7, #20]
	for(i=0;i<256/4;i++)	//SIMULEATED_EEPROM_SIZE
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	3301      	adds	r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b3f      	cmp	r3, #63	; 0x3f
 8005b6e:	d9da      	bls.n	8005b26 <simulatedEEPROM_read256+0x36>
	}
	return 0;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b006      	add	sp, #24
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	1fff75e0 	.word	0x1fff75e0
 8005b80:	0000ffff 	.word	0x0000ffff

08005b84 <simulatedEEPROM_write256>:

static int simulatedEEPROM_write256(const u16 addr, const u8 *buff){
 8005b84:	b5b0      	push	{r4, r5, r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	0002      	movs	r2, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	1dbb      	adds	r3, r7, #6
 8005b90:	801a      	strh	r2, [r3, #0]
	FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8005b92:	230c      	movs	r3, #12
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	0018      	movs	r0, r3
 8005b98:	2310      	movs	r3, #16
 8005b9a:	001a      	movs	r2, r3
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f002 f9b9 	bl	8007f14 <memset>
	uint32_t PageError = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60bb      	str	r3, [r7, #8]
	u32 iFlshAddr = FLASH_USER_START_ADDR + addr;
 8005ba6:	4b2c      	ldr	r3, [pc, #176]	; (8005c58 <simulatedEEPROM_write256+0xd4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	029a      	lsls	r2, r3, #10
 8005bac:	23fe      	movs	r3, #254	; 0xfe
 8005bae:	025b      	lsls	r3, r3, #9
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	0adb      	lsrs	r3, r3, #11
 8005bb4:	4a29      	ldr	r2, [pc, #164]	; (8005c5c <simulatedEEPROM_write256+0xd8>)
 8005bb6:	4694      	mov	ip, r2
 8005bb8:	4463      	add	r3, ip
 8005bba:	02da      	lsls	r2, r3, #11
 8005bbc:	1dbb      	adds	r3, r7, #6
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	18d3      	adds	r3, r2, r3
 8005bc2:	61fb      	str	r3, [r7, #28]

	if(addr > (FLASH_PAGE_SIZE-256)){	return -1;	}
 8005bc4:	1dbb      	adds	r3, r7, #6
 8005bc6:	881a      	ldrh	r2, [r3, #0]
 8005bc8:	23e0      	movs	r3, #224	; 0xe0
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d902      	bls.n	8005bd6 <simulatedEEPROM_write256+0x52>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	425b      	negs	r3, r3
 8005bd4:	e03b      	b.n	8005c4e <simulatedEEPROM_write256+0xca>

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8005bd6:	f7fb fb53 	bl	8001280 <HAL_FLASH_Unlock>
	while (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, iFlshAddr, (u32)buff) != HAL_OK){
 8005bda:	e028      	b.n	8005c2e <simulatedEEPROM_write256+0xaa>
		iFlshAddr = FLASH_USER_START_ADDR;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <simulatedEEPROM_write256+0xd4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	029a      	lsls	r2, r3, #10
 8005be2:	23fe      	movs	r3, #254	; 0xfe
 8005be4:	025b      	lsls	r3, r3, #9
 8005be6:	4013      	ands	r3, r2
 8005be8:	0adb      	lsrs	r3, r3, #11
 8005bea:	4a1c      	ldr	r2, [pc, #112]	; (8005c5c <simulatedEEPROM_write256+0xd8>)
 8005bec:	4694      	mov	ip, r2
 8005bee:	4463      	add	r3, ip
 8005bf0:	02db      	lsls	r3, r3, #11
 8005bf2:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005bf4:	210c      	movs	r1, #12
 8005bf6:	187b      	adds	r3, r7, r1
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Page        = FLASH_PAGE_NB-1;
 8005bfc:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <simulatedEEPROM_write256+0xd4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	029a      	lsls	r2, r3, #10
 8005c02:	23fe      	movs	r3, #254	; 0xfe
 8005c04:	025b      	lsls	r3, r3, #9
 8005c06:	4013      	ands	r3, r2
 8005c08:	0adb      	lsrs	r3, r3, #11
 8005c0a:	1e5a      	subs	r2, r3, #1
 8005c0c:	187b      	adds	r3, r7, r1
 8005c0e:	609a      	str	r2, [r3, #8]
		EraseInitStruct.NbPages     = 1;
 8005c10:	187b      	adds	r3, r7, r1
 8005c12:	2201      	movs	r2, #1
 8005c14:	60da      	str	r2, [r3, #12]
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){		return -2;	}
 8005c16:	2308      	movs	r3, #8
 8005c18:	18fa      	adds	r2, r7, r3
 8005c1a:	187b      	adds	r3, r7, r1
 8005c1c:	0011      	movs	r1, r2
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7fb fbdc 	bl	80013dc <HAL_FLASHEx_Erase>
 8005c24:	1e03      	subs	r3, r0, #0
 8005c26:	d002      	beq.n	8005c2e <simulatedEEPROM_write256+0xaa>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	425b      	negs	r3, r3
 8005c2c:	e00f      	b.n	8005c4e <simulatedEEPROM_write256+0xca>
	while (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FAST, iFlshAddr, (u32)buff) != HAL_OK){
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	001c      	movs	r4, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	001d      	movs	r5, r3
 8005c36:	69f9      	ldr	r1, [r7, #28]
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	02d8      	lsls	r0, r3, #11
 8005c3c:	0022      	movs	r2, r4
 8005c3e:	002b      	movs	r3, r5
 8005c40:	f7fb fad0 	bl	80011e4 <HAL_FLASH_Program>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d1c9      	bne.n	8005bdc <simulatedEEPROM_write256+0x58>
	}
	HAL_FLASH_Lock();
 8005c48:	f7fb fb3e 	bl	80012c8 <HAL_FLASH_Lock>
	return 0;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b008      	add	sp, #32
 8005c54:	bdb0      	pop	{r4, r5, r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	1fff75e0 	.word	0x1fff75e0
 8005c5c:	0000ffff 	.word	0x0000ffff

08005c60 <InputDevSetup>:
 public function
**********************************************************/
void InputDevSetup(
	INPUT_DEV_T *pDev, 
	const PIN_T *gpio, u8 gpioLen
){
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	701a      	strb	r2, [r3, #0]
	INPUT_RSRC_T *pRsrc = &pDev->rsrc;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	617b      	str	r3, [r7, #20]
	memset(pRsrc, 0, sizeof(INPUT_RSRC_T));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2234      	movs	r2, #52	; 0x34
 8005c76:	2100      	movs	r1, #0
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f002 f94b 	bl	8007f14 <memset>
	pRsrc->PIN = gpio;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	601a      	str	r2, [r3, #0]
	pRsrc->gpioLen = gpioLen;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1dfa      	adds	r2, r7, #7
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	711a      	strb	r2, [r3, #4]
	pRsrc->status[0] = 0xffffffff;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	4252      	negs	r2, r2
 8005c92:	619a      	str	r2, [r3, #24]
	pRsrc->status[1] = 0xffffffff;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2201      	movs	r2, #1
 8005c98:	4252      	negs	r2, r2
 8005c9a:	61da      	str	r2, [r3, #28]
	strcpy(pRsrc->name, "input");
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	1d5a      	adds	r2, r3, #5
 8005ca0:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <InputDevSetup+0x64>)
 8005ca2:	0010      	movs	r0, r2
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	2306      	movs	r3, #6
 8005ca8:	001a      	movs	r2, r3
 8005caa:	f002 f917 	bl	8007edc <memcpy>
	
	pDev->Polling = inputPolling;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a05      	ldr	r2, [pc, #20]	; (8005cc8 <InputDevSetup+0x68>)
 8005cb2:	635a      	str	r2, [r3, #52]	; 0x34
	pDev->ReadPin = inputReadPin;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <InputDevSetup+0x6c>)
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b006      	add	sp, #24
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	08009560 	.word	0x08009560
 8005cc8:	08005cd1 	.word	0x08005cd1
 8005ccc:	08005e19 	.word	0x08005e19

08005cd0 <inputPolling>:
* Description    : per 4ms timer call back, do inputFetch
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
static void inputPolling(INPUT_RSRC_T* pRsrc, u8 tick){
 8005cd0:	b590      	push	{r4, r7, lr}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	000a      	movs	r2, r1
 8005cda:	1cfb      	adds	r3, r7, #3
 8005cdc:	701a      	strb	r2, [r3, #0]
	u8 i;
	pRsrc->tick += tick;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005ce2:	1cfb      	adds	r3, r7, #3
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	861a      	strh	r2, [r3, #48]	; 0x30
	if(pRsrc->tick < 20)	return;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005cf4:	2b13      	cmp	r3, #19
 8005cf6:	d800      	bhi.n	8005cfa <inputPolling+0x2a>
 8005cf8:	e08a      	b.n	8005e10 <inputPolling+0x140>
	pRsrc->tick = 0;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	861a      	strh	r2, [r3, #48]	; 0x30
	pRsrc->status[1] = pRsrc->status[0];
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	61da      	str	r2, [r3, #28]
	pRsrc->status[0] = 0x00;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	619a      	str	r2, [r3, #24]
//	pRsrc->status[0] = 0xffffffff;
	for(i=0;i<pRsrc->gpioLen;i++){
 8005d0e:	230f      	movs	r3, #15
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	e072      	b.n	8005dfe <inputPolling+0x12e>
		if(HAL_GPIO_ReadPin(pRsrc->PIN[i].GPIOx, pRsrc->PIN[i].GPIO_Pin) == GPIO_PIN_RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	240f      	movs	r4, #15
 8005d1e:	193b      	adds	r3, r7, r4
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	18d3      	adds	r3, r2, r3
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	193b      	adds	r3, r7, r4
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	18d3      	adds	r3, r2, r3
 8005d34:	889b      	ldrh	r3, [r3, #4]
 8005d36:	0019      	movs	r1, r3
 8005d38:	f7fb fd58 	bl	80017ec <HAL_GPIO_ReadPin>
 8005d3c:	1e03      	subs	r3, r0, #0
 8005d3e:	d109      	bne.n	8005d54 <inputPolling+0x84>
		//	pRsrc->status[0] &= (0xffffffff^BIT(i));
		pRsrc->status[0] |= BIT(i);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	193b      	adds	r3, r7, r4
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4099      	lsls	r1, r3
 8005d4c:	000b      	movs	r3, r1
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	619a      	str	r2, [r3, #24]
		if((pRsrc->status[1]&BIT(i))>0 && (pRsrc->status[0]&BIT(i))==0){
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	210f      	movs	r1, #15
 8005d5a:	187b      	adds	r3, r7, r1
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	40da      	lsrs	r2, r3
 8005d60:	0013      	movs	r3, r2
 8005d62:	2201      	movs	r2, #1
 8005d64:	4013      	ands	r3, r2
 8005d66:	d01c      	beq.n	8005da2 <inputPolling+0xd2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	187b      	adds	r3, r7, r1
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	40da      	lsrs	r2, r3
 8005d72:	0013      	movs	r3, r2
 8005d74:	2201      	movs	r2, #1
 8005d76:	4013      	ands	r3, r2
 8005d78:	d113      	bne.n	8005da2 <inputPolling+0xd2>
			if((pRsrc->enableFalling & BIT(i)) && pRsrc->fallingCallback!=NULL)	pRsrc->fallingCallback(i);	}
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1a      	ldr	r2, [r3, #32]
 8005d7e:	187b      	adds	r3, r7, r1
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	40da      	lsrs	r2, r3
 8005d84:	0013      	movs	r3, r2
 8005d86:	2201      	movs	r2, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d031      	beq.n	8005df0 <inputPolling+0x120>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02d      	beq.n	8005df0 <inputPolling+0x120>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	187a      	adds	r2, r7, r1
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	0010      	movs	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	e026      	b.n	8005df0 <inputPolling+0x120>
		else if((pRsrc->status[1]&BIT(i))==0 && (pRsrc->status[0]&BIT(i))>0){
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	210f      	movs	r1, #15
 8005da8:	187b      	adds	r3, r7, r1
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	40da      	lsrs	r2, r3
 8005dae:	0013      	movs	r3, r2
 8005db0:	2201      	movs	r2, #1
 8005db2:	4013      	ands	r3, r2
 8005db4:	d11d      	bne.n	8005df2 <inputPolling+0x122>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	187b      	adds	r3, r7, r1
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	40da      	lsrs	r2, r3
 8005dc0:	0013      	movs	r3, r2
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d014      	beq.n	8005df2 <inputPolling+0x122>
			if((pRsrc->enableRaising & BIT(i)) && pRsrc->raisingCallback!=NULL)	pRsrc->raisingCallback(i);	}
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dcc:	187b      	adds	r3, r7, r1
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	40da      	lsrs	r2, r3
 8005dd2:	0013      	movs	r3, r2
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <inputPolling+0x122>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <inputPolling+0x122>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	187a      	adds	r2, r7, r1
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	0010      	movs	r0, r2
 8005dec:	4798      	blx	r3
 8005dee:	e000      	b.n	8005df2 <inputPolling+0x122>
			if((pRsrc->enableFalling & BIT(i)) && pRsrc->fallingCallback!=NULL)	pRsrc->fallingCallback(i);	}
 8005df0:	46c0      	nop			; (mov r8, r8)
	for(i=0;i<pRsrc->gpioLen;i++){
 8005df2:	210f      	movs	r1, #15
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	3201      	adds	r2, #1
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	791b      	ldrb	r3, [r3, #4]
 8005e02:	220f      	movs	r2, #15
 8005e04:	18ba      	adds	r2, r7, r2
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d200      	bcs.n	8005e0e <inputPolling+0x13e>
 8005e0c:	e784      	b.n	8005d18 <inputPolling+0x48>
 8005e0e:	e000      	b.n	8005e12 <inputPolling+0x142>
	if(pRsrc->tick < 20)	return;
 8005e10:	46c0      	nop			; (mov r8, r8)
	}
}
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b005      	add	sp, #20
 8005e16:	bd90      	pop	{r4, r7, pc}

08005e18 <inputReadPin>:
* Description    : all sample 
* Input          : None
* Output         : 0: low(turn on), 1:high	2:shaking
* Return         : None
*******************************************************************************/
static s8 inputReadPin(INPUT_RSRC_T* pRsrc, u8 pin){
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	000a      	movs	r2, r1
 8005e22:	1cfb      	adds	r3, r7, #3
 8005e24:	701a      	strb	r2, [r3, #0]
	if(pin>=pRsrc->gpioLen)	return -1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	791b      	ldrb	r3, [r3, #4]
 8005e2a:	1cfa      	adds	r2, r7, #3
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <inputReadPin+0x20>
 8005e32:	2301      	movs	r3, #1
 8005e34:	425b      	negs	r3, r3
 8005e36:	e00b      	b.n	8005e50 <inputReadPin+0x38>
	if(pRsrc->status[0] & BIT(pin))	return 1;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	1cfb      	adds	r3, r7, #3
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	40da      	lsrs	r2, r3
 8005e42:	0013      	movs	r3, r2
 8005e44:	2201      	movs	r2, #1
 8005e46:	4013      	ands	r3, r2
 8005e48:	d001      	beq.n	8005e4e <inputReadPin+0x36>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <inputReadPin+0x38>
	else return 0;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	0018      	movs	r0, r3
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b002      	add	sp, #8
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <inputCmd>:
* Input          : 
									: 
* Output         : None
* Return         : None 
*******************************************************************************/
u8 inputCmd(void *p, char* CMD, u8 brdAddr, void (*xprint)(const char* FORMAT_ORG, ...)){
 8005e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e5a:	b08f      	sub	sp, #60	; 0x3c
 8005e5c:	af04      	add	r7, sp, #16
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	1dfb      	adds	r3, r7, #7
 8005e66:	701a      	strb	r2, [r3, #0]
	s32 i,j,ii;
	const char* line;
	INPUT_DEV_T* dev = p;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
	INPUT_RSRC_T *pRsrc = &dev->rsrc;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	623b      	str	r3, [r7, #32]

	if(strncmp(CMD, pRsrc->name, strlen(pRsrc->name)) != 0)	return 0;
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	1d5c      	adds	r4, r3, #5
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	3305      	adds	r3, #5
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f7fa f941 	bl	8000100 <strlen>
 8005e7e:	0002      	movs	r2, r0
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	0021      	movs	r1, r4
 8005e84:	0018      	movs	r0, r3
 8005e86:	f002 f877 	bl	8007f78 <strncmp>
 8005e8a:	1e03      	subs	r3, r0, #0
 8005e8c:	d001      	beq.n	8005e92 <inputCmd+0x3a>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e1f6      	b.n	8006280 <inputCmd+0x428>
	line = &CMD[strlen(pRsrc->name)];
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	3305      	adds	r3, #5
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7fa f932 	bl	8000100 <strlen>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	61fb      	str	r3, [r7, #28]

	//.help()
	if(strncmp(line, ".help", strlen(".help")) == 0){
 8005ea4:	49db      	ldr	r1, [pc, #876]	; (8006214 <inputCmd+0x3bc>)
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2205      	movs	r2, #5
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f002 f864 	bl	8007f78 <strncmp>
 8005eb0:	1e03      	subs	r3, r0, #0
 8005eb2:	d109      	bne.n	8005ec8 <inputCmd+0x70>
		xprint("+ok@%d.%s.help()\r\n%s", brdAddr, pRsrc->name, INPUT_HELP);
 8005eb4:	1dfb      	adds	r3, r7, #7
 8005eb6:	7819      	ldrb	r1, [r3, #0]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	1d5a      	adds	r2, r3, #5
 8005ebc:	4bd6      	ldr	r3, [pc, #856]	; (8006218 <inputCmd+0x3c0>)
 8005ebe:	48d7      	ldr	r0, [pc, #860]	; (800621c <inputCmd+0x3c4>)
 8005ec0:	683c      	ldr	r4, [r7, #0]
 8005ec2:	47a0      	blx	r4
		return 1;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e1db      	b.n	8006280 <inputCmd+0x428>
	}

	//.readPin(indx0,indx1)
	else if(sscanf(line, ".readpin %d %d", &i, &j)==2){
 8005ec8:	2310      	movs	r3, #16
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	2214      	movs	r2, #20
 8005ece:	18ba      	adds	r2, r7, r2
 8005ed0:	49d3      	ldr	r1, [pc, #844]	; (8006220 <inputCmd+0x3c8>)
 8005ed2:	69f8      	ldr	r0, [r7, #28]
 8005ed4:	f002 f826 	bl	8007f24 <siscanf>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d13a      	bne.n	8005f54 <inputCmd+0xfc>
		if(i>=dev->rsrc.gpioLen || j>=dev->rsrc.gpioLen){
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	791b      	ldrb	r3, [r3, #4]
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	dd05      	ble.n	8005ef6 <inputCmd+0x9e>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	791b      	ldrb	r3, [r3, #4]
 8005eee:	001a      	movs	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	dc0b      	bgt.n	8005f0e <inputCmd+0xb6>
			xprint("+err@%d.%s.readpin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 8005ef6:	1dfb      	adds	r3, r7, #7
 8005ef8:	7819      	ldrb	r1, [r3, #0]
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	1d5a      	adds	r2, r3, #5
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	791b      	ldrb	r3, [r3, #4]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	48c7      	ldr	r0, [pc, #796]	; (8006224 <inputCmd+0x3cc>)
 8005f06:	683c      	ldr	r4, [r7, #0]
 8005f08:	47a0      	blx	r4
			return 1;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e1b8      	b.n	8006280 <inputCmd+0x428>
		}
		ii = pRsrc->status[0];
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	61bb      	str	r3, [r7, #24]
		xprint("+ok@%d.%s.readpin(%d,%d,%d,%d)\r\n", brdAddr, pRsrc->name, i, ((ii&BIT(i))?1:0), j, ((ii&BIT(j))?1:0));
 8005f14:	1dfb      	adds	r3, r7, #7
 8005f16:	781d      	ldrb	r5, [r3, #0]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	1d5e      	adds	r6, r3, #5
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	469c      	mov	ip, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	40da      	lsrs	r2, r3
 8005f26:	0013      	movs	r3, r2
 8005f28:	001a      	movs	r2, r3
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	69b8      	ldr	r0, [r7, #24]
 8005f32:	6939      	ldr	r1, [r7, #16]
 8005f34:	40c8      	lsrs	r0, r1
 8005f36:	0001      	movs	r1, r0
 8005f38:	0008      	movs	r0, r1
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4001      	ands	r1, r0
 8005f3e:	48ba      	ldr	r0, [pc, #744]	; (8006228 <inputCmd+0x3d0>)
 8005f40:	9102      	str	r1, [sp, #8]
 8005f42:	9201      	str	r2, [sp, #4]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	683c      	ldr	r4, [r7, #0]
 8005f48:	4663      	mov	r3, ip
 8005f4a:	0032      	movs	r2, r6
 8005f4c:	0029      	movs	r1, r5
 8005f4e:	47a0      	blx	r4
		return 1;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e195      	b.n	8006280 <inputCmd+0x428>
	}
	//.readPin(indx)
	else if(sscanf(line, ".readpin %d", &i)==1){
 8005f54:	2314      	movs	r3, #20
 8005f56:	18fa      	adds	r2, r7, r3
 8005f58:	49b4      	ldr	r1, [pc, #720]	; (800622c <inputCmd+0x3d4>)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f001 ffe1 	bl	8007f24 <siscanf>
 8005f62:	0003      	movs	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d128      	bne.n	8005fba <inputCmd+0x162>
		if(i>=dev->rsrc.gpioLen){
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	791b      	ldrb	r3, [r3, #4]
 8005f6c:	001a      	movs	r2, r3
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	dc0b      	bgt.n	8005f8c <inputCmd+0x134>
			xprint("+err@%d.%s.readpin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 8005f74:	1dfb      	adds	r3, r7, #7
 8005f76:	7819      	ldrb	r1, [r3, #0]
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	1d5a      	adds	r2, r3, #5
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	791b      	ldrb	r3, [r3, #4]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	48a8      	ldr	r0, [pc, #672]	; (8006224 <inputCmd+0x3cc>)
 8005f84:	683c      	ldr	r4, [r7, #0]
 8005f86:	47a0      	blx	r4
			return 1;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e179      	b.n	8006280 <inputCmd+0x428>
		}
		ii = pRsrc->status[0];
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	61bb      	str	r3, [r7, #24]
		xprint("+ok@%d.%s.readpin(%d,%d)\r\n", brdAddr, pRsrc->name, i, ((ii&BIT(i))?1:0));
 8005f92:	1dfb      	adds	r3, r7, #7
 8005f94:	7819      	ldrb	r1, [r3, #0]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	1d5d      	adds	r5, r3, #5
 8005f9a:	697e      	ldr	r6, [r7, #20]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	40da      	lsrs	r2, r3
 8005fa2:	0013      	movs	r3, r2
 8005fa4:	001a      	movs	r2, r3
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4013      	ands	r3, r2
 8005faa:	48a1      	ldr	r0, [pc, #644]	; (8006230 <inputCmd+0x3d8>)
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	683c      	ldr	r4, [r7, #0]
 8005fb0:	0033      	movs	r3, r6
 8005fb2:	002a      	movs	r2, r5
 8005fb4:	47a0      	blx	r4
		return 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e162      	b.n	8006280 <inputCmd+0x428>
	}
	//.readPin()
	else if(strncmp(line, ".readpin", strlen("readpin")) == 0){
 8005fba:	499e      	ldr	r1, [pc, #632]	; (8006234 <inputCmd+0x3dc>)
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2207      	movs	r2, #7
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f001 ffd9 	bl	8007f78 <strncmp>
 8005fc6:	1e03      	subs	r3, r0, #0
 8005fc8:	d10a      	bne.n	8005fe0 <inputCmd+0x188>
		xprint("+ok@%d.%s.readpin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status[0]);
 8005fca:	1dfb      	adds	r3, r7, #7
 8005fcc:	7819      	ldrb	r1, [r3, #0]
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	1d5a      	adds	r2, r3, #5
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	4898      	ldr	r0, [pc, #608]	; (8006238 <inputCmd+0x3e0>)
 8005fd8:	683c      	ldr	r4, [r7, #0]
 8005fda:	47a0      	blx	r4
		return 1;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e14f      	b.n	8006280 <inputCmd+0x428>
	}

	//.enableFalling(indx)"
	else if(sscanf(line, ".enablefalling %d", &i)==1){
 8005fe0:	2314      	movs	r3, #20
 8005fe2:	18fa      	adds	r2, r7, r3
 8005fe4:	4995      	ldr	r1, [pc, #596]	; (800623c <inputCmd+0x3e4>)
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f001 ff9b 	bl	8007f24 <siscanf>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d125      	bne.n	8006040 <inputCmd+0x1e8>
		if(i>=dev->rsrc.gpioLen){
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	791b      	ldrb	r3, [r3, #4]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	dc0b      	bgt.n	8006018 <inputCmd+0x1c0>
			xprint("+err@%d.%s.enablefalling(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 8006000:	1dfb      	adds	r3, r7, #7
 8006002:	7819      	ldrb	r1, [r3, #0]
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	1d5a      	adds	r2, r3, #5
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	791b      	ldrb	r3, [r3, #4]
 800600c:	3b01      	subs	r3, #1
 800600e:	488c      	ldr	r0, [pc, #560]	; (8006240 <inputCmd+0x3e8>)
 8006010:	683c      	ldr	r4, [r7, #0]
 8006012:	47a0      	blx	r4
			return 1;
 8006014:	2301      	movs	r3, #1
 8006016:	e133      	b.n	8006280 <inputCmd+0x428>
		}
		pRsrc->enableFalling |= BIT(i);
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2101      	movs	r1, #1
 8006020:	4099      	lsls	r1, r3
 8006022:	000b      	movs	r3, r1
 8006024:	431a      	orrs	r2, r3
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	621a      	str	r2, [r3, #32]
		xprint("+ok@%d.%s.enablefalling(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableFalling);
 800602a:	1dfb      	adds	r3, r7, #7
 800602c:	7819      	ldrb	r1, [r3, #0]
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	1d5a      	adds	r2, r3, #5
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	4883      	ldr	r0, [pc, #524]	; (8006244 <inputCmd+0x3ec>)
 8006038:	683c      	ldr	r4, [r7, #0]
 800603a:	47a0      	blx	r4
		return 1;
 800603c:	2301      	movs	r3, #1
 800603e:	e11f      	b.n	8006280 <inputCmd+0x428>
	}
	//.enableFalling()"
	else if(strncmp(line, ".enablefalling", strlen(".enablefalling")) == 0){
 8006040:	4981      	ldr	r1, [pc, #516]	; (8006248 <inputCmd+0x3f0>)
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	220e      	movs	r2, #14
 8006046:	0018      	movs	r0, r3
 8006048:	f001 ff96 	bl	8007f78 <strncmp>
 800604c:	1e03      	subs	r3, r0, #0
 800604e:	d10e      	bne.n	800606e <inputCmd+0x216>
		pRsrc->enableFalling = 0xffffffff;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	2201      	movs	r2, #1
 8006054:	4252      	negs	r2, r2
 8006056:	621a      	str	r2, [r3, #32]
		xprint("+ok@%d.%s.enablefalling(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableFalling);
 8006058:	1dfb      	adds	r3, r7, #7
 800605a:	7819      	ldrb	r1, [r3, #0]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	1d5a      	adds	r2, r3, #5
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	4877      	ldr	r0, [pc, #476]	; (8006244 <inputCmd+0x3ec>)
 8006066:	683c      	ldr	r4, [r7, #0]
 8006068:	47a0      	blx	r4
		return 1;
 800606a:	2301      	movs	r3, #1
 800606c:	e108      	b.n	8006280 <inputCmd+0x428>
	}
	//.disableFalling(indx)
	else if(sscanf(line, ".disablefalling %d", &i)==1){
 800606e:	2314      	movs	r3, #20
 8006070:	18fa      	adds	r2, r7, r3
 8006072:	4976      	ldr	r1, [pc, #472]	; (800624c <inputCmd+0x3f4>)
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	0018      	movs	r0, r3
 8006078:	f001 ff54 	bl	8007f24 <siscanf>
 800607c:	0003      	movs	r3, r0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d125      	bne.n	80060ce <inputCmd+0x276>
		if(i>=dev->rsrc.gpioLen){
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	791b      	ldrb	r3, [r3, #4]
 8006086:	001a      	movs	r2, r3
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	429a      	cmp	r2, r3
 800608c:	dc0a      	bgt.n	80060a4 <inputCmd+0x24c>
			xprint("+err@%d.%s.disablefalling(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen);
 800608e:	1dfb      	adds	r3, r7, #7
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	1d5a      	adds	r2, r3, #5
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	791b      	ldrb	r3, [r3, #4]
 800609a:	486d      	ldr	r0, [pc, #436]	; (8006250 <inputCmd+0x3f8>)
 800609c:	683c      	ldr	r4, [r7, #0]
 800609e:	47a0      	blx	r4
			return 1;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0ed      	b.n	8006280 <inputCmd+0x428>
		}
		pRsrc->enableFalling &= (0xffffffff ^ BIT(i));
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	2101      	movs	r1, #1
 80060ac:	4091      	lsls	r1, r2
 80060ae:	000a      	movs	r2, r1
 80060b0:	43d2      	mvns	r2, r2
 80060b2:	401a      	ands	r2, r3
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	621a      	str	r2, [r3, #32]
		xprint("+ok@%d.%s.disablefalling(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableFalling);
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	7819      	ldrb	r1, [r3, #0]
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	1d5a      	adds	r2, r3, #5
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	4863      	ldr	r0, [pc, #396]	; (8006254 <inputCmd+0x3fc>)
 80060c6:	683c      	ldr	r4, [r7, #0]
 80060c8:	47a0      	blx	r4
		return 1;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0d8      	b.n	8006280 <inputCmd+0x428>
	}
	//.disableFalling()
	else if(strncmp(line, ".disablefalling", strlen(".disablefalling")) == 0){
 80060ce:	4962      	ldr	r1, [pc, #392]	; (8006258 <inputCmd+0x400>)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	220f      	movs	r2, #15
 80060d4:	0018      	movs	r0, r3
 80060d6:	f001 ff4f 	bl	8007f78 <strncmp>
 80060da:	1e03      	subs	r3, r0, #0
 80060dc:	d10d      	bne.n	80060fa <inputCmd+0x2a2>
		pRsrc->enableFalling = 0;
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2200      	movs	r2, #0
 80060e2:	621a      	str	r2, [r3, #32]
		xprint("+ok@%d.%s.disablefalling(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableFalling);
 80060e4:	1dfb      	adds	r3, r7, #7
 80060e6:	7819      	ldrb	r1, [r3, #0]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	1d5a      	adds	r2, r3, #5
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	4858      	ldr	r0, [pc, #352]	; (8006254 <inputCmd+0x3fc>)
 80060f2:	683c      	ldr	r4, [r7, #0]
 80060f4:	47a0      	blx	r4
		return 1;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e0c2      	b.n	8006280 <inputCmd+0x428>
	}	
	//.enableRaising(indx)
	else if(sscanf(line, ".enableraising %d", &i)==1){
 80060fa:	2314      	movs	r3, #20
 80060fc:	18fa      	adds	r2, r7, r3
 80060fe:	4957      	ldr	r1, [pc, #348]	; (800625c <inputCmd+0x404>)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	0018      	movs	r0, r3
 8006104:	f001 ff0e 	bl	8007f24 <siscanf>
 8006108:	0003      	movs	r3, r0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d124      	bne.n	8006158 <inputCmd+0x300>
		if(i>=dev->rsrc.gpioLen){
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	791b      	ldrb	r3, [r3, #4]
 8006112:	001a      	movs	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	429a      	cmp	r2, r3
 8006118:	dc0a      	bgt.n	8006130 <inputCmd+0x2d8>
			xprint("+err@%d.%s.enableraising(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen);
 800611a:	1dfb      	adds	r3, r7, #7
 800611c:	7819      	ldrb	r1, [r3, #0]
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	1d5a      	adds	r2, r3, #5
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	791b      	ldrb	r3, [r3, #4]
 8006126:	484e      	ldr	r0, [pc, #312]	; (8006260 <inputCmd+0x408>)
 8006128:	683c      	ldr	r4, [r7, #0]
 800612a:	47a0      	blx	r4
			return 1;
 800612c:	2301      	movs	r3, #1
 800612e:	e0a7      	b.n	8006280 <inputCmd+0x428>
		}
		pRsrc->enableRaising |= BIT(i);
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2101      	movs	r1, #1
 8006138:	4099      	lsls	r1, r3
 800613a:	000b      	movs	r3, r1
 800613c:	431a      	orrs	r2, r3
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	625a      	str	r2, [r3, #36]	; 0x24
		xprint("+ok@%d.%s.enableraising(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableRaising);
 8006142:	1dfb      	adds	r3, r7, #7
 8006144:	7819      	ldrb	r1, [r3, #0]
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	1d5a      	adds	r2, r3, #5
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	4845      	ldr	r0, [pc, #276]	; (8006264 <inputCmd+0x40c>)
 8006150:	683c      	ldr	r4, [r7, #0]
 8006152:	47a0      	blx	r4
		return 1;
 8006154:	2301      	movs	r3, #1
 8006156:	e093      	b.n	8006280 <inputCmd+0x428>
	}
	//.enableRaising()
	else if(strncmp(line, ".enableraising", strlen(".enableraising")) == 0){
 8006158:	4943      	ldr	r1, [pc, #268]	; (8006268 <inputCmd+0x410>)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	220e      	movs	r2, #14
 800615e:	0018      	movs	r0, r3
 8006160:	f001 ff0a 	bl	8007f78 <strncmp>
 8006164:	1e03      	subs	r3, r0, #0
 8006166:	d10e      	bne.n	8006186 <inputCmd+0x32e>
		pRsrc->enableRaising = 0xffffffff;
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2201      	movs	r2, #1
 800616c:	4252      	negs	r2, r2
 800616e:	625a      	str	r2, [r3, #36]	; 0x24
		xprint("+ok@%d.%s.enableraising(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableRaising);
 8006170:	1dfb      	adds	r3, r7, #7
 8006172:	7819      	ldrb	r1, [r3, #0]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	1d5a      	adds	r2, r3, #5
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	4839      	ldr	r0, [pc, #228]	; (8006264 <inputCmd+0x40c>)
 800617e:	683c      	ldr	r4, [r7, #0]
 8006180:	47a0      	blx	r4
		return 1;
 8006182:	2301      	movs	r3, #1
 8006184:	e07c      	b.n	8006280 <inputCmd+0x428>
	}	
	//.disableRaising(indx)
	else if(sscanf(line, ".disablefalling %d", &i)==1){
 8006186:	2314      	movs	r3, #20
 8006188:	18fa      	adds	r2, r7, r3
 800618a:	4930      	ldr	r1, [pc, #192]	; (800624c <inputCmd+0x3f4>)
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	0018      	movs	r0, r3
 8006190:	f001 fec8 	bl	8007f24 <siscanf>
 8006194:	0003      	movs	r3, r0
 8006196:	2b01      	cmp	r3, #1
 8006198:	d125      	bne.n	80061e6 <inputCmd+0x38e>
		if(i>=dev->rsrc.gpioLen){
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	001a      	movs	r2, r3
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	dc0a      	bgt.n	80061bc <inputCmd+0x364>
			xprint("+err@%d.%s.disablefalling(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen);
 80061a6:	1dfb      	adds	r3, r7, #7
 80061a8:	7819      	ldrb	r1, [r3, #0]
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	1d5a      	adds	r2, r3, #5
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	4827      	ldr	r0, [pc, #156]	; (8006250 <inputCmd+0x3f8>)
 80061b4:	683c      	ldr	r4, [r7, #0]
 80061b6:	47a0      	blx	r4
			return 1;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e061      	b.n	8006280 <inputCmd+0x428>
		}
		pRsrc->enableRaising &= (0xffffffff ^ BIT(i));
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	2101      	movs	r1, #1
 80061c4:	4091      	lsls	r1, r2
 80061c6:	000a      	movs	r2, r1
 80061c8:	43d2      	mvns	r2, r2
 80061ca:	401a      	ands	r2, r3
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24
		xprint("+ok@%d.%s.disableraising(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableRaising);
 80061d0:	1dfb      	adds	r3, r7, #7
 80061d2:	7819      	ldrb	r1, [r3, #0]
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	1d5a      	adds	r2, r3, #5
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	4823      	ldr	r0, [pc, #140]	; (800626c <inputCmd+0x414>)
 80061de:	683c      	ldr	r4, [r7, #0]
 80061e0:	47a0      	blx	r4
		return 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e04c      	b.n	8006280 <inputCmd+0x428>
	}
	//.disableRaising()
	else if(strncmp(line, ".disableraising", strlen(".disableraising")) == 0){
 80061e6:	4922      	ldr	r1, [pc, #136]	; (8006270 <inputCmd+0x418>)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	220f      	movs	r2, #15
 80061ec:	0018      	movs	r0, r3
 80061ee:	f001 fec3 	bl	8007f78 <strncmp>
 80061f2:	1e03      	subs	r3, r0, #0
 80061f4:	d13e      	bne.n	8006274 <inputCmd+0x41c>
		pRsrc->enableRaising = 0;
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2200      	movs	r2, #0
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24
		xprint("+ok@%d.%s.disableraising(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->enableRaising);
 80061fc:	1dfb      	adds	r3, r7, #7
 80061fe:	7819      	ldrb	r1, [r3, #0]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	1d5a      	adds	r2, r3, #5
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	4818      	ldr	r0, [pc, #96]	; (800626c <inputCmd+0x414>)
 800620a:	683c      	ldr	r4, [r7, #0]
 800620c:	47a0      	blx	r4
		return 1;
 800620e:	2301      	movs	r3, #1
 8006210:	e036      	b.n	8006280 <inputCmd+0x428>
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	08009568 	.word	0x08009568
 8006218:	08009c48 	.word	0x08009c48
 800621c:	08009570 	.word	0x08009570
 8006220:	08009588 	.word	0x08009588
 8006224:	08009598 	.word	0x08009598
 8006228:	080095b8 	.word	0x080095b8
 800622c:	080095dc 	.word	0x080095dc
 8006230:	080095e8 	.word	0x080095e8
 8006234:	08009604 	.word	0x08009604
 8006238:	08009610 	.word	0x08009610
 800623c:	0800962c 	.word	0x0800962c
 8006240:	08009640 	.word	0x08009640
 8006244:	08009664 	.word	0x08009664
 8006248:	08009688 	.word	0x08009688
 800624c:	08009698 	.word	0x08009698
 8006250:	080096ac 	.word	0x080096ac
 8006254:	080096d4 	.word	0x080096d4
 8006258:	080096f8 	.word	0x080096f8
 800625c:	08009708 	.word	0x08009708
 8006260:	0800971c 	.word	0x0800971c
 8006264:	08009740 	.word	0x08009740
 8006268:	08009764 	.word	0x08009764
 800626c:	08009774 	.word	0x08009774
 8006270:	08009798 	.word	0x08009798
	}	
	else{
		xprint("+unknown@%s", CMD);
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	4a04      	ldr	r2, [pc, #16]	; (8006288 <inputCmd+0x430>)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	0010      	movs	r0, r2
 800627c:	4798      	blx	r3
		return 1;
 800627e:	2301      	movs	r3, #1
	}
	return 0;
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b00b      	add	sp, #44	; 0x2c
 8006286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006288:	080097a8 	.word	0x080097a8

0800628c <outputDevSetup>:
DEV_STATUS outputDevSetup(
	OUTPUT_DEV_T *pDev, 
	const PIN_T* gpio,
	u8 gpioLen,
	u16 initStatus
){
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	0019      	movs	r1, r3
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	1d3b      	adds	r3, r7, #4
 800629e:	1c0a      	adds	r2, r1, #0
 80062a0:	801a      	strh	r2, [r3, #0]
	OUTPUT_RSRC_T* pRsrc = &pDev->rsrc;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	617b      	str	r3, [r7, #20]
	memset(pRsrc,0,sizeof(OUTPUT_DEV_T));
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2224      	movs	r2, #36	; 0x24
 80062aa:	2100      	movs	r1, #0
 80062ac:	0018      	movs	r0, r3
 80062ae:	f001 fe31 	bl	8007f14 <memset>
	pRsrc->gpio = gpio;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	611a      	str	r2, [r3, #16]
	pRsrc->gpioLen = gpioLen;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1dfa      	adds	r2, r7, #7
 80062bc:	7812      	ldrb	r2, [r2, #0]
 80062be:	751a      	strb	r2, [r3, #20]
	outputWritePinHEX(pRsrc, initStatus);
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	881a      	ldrh	r2, [r3, #0]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	0011      	movs	r1, r2
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 f823 	bl	8006314 <outputWritePinHEX>
	pRsrc->status = initStatus;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	1d3a      	adds	r2, r7, #4
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	82da      	strh	r2, [r3, #22]
	strcpy(pRsrc->name, "output");
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <outputDevSetup+0x78>)
 80062da:	0010      	movs	r0, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	2307      	movs	r3, #7
 80062e0:	001a      	movs	r2, r3
 80062e2:	f001 fdfb 	bl	8007edc <memcpy>
	
	pDev->WritePinHEX = outputWritePinHEX;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4a07      	ldr	r2, [pc, #28]	; (8006308 <outputDevSetup+0x7c>)
 80062ea:	619a      	str	r2, [r3, #24]
	pDev->WritePin = outputWritePin;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a07      	ldr	r2, [pc, #28]	; (800630c <outputDevSetup+0x80>)
 80062f0:	61da      	str	r2, [r3, #28]
	pDev->TogglePin = outputTogglePin;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a06      	ldr	r2, [pc, #24]	; (8006310 <outputDevSetup+0x84>)
 80062f6:	621a      	str	r2, [r3, #32]

	return DEV_SUCCESS;
 80062f8:	2301      	movs	r3, #1
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b006      	add	sp, #24
 8006300:	bd80      	pop	{r7, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	080097b4 	.word	0x080097b4
 8006308:	08006315 	.word	0x08006315
 800630c:	080063b7 	.word	0x080063b7
 8006310:	0800646b 	.word	0x0800646b

08006314 <outputWritePinHEX>:
* Description    : per 4ms timer call back, do inputFetch
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
static void outputWritePinHEX(OUTPUT_RSRC_T* pRsrc, u16 hex){
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	000a      	movs	r2, r1
 800631e:	1cbb      	adds	r3, r7, #2
 8006320:	801a      	strh	r2, [r3, #0]
	u8 i;
	for(i=0;i<pRsrc->gpioLen;i++){
 8006322:	230f      	movs	r3, #15
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	e035      	b.n	8006398 <outputWritePinHEX+0x84>
		if(hex & BIT(i))	HAL_GPIO_WritePin(pRsrc->gpio[i].GPIOx, pRsrc->gpio[i].GPIO_Pin, GPIO_PIN_SET);
 800632c:	1cbb      	adds	r3, r7, #2
 800632e:	881a      	ldrh	r2, [r3, #0]
 8006330:	210f      	movs	r1, #15
 8006332:	187b      	adds	r3, r7, r1
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	40da      	lsrs	r2, r3
 8006338:	0013      	movs	r3, r2
 800633a:	2201      	movs	r2, #1
 800633c:	4013      	ands	r3, r2
 800633e:	d012      	beq.n	8006366 <outputWritePinHEX+0x52>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	187b      	adds	r3, r7, r1
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	18d3      	adds	r3, r2, r3
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	187b      	adds	r3, r7, r1
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	18d3      	adds	r3, r2, r3
 800635a:	889b      	ldrh	r3, [r3, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	0019      	movs	r1, r3
 8006360:	f7fb fa61 	bl	8001826 <HAL_GPIO_WritePin>
 8006364:	e012      	b.n	800638c <outputWritePinHEX+0x78>
		else	HAL_GPIO_WritePin(pRsrc->gpio[i].GPIOx, pRsrc->gpio[i].GPIO_Pin, GPIO_PIN_RESET);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	210f      	movs	r1, #15
 800636c:	187b      	adds	r3, r7, r1
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	18d3      	adds	r3, r2, r3
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	187b      	adds	r3, r7, r1
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	18d3      	adds	r3, r2, r3
 8006382:	889b      	ldrh	r3, [r3, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	0019      	movs	r1, r3
 8006388:	f7fb fa4d 	bl	8001826 <HAL_GPIO_WritePin>
	for(i=0;i<pRsrc->gpioLen;i++){
 800638c:	210f      	movs	r1, #15
 800638e:	187b      	adds	r3, r7, r1
 8006390:	781a      	ldrb	r2, [r3, #0]
 8006392:	187b      	adds	r3, r7, r1
 8006394:	3201      	adds	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7d1b      	ldrb	r3, [r3, #20]
 800639c:	220f      	movs	r2, #15
 800639e:	18ba      	adds	r2, r7, r2
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d3c2      	bcc.n	800632c <outputWritePinHEX+0x18>
	}
	pRsrc->status = hex;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	1cba      	adds	r2, r7, #2
 80063aa:	8812      	ldrh	r2, [r2, #0]
 80063ac:	82da      	strh	r2, [r3, #22]
}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <outputWritePin>:
* Description    : per 4ms timer call back, do inputFetch
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
static void outputWritePin(OUTPUT_RSRC_T* pRsrc, u8 pin, OUTPUT_STATUS level){
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	0008      	movs	r0, r1
 80063c0:	0011      	movs	r1, r2
 80063c2:	1cfb      	adds	r3, r7, #3
 80063c4:	1c02      	adds	r2, r0, #0
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	1cbb      	adds	r3, r7, #2
 80063ca:	1c0a      	adds	r2, r1, #0
 80063cc:	701a      	strb	r2, [r3, #0]
	if(pin >= pRsrc->gpioLen)	return;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	7d1b      	ldrb	r3, [r3, #20]
 80063d2:	1cfa      	adds	r2, r7, #3
 80063d4:	7812      	ldrb	r2, [r2, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d243      	bcs.n	8006462 <outputWritePin+0xac>
	if(level){
 80063da:	1cbb      	adds	r3, r7, #2
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01e      	beq.n	8006420 <outputWritePin+0x6a>
		HAL_GPIO_WritePin(pRsrc->gpio[pin].GPIOx, pRsrc->gpio[pin].GPIO_Pin, GPIO_PIN_SET);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	1cfb      	adds	r3, r7, #3
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	18d3      	adds	r3, r2, r3
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	1cfb      	adds	r3, r7, #3
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	18d3      	adds	r3, r2, r3
 80063fc:	889b      	ldrh	r3, [r3, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	0019      	movs	r1, r3
 8006402:	f7fb fa10 	bl	8001826 <HAL_GPIO_WritePin>
		pRsrc->status |= BIT(pin);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8ada      	ldrh	r2, [r3, #22]
 800640a:	1cfb      	adds	r3, r7, #3
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2101      	movs	r1, #1
 8006410:	4099      	lsls	r1, r3
 8006412:	000b      	movs	r3, r1
 8006414:	b29b      	uxth	r3, r3
 8006416:	4313      	orrs	r3, r2
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	82da      	strh	r2, [r3, #22]
 800641e:	e021      	b.n	8006464 <outputWritePin+0xae>
	}
	else{
		HAL_GPIO_WritePin(pRsrc->gpio[pin].GPIOx, pRsrc->gpio[pin].GPIO_Pin, GPIO_PIN_RESET);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	1cfb      	adds	r3, r7, #3
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	18d3      	adds	r3, r2, r3
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	1cfb      	adds	r3, r7, #3
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	18d3      	adds	r3, r2, r3
 800643a:	889b      	ldrh	r3, [r3, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	0019      	movs	r1, r3
 8006440:	f7fb f9f1 	bl	8001826 <HAL_GPIO_WritePin>
		pRsrc->status &= (0xffffffff^BIT(pin));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8adb      	ldrh	r3, [r3, #22]
 8006448:	1cfa      	adds	r2, r7, #3
 800644a:	7812      	ldrb	r2, [r2, #0]
 800644c:	2101      	movs	r1, #1
 800644e:	4091      	lsls	r1, r2
 8006450:	000a      	movs	r2, r1
 8006452:	b292      	uxth	r2, r2
 8006454:	43d2      	mvns	r2, r2
 8006456:	b292      	uxth	r2, r2
 8006458:	4013      	ands	r3, r2
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	82da      	strh	r2, [r3, #22]
 8006460:	e000      	b.n	8006464 <outputWritePin+0xae>
	if(pin >= pRsrc->gpioLen)	return;
 8006462:	46c0      	nop			; (mov r8, r8)
	}
}
 8006464:	46bd      	mov	sp, r7
 8006466:	b002      	add	sp, #8
 8006468:	bd80      	pop	{r7, pc}

0800646a <outputTogglePin>:
* Description    : to toggle pin
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
static void outputTogglePin(OUTPUT_RSRC_T* pRsrc, u8 pin){
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	000a      	movs	r2, r1
 8006474:	1cfb      	adds	r3, r7, #3
 8006476:	701a      	strb	r2, [r3, #0]
	if(pin >= pRsrc->gpioLen)	return;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7d1b      	ldrb	r3, [r3, #20]
 800647c:	1cfa      	adds	r2, r7, #3
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d249      	bcs.n	8006518 <outputTogglePin+0xae>
	if(pRsrc->status & BIT(pin)){
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8adb      	ldrh	r3, [r3, #22]
 8006488:	001a      	movs	r2, r3
 800648a:	1cfb      	adds	r3, r7, #3
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	40da      	lsrs	r2, r3
 8006490:	0013      	movs	r3, r2
 8006492:	2201      	movs	r2, #1
 8006494:	4013      	ands	r3, r2
 8006496:	d020      	beq.n	80064da <outputTogglePin+0x70>
		HAL_GPIO_WritePin(pRsrc->gpio[pin].GPIOx, pRsrc->gpio[pin].GPIO_Pin, GPIO_PIN_RESET);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	1cfb      	adds	r3, r7, #3
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	18d3      	adds	r3, r2, r3
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	1cfb      	adds	r3, r7, #3
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	18d3      	adds	r3, r2, r3
 80064b2:	889b      	ldrh	r3, [r3, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	0019      	movs	r1, r3
 80064b8:	f7fb f9b5 	bl	8001826 <HAL_GPIO_WritePin>
		pRsrc->status &= (0xffffffff^BIT(pin));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8adb      	ldrh	r3, [r3, #22]
 80064c0:	1cfa      	adds	r2, r7, #3
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	2101      	movs	r1, #1
 80064c6:	4091      	lsls	r1, r2
 80064c8:	000a      	movs	r2, r1
 80064ca:	b292      	uxth	r2, r2
 80064cc:	43d2      	mvns	r2, r2
 80064ce:	b292      	uxth	r2, r2
 80064d0:	4013      	ands	r3, r2
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	82da      	strh	r2, [r3, #22]
 80064d8:	e01f      	b.n	800651a <outputTogglePin+0xb0>
	}
	else{
		HAL_GPIO_WritePin(pRsrc->gpio[pin].GPIOx, pRsrc->gpio[pin].GPIO_Pin, GPIO_PIN_SET);	
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	1cfb      	adds	r3, r7, #3
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	18d3      	adds	r3, r2, r3
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	1cfb      	adds	r3, r7, #3
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	18d3      	adds	r3, r2, r3
 80064f4:	889b      	ldrh	r3, [r3, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	0019      	movs	r1, r3
 80064fa:	f7fb f994 	bl	8001826 <HAL_GPIO_WritePin>
		pRsrc->status |= BIT(pin);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8ada      	ldrh	r2, [r3, #22]
 8006502:	1cfb      	adds	r3, r7, #3
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2101      	movs	r1, #1
 8006508:	4099      	lsls	r1, r3
 800650a:	000b      	movs	r3, r1
 800650c:	b29b      	uxth	r3, r3
 800650e:	4313      	orrs	r3, r2
 8006510:	b29a      	uxth	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	82da      	strh	r2, [r3, #22]
 8006516:	e000      	b.n	800651a <outputTogglePin+0xb0>
	if(pin >= pRsrc->gpioLen)	return;
 8006518:	46c0      	nop			; (mov r8, r8)
	}
}
 800651a:	46bd      	mov	sp, r7
 800651c:	b002      	add	sp, #8
 800651e:	bd80      	pop	{r7, pc}

08006520 <outputCmd>:
* Return         : None 

output.writepin(%pin, %state)
output.toggle(%pin)
*******************************************************************************/
u8 outputCmd(void *dev, char* CMD, u8 brdAddr, void (*xprint)(const char* FORMAT_ORG, ...)){
 8006520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006522:	b091      	sub	sp, #68	; 0x44
 8006524:	af04      	add	r7, sp, #16
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	1dfb      	adds	r3, r7, #7
 800652e:	701a      	strb	r2, [r3, #0]
	s32 i,j,ii,jj;
	const char* line;
	OUTPUT_DEV_T *pDev = dev;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c
	OUTPUT_RSRC_T *pRsrc = &pDev->rsrc;
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28
		
	if(strncmp(CMD, pRsrc->name, strlen(pRsrc->name)) != 0)	return 0;
 8006538:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	0018      	movs	r0, r3
 800653e:	f7f9 fddf 	bl	8000100 <strlen>
 8006542:	0002      	movs	r2, r0
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	0021      	movs	r1, r4
 8006548:	0018      	movs	r0, r3
 800654a:	f001 fd15 	bl	8007f78 <strncmp>
 800654e:	1e03      	subs	r3, r0, #0
 8006550:	d001      	beq.n	8006556 <outputCmd+0x36>
 8006552:	2300      	movs	r3, #0
 8006554:	e21f      	b.n	8006996 <outputCmd+0x476>
	line = &CMD[strlen(pRsrc->name)];
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	0018      	movs	r0, r3
 800655a:	f7f9 fdd1 	bl	8000100 <strlen>
 800655e:	0002      	movs	r2, r0
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	189b      	adds	r3, r3, r2
 8006564:	627b      	str	r3, [r7, #36]	; 0x24

	//.help()
	if(strncmp(line, ".help", strlen(".help")) == 0){
 8006566:	49ce      	ldr	r1, [pc, #824]	; (80068a0 <outputCmd+0x380>)
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	2205      	movs	r2, #5
 800656c:	0018      	movs	r0, r3
 800656e:	f001 fd03 	bl	8007f78 <strncmp>
 8006572:	1e03      	subs	r3, r0, #0
 8006574:	d107      	bne.n	8006586 <outputCmd+0x66>
		xprint("+ok@%d.%s.help()\r\n%s", brdAddr, pRsrc->name, OUTPUT_HELP);
 8006576:	1dfb      	adds	r3, r7, #7
 8006578:	7819      	ldrb	r1, [r3, #0]
 800657a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657c:	4bc9      	ldr	r3, [pc, #804]	; (80068a4 <outputCmd+0x384>)
 800657e:	48ca      	ldr	r0, [pc, #808]	; (80068a8 <outputCmd+0x388>)
 8006580:	683c      	ldr	r4, [r7, #0]
 8006582:	47a0      	blx	r4
 8006584:	e206      	b.n	8006994 <outputCmd+0x474>
	}
	//.readPin(indx0,indx1)
	else if(sscanf(line, ".readpin %d %d", &i, &j)==2){
 8006586:	231c      	movs	r3, #28
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	2220      	movs	r2, #32
 800658c:	18ba      	adds	r2, r7, r2
 800658e:	49c7      	ldr	r1, [pc, #796]	; (80068ac <outputCmd+0x38c>)
 8006590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006592:	f001 fcc7 	bl	8007f24 <siscanf>
 8006596:	0003      	movs	r3, r0
 8006598:	2b02      	cmp	r3, #2
 800659a:	d142      	bne.n	8006622 <outputCmd+0x102>
		if(i>=pRsrc->gpioLen || j>=pRsrc->gpioLen){	
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	7d1b      	ldrb	r3, [r3, #20]
 80065a0:	001a      	movs	r2, r3
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	dd05      	ble.n	80065b4 <outputCmd+0x94>
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	7d1b      	ldrb	r3, [r3, #20]
 80065ac:	001a      	movs	r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	dc0a      	bgt.n	80065ca <outputCmd+0xaa>
			xprint("+err@%d.%s.readpin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 80065b4:	1dfb      	adds	r3, r7, #7
 80065b6:	7819      	ldrb	r1, [r3, #0]
 80065b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	7d1b      	ldrb	r3, [r3, #20]
 80065be:	3b01      	subs	r3, #1
 80065c0:	48bb      	ldr	r0, [pc, #748]	; (80068b0 <outputCmd+0x390>)
 80065c2:	683c      	ldr	r4, [r7, #0]
 80065c4:	47a0      	blx	r4
			return 1;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e1e5      	b.n	8006996 <outputCmd+0x476>
		}
		ii = 0;	jj = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
		if(pRsrc->status & BIT(i))	ii = 1;
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	8adb      	ldrh	r3, [r3, #22]
 80065d6:	001a      	movs	r2, r3
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	40da      	lsrs	r2, r3
 80065dc:	0013      	movs	r3, r2
 80065de:	2201      	movs	r2, #1
 80065e0:	4013      	ands	r3, r2
 80065e2:	d001      	beq.n	80065e8 <outputCmd+0xc8>
 80065e4:	2301      	movs	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
		if(pRsrc->status & BIT(j))	jj = 1;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	8adb      	ldrh	r3, [r3, #22]
 80065ec:	001a      	movs	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	40da      	lsrs	r2, r3
 80065f2:	0013      	movs	r3, r2
 80065f4:	2201      	movs	r2, #1
 80065f6:	4013      	ands	r3, r2
 80065f8:	d001      	beq.n	80065fe <outputCmd+0xde>
 80065fa:	2301      	movs	r3, #1
 80065fc:	617b      	str	r3, [r7, #20]
		xprint("+ok@%d.%s.readpin(%d,%d,%d,%d)\r\n", brdAddr, pRsrc->name, i, ii, j, jj);
 80065fe:	1dfb      	adds	r3, r7, #7
 8006600:	781d      	ldrb	r5, [r3, #0]
 8006602:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	469c      	mov	ip, r3
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	6979      	ldr	r1, [r7, #20]
 800660e:	48a9      	ldr	r0, [pc, #676]	; (80068b4 <outputCmd+0x394>)
 8006610:	9102      	str	r1, [sp, #8]
 8006612:	9201      	str	r2, [sp, #4]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	683c      	ldr	r4, [r7, #0]
 8006618:	4663      	mov	r3, ip
 800661a:	0032      	movs	r2, r6
 800661c:	0029      	movs	r1, r5
 800661e:	47a0      	blx	r4
 8006620:	e1b8      	b.n	8006994 <outputCmd+0x474>
	}
	//.readPin(indx)
	else if(sscanf(line, ".readpin %d", &i)==1){
 8006622:	2320      	movs	r3, #32
 8006624:	18fa      	adds	r2, r7, r3
 8006626:	49a4      	ldr	r1, [pc, #656]	; (80068b8 <outputCmd+0x398>)
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	0018      	movs	r0, r3
 800662c:	f001 fc7a 	bl	8007f24 <siscanf>
 8006630:	0003      	movs	r3, r0
 8006632:	2b01      	cmp	r3, #1
 8006634:	d128      	bne.n	8006688 <outputCmd+0x168>
		if(i>=pRsrc->gpioLen){
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	7d1b      	ldrb	r3, [r3, #20]
 800663a:	001a      	movs	r2, r3
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	429a      	cmp	r2, r3
 8006640:	dc0a      	bgt.n	8006658 <outputCmd+0x138>
			xprint("+err@%d.%s.readpin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 8006642:	1dfb      	adds	r3, r7, #7
 8006644:	7819      	ldrb	r1, [r3, #0]
 8006646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	7d1b      	ldrb	r3, [r3, #20]
 800664c:	3b01      	subs	r3, #1
 800664e:	4898      	ldr	r0, [pc, #608]	; (80068b0 <outputCmd+0x390>)
 8006650:	683c      	ldr	r4, [r7, #0]
 8006652:	47a0      	blx	r4
			return 1;
 8006654:	2301      	movs	r3, #1
 8006656:	e19e      	b.n	8006996 <outputCmd+0x476>
		}
		ii = 0;	
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]
		if(pRsrc->status & BIT(i))	ii = 1;
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	8adb      	ldrh	r3, [r3, #22]
 8006660:	001a      	movs	r2, r3
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	40da      	lsrs	r2, r3
 8006666:	0013      	movs	r3, r2
 8006668:	2201      	movs	r2, #1
 800666a:	4013      	ands	r3, r2
 800666c:	d001      	beq.n	8006672 <outputCmd+0x152>
 800666e:	2301      	movs	r3, #1
 8006670:	61bb      	str	r3, [r7, #24]
		xprint("+ok@%d.%s.readpin(%d,%d)\r\n", brdAddr, pRsrc->name, i, ii);
 8006672:	1dfb      	adds	r3, r7, #7
 8006674:	7819      	ldrb	r1, [r3, #0]
 8006676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006678:	6a3d      	ldr	r5, [r7, #32]
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	488f      	ldr	r0, [pc, #572]	; (80068bc <outputCmd+0x39c>)
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	683c      	ldr	r4, [r7, #0]
 8006682:	002b      	movs	r3, r5
 8006684:	47a0      	blx	r4
 8006686:	e185      	b.n	8006994 <outputCmd+0x474>
	}
	//.readPin()
	else if(strncmp(line, ".readpin", strlen(".readpin")) == 0){
 8006688:	498d      	ldr	r1, [pc, #564]	; (80068c0 <outputCmd+0x3a0>)
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	2208      	movs	r2, #8
 800668e:	0018      	movs	r0, r3
 8006690:	f001 fc72 	bl	8007f78 <strncmp>
 8006694:	1e03      	subs	r3, r0, #0
 8006696:	d108      	bne.n	80066aa <outputCmd+0x18a>
		xprint("+ok@%d.%s.readpin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 8006698:	1dfb      	adds	r3, r7, #7
 800669a:	7819      	ldrb	r1, [r3, #0]
 800669c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	8adb      	ldrh	r3, [r3, #22]
 80066a2:	4888      	ldr	r0, [pc, #544]	; (80068c4 <outputCmd+0x3a4>)
 80066a4:	683c      	ldr	r4, [r7, #0]
 80066a6:	47a0      	blx	r4
 80066a8:	e174      	b.n	8006994 <outputCmd+0x474>
	}
	
	//.writePin(indx0,bit0,indx1,bit1)
	else if(sscanf(line, ".writepin %d %d %d %d", &i, &j, &ii, &jj)==4){
 80066aa:	231c      	movs	r3, #28
 80066ac:	18fc      	adds	r4, r7, r3
 80066ae:	2320      	movs	r3, #32
 80066b0:	18fa      	adds	r2, r7, r3
 80066b2:	4985      	ldr	r1, [pc, #532]	; (80068c8 <outputCmd+0x3a8>)
 80066b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066b6:	2314      	movs	r3, #20
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	2318      	movs	r3, #24
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	0023      	movs	r3, r4
 80066c4:	f001 fc2e 	bl	8007f24 <siscanf>
 80066c8:	0003      	movs	r3, r0
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d143      	bne.n	8006756 <outputCmd+0x236>
		if(i>=pRsrc->gpioLen || ii>=pRsrc->gpioLen){	
 80066ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d0:	7d1b      	ldrb	r3, [r3, #20]
 80066d2:	001a      	movs	r2, r3
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	dd05      	ble.n	80066e6 <outputCmd+0x1c6>
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	7d1b      	ldrb	r3, [r3, #20]
 80066de:	001a      	movs	r2, r3
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	dc0a      	bgt.n	80066fc <outputCmd+0x1dc>
			xprint("+err@%d.%s.writepin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 80066e6:	1dfb      	adds	r3, r7, #7
 80066e8:	7819      	ldrb	r1, [r3, #0]
 80066ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	7d1b      	ldrb	r3, [r3, #20]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4876      	ldr	r0, [pc, #472]	; (80068cc <outputCmd+0x3ac>)
 80066f4:	683c      	ldr	r4, [r7, #0]
 80066f6:	47a0      	blx	r4
			return 1;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e14c      	b.n	8006996 <outputCmd+0x476>
		}
		if(j)		pDev->WritePin(pRsrc, i, PIN_SET);
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <outputCmd+0x1f2>
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	b2d1      	uxtb	r1, r2
 800670a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800670c:	2201      	movs	r2, #1
 800670e:	4798      	blx	r3
 8006710:	e006      	b.n	8006720 <outputCmd+0x200>
		else pDev->WritePin(pRsrc, i, PIN_RESET);
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	6a3a      	ldr	r2, [r7, #32]
 8006718:	b2d1      	uxtb	r1, r2
 800671a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671c:	2200      	movs	r2, #0
 800671e:	4798      	blx	r3
		if(jj)	pDev->WritePin(pRsrc, ii, PIN_SET);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d007      	beq.n	8006736 <outputCmd+0x216>
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	b2d1      	uxtb	r1, r2
 800672e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006730:	2201      	movs	r2, #1
 8006732:	4798      	blx	r3
 8006734:	e006      	b.n	8006744 <outputCmd+0x224>
		else pDev->WritePin(pRsrc, ii, PIN_RESET);
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	b2d1      	uxtb	r1, r2
 800673e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006740:	2200      	movs	r2, #0
 8006742:	4798      	blx	r3
		xprint("+ok@%d.%s.writepin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 8006744:	1dfb      	adds	r3, r7, #7
 8006746:	7819      	ldrb	r1, [r3, #0]
 8006748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	8adb      	ldrh	r3, [r3, #22]
 800674e:	4860      	ldr	r0, [pc, #384]	; (80068d0 <outputCmd+0x3b0>)
 8006750:	683c      	ldr	r4, [r7, #0]
 8006752:	47a0      	blx	r4
 8006754:	e11e      	b.n	8006994 <outputCmd+0x474>
	}
	//.writePin(indx, b)
	else if(sscanf(line, ".writepin %d %d", &i, &j)==2){
 8006756:	231c      	movs	r3, #28
 8006758:	18fb      	adds	r3, r7, r3
 800675a:	2220      	movs	r2, #32
 800675c:	18ba      	adds	r2, r7, r2
 800675e:	495d      	ldr	r1, [pc, #372]	; (80068d4 <outputCmd+0x3b4>)
 8006760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006762:	f001 fbdf 	bl	8007f24 <siscanf>
 8006766:	0003      	movs	r3, r0
 8006768:	2b02      	cmp	r3, #2
 800676a:	d12b      	bne.n	80067c4 <outputCmd+0x2a4>
		if(i>=pRsrc->gpioLen){	
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	7d1b      	ldrb	r3, [r3, #20]
 8006770:	001a      	movs	r2, r3
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	429a      	cmp	r2, r3
 8006776:	dc0a      	bgt.n	800678e <outputCmd+0x26e>
			xprint("+err@%d.%s.writepin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 8006778:	1dfb      	adds	r3, r7, #7
 800677a:	7819      	ldrb	r1, [r3, #0]
 800677c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	7d1b      	ldrb	r3, [r3, #20]
 8006782:	3b01      	subs	r3, #1
 8006784:	4851      	ldr	r0, [pc, #324]	; (80068cc <outputCmd+0x3ac>)
 8006786:	683c      	ldr	r4, [r7, #0]
 8006788:	47a0      	blx	r4
			return 1;
 800678a:	2301      	movs	r3, #1
 800678c:	e103      	b.n	8006996 <outputCmd+0x476>
		}
		if(j)		pDev->WritePin(pRsrc, i, PIN_SET);
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <outputCmd+0x284>
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	6a3a      	ldr	r2, [r7, #32]
 800679a:	b2d1      	uxtb	r1, r2
 800679c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679e:	2201      	movs	r2, #1
 80067a0:	4798      	blx	r3
 80067a2:	e006      	b.n	80067b2 <outputCmd+0x292>
		else pDev->WritePin(pRsrc, i, PIN_RESET);
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	b2d1      	uxtb	r1, r2
 80067ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ae:	2200      	movs	r2, #0
 80067b0:	4798      	blx	r3
		xprint("+ok@%d.%s.writepin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 80067b2:	1dfb      	adds	r3, r7, #7
 80067b4:	7819      	ldrb	r1, [r3, #0]
 80067b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	8adb      	ldrh	r3, [r3, #22]
 80067bc:	4844      	ldr	r0, [pc, #272]	; (80068d0 <outputCmd+0x3b0>)
 80067be:	683c      	ldr	r4, [r7, #0]
 80067c0:	47a0      	blx	r4
 80067c2:	e0e7      	b.n	8006994 <outputCmd+0x474>
	}
	//.writePin(hex)
	else if(sscanf(line, ".writepin 0x%x", &i)==1){
 80067c4:	2320      	movs	r3, #32
 80067c6:	18fa      	adds	r2, r7, r3
 80067c8:	4943      	ldr	r1, [pc, #268]	; (80068d8 <outputCmd+0x3b8>)
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	0018      	movs	r0, r3
 80067ce:	f001 fba9 	bl	8007f24 <siscanf>
 80067d2:	0003      	movs	r3, r0
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10f      	bne.n	80067f8 <outputCmd+0x2d8>
		pDev->WritePinHEX(pRsrc, i);
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	b291      	uxth	r1, r2
 80067e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e2:	0010      	movs	r0, r2
 80067e4:	4798      	blx	r3
		xprint("+ok@%d.%s.writepin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 80067e6:	1dfb      	adds	r3, r7, #7
 80067e8:	7819      	ldrb	r1, [r3, #0]
 80067ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	8adb      	ldrh	r3, [r3, #22]
 80067f0:	4837      	ldr	r0, [pc, #220]	; (80068d0 <outputCmd+0x3b0>)
 80067f2:	683c      	ldr	r4, [r7, #0]
 80067f4:	47a0      	blx	r4
 80067f6:	e0cd      	b.n	8006994 <outputCmd+0x474>
	}
	//.writePin(dec)
	else if(sscanf(line, ".writepin %d", &i)==1){
 80067f8:	2320      	movs	r3, #32
 80067fa:	18fa      	adds	r2, r7, r3
 80067fc:	4937      	ldr	r1, [pc, #220]	; (80068dc <outputCmd+0x3bc>)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	0018      	movs	r0, r3
 8006802:	f001 fb8f 	bl	8007f24 <siscanf>
 8006806:	0003      	movs	r3, r0
 8006808:	2b01      	cmp	r3, #1
 800680a:	d10f      	bne.n	800682c <outputCmd+0x30c>
		pDev->WritePinHEX(pRsrc, i);
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	6a3a      	ldr	r2, [r7, #32]
 8006812:	b291      	uxth	r1, r2
 8006814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006816:	0010      	movs	r0, r2
 8006818:	4798      	blx	r3
		xprint("+ok@%d.%s.writepin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 800681a:	1dfb      	adds	r3, r7, #7
 800681c:	7819      	ldrb	r1, [r3, #0]
 800681e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	8adb      	ldrh	r3, [r3, #22]
 8006824:	482a      	ldr	r0, [pc, #168]	; (80068d0 <outputCmd+0x3b0>)
 8006826:	683c      	ldr	r4, [r7, #0]
 8006828:	47a0      	blx	r4
 800682a:	e0b3      	b.n	8006994 <outputCmd+0x474>
	}

	//.togglePin(indx0,indx1)
	else if(sscanf(line, ".togglepin %d %d", &i, &j)==2){
 800682c:	231c      	movs	r3, #28
 800682e:	18fb      	adds	r3, r7, r3
 8006830:	2220      	movs	r2, #32
 8006832:	18ba      	adds	r2, r7, r2
 8006834:	492a      	ldr	r1, [pc, #168]	; (80068e0 <outputCmd+0x3c0>)
 8006836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006838:	f001 fb74 	bl	8007f24 <siscanf>
 800683c:	0003      	movs	r3, r0
 800683e:	2b02      	cmp	r3, #2
 8006840:	d154      	bne.n	80068ec <outputCmd+0x3cc>
		if(i>=pRsrc->gpioLen || j>=pRsrc->gpioLen){	
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	7d1b      	ldrb	r3, [r3, #20]
 8006846:	001a      	movs	r2, r3
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	429a      	cmp	r2, r3
 800684c:	dd05      	ble.n	800685a <outputCmd+0x33a>
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	7d1b      	ldrb	r3, [r3, #20]
 8006852:	001a      	movs	r2, r3
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	429a      	cmp	r2, r3
 8006858:	dc0a      	bgt.n	8006870 <outputCmd+0x350>
			xprint("+err@%d.%s.togglepin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 800685a:	1dfb      	adds	r3, r7, #7
 800685c:	7819      	ldrb	r1, [r3, #0]
 800685e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	7d1b      	ldrb	r3, [r3, #20]
 8006864:	3b01      	subs	r3, #1
 8006866:	481f      	ldr	r0, [pc, #124]	; (80068e4 <outputCmd+0x3c4>)
 8006868:	683c      	ldr	r4, [r7, #0]
 800686a:	47a0      	blx	r4
			return 1;
 800686c:	2301      	movs	r3, #1
 800686e:	e092      	b.n	8006996 <outputCmd+0x476>
		}
		pDev->TogglePin(pRsrc, i);
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	6a3a      	ldr	r2, [r7, #32]
 8006876:	b2d1      	uxtb	r1, r2
 8006878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687a:	0010      	movs	r0, r2
 800687c:	4798      	blx	r3
		pDev->TogglePin(pRsrc, j);
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	b2d1      	uxtb	r1, r2
 8006886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006888:	0010      	movs	r0, r2
 800688a:	4798      	blx	r3
		xprint("+ok@%d.%s.togglepin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	7819      	ldrb	r1, [r3, #0]
 8006890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	8adb      	ldrh	r3, [r3, #22]
 8006896:	4814      	ldr	r0, [pc, #80]	; (80068e8 <outputCmd+0x3c8>)
 8006898:	683c      	ldr	r4, [r7, #0]
 800689a:	47a0      	blx	r4
 800689c:	e07a      	b.n	8006994 <outputCmd+0x474>
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	080097bc 	.word	0x080097bc
 80068a4:	08009d20 	.word	0x08009d20
 80068a8:	080097c4 	.word	0x080097c4
 80068ac:	080097dc 	.word	0x080097dc
 80068b0:	080097ec 	.word	0x080097ec
 80068b4:	0800980c 	.word	0x0800980c
 80068b8:	08009830 	.word	0x08009830
 80068bc:	0800983c 	.word	0x0800983c
 80068c0:	08009858 	.word	0x08009858
 80068c4:	08009864 	.word	0x08009864
 80068c8:	08009880 	.word	0x08009880
 80068cc:	08009898 	.word	0x08009898
 80068d0:	080098b8 	.word	0x080098b8
 80068d4:	080098d8 	.word	0x080098d8
 80068d8:	080098e8 	.word	0x080098e8
 80068dc:	080098f8 	.word	0x080098f8
 80068e0:	08009908 	.word	0x08009908
 80068e4:	0800991c 	.word	0x0800991c
 80068e8:	0800993c 	.word	0x0800993c
	}
	//.togglePin(indx)
	else if(sscanf(line, ".togglepin %d", &i)==1){
 80068ec:	2320      	movs	r3, #32
 80068ee:	18fa      	adds	r2, r7, r3
 80068f0:	492b      	ldr	r1, [pc, #172]	; (80069a0 <outputCmd+0x480>)
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	0018      	movs	r0, r3
 80068f6:	f001 fb15 	bl	8007f24 <siscanf>
 80068fa:	0003      	movs	r3, r0
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d120      	bne.n	8006942 <outputCmd+0x422>
		if(i>=pRsrc->gpioLen){	
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	7d1b      	ldrb	r3, [r3, #20]
 8006904:	001a      	movs	r2, r3
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	429a      	cmp	r2, r3
 800690a:	dc0a      	bgt.n	8006922 <outputCmd+0x402>
			xprint("+err@%d.%s.togglepin(\"0..%d\")\r\n", brdAddr, pRsrc->name, pRsrc->gpioLen-1);
 800690c:	1dfb      	adds	r3, r7, #7
 800690e:	7819      	ldrb	r1, [r3, #0]
 8006910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	7d1b      	ldrb	r3, [r3, #20]
 8006916:	3b01      	subs	r3, #1
 8006918:	4822      	ldr	r0, [pc, #136]	; (80069a4 <outputCmd+0x484>)
 800691a:	683c      	ldr	r4, [r7, #0]
 800691c:	47a0      	blx	r4
			return 1;
 800691e:	2301      	movs	r3, #1
 8006920:	e039      	b.n	8006996 <outputCmd+0x476>
		}
		pDev->TogglePin(pRsrc, i);
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	b2d1      	uxtb	r1, r2
 800692a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800692c:	0010      	movs	r0, r2
 800692e:	4798      	blx	r3
		xprint("+ok@%d.%s.togglepin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 8006930:	1dfb      	adds	r3, r7, #7
 8006932:	7819      	ldrb	r1, [r3, #0]
 8006934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	8adb      	ldrh	r3, [r3, #22]
 800693a:	481b      	ldr	r0, [pc, #108]	; (80069a8 <outputCmd+0x488>)
 800693c:	683c      	ldr	r4, [r7, #0]
 800693e:	47a0      	blx	r4
 8006940:	e028      	b.n	8006994 <outputCmd+0x474>
	}
	//.togglePin()
	else if(strncmp(line, ".togglepin", strlen(".togglepin")) == 0){
 8006942:	491a      	ldr	r1, [pc, #104]	; (80069ac <outputCmd+0x48c>)
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	220a      	movs	r2, #10
 8006948:	0018      	movs	r0, r3
 800694a:	f001 fb15 	bl	8007f78 <strncmp>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d11b      	bne.n	800698a <outputCmd+0x46a>
		for(i=0;i<pRsrc->gpioLen;i++)	pDev->TogglePin(pRsrc, i);
 8006952:	2300      	movs	r3, #0
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	e009      	b.n	800696c <outputCmd+0x44c>
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	6a3a      	ldr	r2, [r7, #32]
 800695e:	b2d1      	uxtb	r1, r2
 8006960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006962:	0010      	movs	r0, r2
 8006964:	4798      	blx	r3
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	3301      	adds	r3, #1
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	7d1b      	ldrb	r3, [r3, #20]
 8006970:	001a      	movs	r2, r3
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	429a      	cmp	r2, r3
 8006976:	dcef      	bgt.n	8006958 <outputCmd+0x438>
		xprint("+ok@%d.%s.togglepin(0x%08x)\r\n", brdAddr, pRsrc->name, pRsrc->status);
 8006978:	1dfb      	adds	r3, r7, #7
 800697a:	7819      	ldrb	r1, [r3, #0]
 800697c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	8adb      	ldrh	r3, [r3, #22]
 8006982:	4809      	ldr	r0, [pc, #36]	; (80069a8 <outputCmd+0x488>)
 8006984:	683c      	ldr	r4, [r7, #0]
 8006986:	47a0      	blx	r4
 8006988:	e004      	b.n	8006994 <outputCmd+0x474>
	}
	else{
		xprint("+unknown@%s", CMD);
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <outputCmd+0x490>)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	0010      	movs	r0, r2
 8006992:	4798      	blx	r3
	}
	return 1;
 8006994:	2301      	movs	r3, #1
}
 8006996:	0018      	movs	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	b00d      	add	sp, #52	; 0x34
 800699c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	0800995c 	.word	0x0800995c
 80069a4:	0800991c 	.word	0x0800991c
 80069a8:	0800993c 	.word	0x0800993c
 80069ac:	0800996c 	.word	0x0800996c
 80069b0:	08009978 	.word	0x08009978

080069b4 <CRC16>:

#define INITIAL_CRC_CC3     0x1D0F
#define CRC_CCITT_POLY			0x1021 	//CRC-CCITT, polynormial 0x1021.

uint16_t CRC16(const uint8_t *ptr, int count, uint16_t crcInit)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	1dbb      	adds	r3, r7, #6
 80069c0:	801a      	strh	r2, [r3, #0]
    uint16_t crc;
    uint8_t i;

    crc = crcInit;
 80069c2:	2316      	movs	r3, #22
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	1dba      	adds	r2, r7, #6
 80069c8:	8812      	ldrh	r2, [r2, #0]
 80069ca:	801a      	strh	r2, [r3, #0]
    while(--count >= 0 )
 80069cc:	e032      	b.n	8006a34 <CRC16+0x80>
    {
        crc = crc ^ ((uint16_t) (*ptr++ << 8));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	60fa      	str	r2, [r7, #12]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	021b      	lsls	r3, r3, #8
 80069da:	b299      	uxth	r1, r3
 80069dc:	2216      	movs	r2, #22
 80069de:	18bb      	adds	r3, r7, r2
 80069e0:	18ba      	adds	r2, r7, r2
 80069e2:	8812      	ldrh	r2, [r2, #0]
 80069e4:	404a      	eors	r2, r1
 80069e6:	801a      	strh	r2, [r3, #0]
        for(i = 0; i < 8; i++)
 80069e8:	2315      	movs	r3, #21
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e01b      	b.n	8006a2a <CRC16+0x76>
        {
            if( crc & 0x8000 )
 80069f2:	2116      	movs	r1, #22
 80069f4:	187b      	adds	r3, r7, r1
 80069f6:	2200      	movs	r2, #0
 80069f8:	5e9b      	ldrsh	r3, [r3, r2]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da09      	bge.n	8006a12 <CRC16+0x5e>
            {
                crc = (crc << 1) ^ CRC_CCITT_POLY;
 80069fe:	187b      	adds	r3, r7, r1
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	b21b      	sxth	r3, r3
 8006a06:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <CRC16+0x9c>)
 8006a08:	4053      	eors	r3, r2
 8006a0a:	b21a      	sxth	r2, r3
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	801a      	strh	r2, [r3, #0]
 8006a10:	e005      	b.n	8006a1e <CRC16+0x6a>
            }
            else
            {
                crc = crc << 1;
 8006a12:	2316      	movs	r3, #22
 8006a14:	18fa      	adds	r2, r7, r3
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	18db      	adds	r3, r3, r3
 8006a1c:	8013      	strh	r3, [r2, #0]
        for(i = 0; i < 8; i++)
 8006a1e:	2115      	movs	r1, #21
 8006a20:	187b      	adds	r3, r7, r1
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	187b      	adds	r3, r7, r1
 8006a26:	3201      	adds	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	2315      	movs	r3, #21
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b07      	cmp	r3, #7
 8006a32:	d9de      	bls.n	80069f2 <CRC16+0x3e>
    while(--count >= 0 )
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dac6      	bge.n	80069ce <CRC16+0x1a>
            }
        }
    }

    return crc;
 8006a40:	2316      	movs	r3, #22
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	881b      	ldrh	r3, [r3, #0]
}
 8006a46:	0018      	movs	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b006      	add	sp, #24
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	00001021 	.word	0x00001021

08006a54 <strFormat>:
		for(usX1=0; usX1<COUNT_OF_1US; usX1++){}
		delayUs --;
	}
}

s16 strFormat(char *buf, u16 len, const char* FORMAT_ORG, ...){
 8006a54:	b40c      	push	{r2, r3}
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	000a      	movs	r2, r1
 8006a60:	1cbb      	adds	r3, r7, #2
 8006a62:	801a      	strh	r2, [r3, #0]
	va_list ap;
	s16 bytes;
	//take string
	if(FORMAT_ORG == NULL)	return -1;
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <strFormat+0x1c>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	425b      	negs	r3, r3
 8006a6e:	e010      	b.n	8006a92 <strFormat+0x3e>
	va_start(ap, FORMAT_ORG);
 8006a70:	231c      	movs	r3, #28
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	60bb      	str	r3, [r7, #8]
	bytes = vsnprintf(buf, len, FORMAT_ORG, ap);
 8006a76:	1cbb      	adds	r3, r7, #2
 8006a78:	8819      	ldrh	r1, [r3, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 face 	bl	8008020 <vsniprintf>
 8006a84:	0002      	movs	r2, r0
 8006a86:	210e      	movs	r1, #14
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	801a      	strh	r2, [r3, #0]
	va_end(ap);
	return bytes;
 8006a8c:	187b      	adds	r3, r7, r1
 8006a8e:	2200      	movs	r2, #0
 8006a90:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006a92:	0018      	movs	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b004      	add	sp, #16
 8006a98:	bc80      	pop	{r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	b002      	add	sp, #8
 8006a9e:	4718      	bx	r3

08006aa0 <RingBuffer_GetCount>:
 * @brief	Return number of items in the ring buffer
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
static inline int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3310      	adds	r3, #16
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1ad3      	subs	r3, r2, r3
}
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b002      	add	sp, #8
 8006abc:	bd80      	pop	{r7, pc}

08006abe <RingBuffer_GetFree>:
 * @brief	Return number of free items in the ring buffer
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of free items in the ring buffer
 */
static inline int RingBuffer_GetFree(RINGBUFF_T *RingBuff)
{
 8006abe:	b590      	push	{r4, r7, lr}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
	return RingBuff->count - RingBuffer_GetCount(RingBuff);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685c      	ldr	r4, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	0018      	movs	r0, r3
 8006ace:	f7ff ffe7 	bl	8006aa0 <RingBuffer_GetCount>
 8006ad2:	0003      	movs	r3, r0
 8006ad4:	1ae3      	subs	r3, r4, r3
}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b003      	add	sp, #12
 8006adc:	bd90      	pop	{r4, r7, pc}

08006ade <RingBuffer_IsFull>:
 * @brief	Return number of items in the ring buffer
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
static inline int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7ff ffd9 	bl	8006aa0 <RingBuffer_GetCount>
 8006aee:	0002      	movs	r2, r0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	17d0      	asrs	r0, r2, #31
 8006af6:	0fd9      	lsrs	r1, r3, #31
 8006af8:	429a      	cmp	r2, r3
 8006afa:	4148      	adcs	r0, r1
 8006afc:	0003      	movs	r3, r0
 8006afe:	b2db      	uxtb	r3, r3
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b002      	add	sp, #8
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <RingBuffer_IsEmpty>:
 * @brief	Return empty status of ring buffer
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
static inline int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	330c      	adds	r3, #12
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3310      	adds	r3, #16
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	425a      	negs	r2, r3
 8006b20:	4153      	adcs	r3, r2
 8006b22:	b2db      	uxtb	r3, r3
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <RingBuffer_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
	RingBuff->data = buffer;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	601a      	str	r2, [r3, #0]
	RingBuff->count = count;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	605a      	str	r2, [r3, #4]
	RingBuff->itemSz = itemSize;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
	RingBuff->head = RingBuff->tail = 0;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60da      	str	r2, [r3, #12]

	return 1;
 8006b5a:	2301      	movs	r3, #1
}
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	b004      	add	sp, #16
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <RingBuffer_InsertMult>:
	return 1;
}

/* Insert multiple items into Ring Buffer */
int RingBuffer_InsertMult(RINGBUFF_T *RingBuff, const void *data, int num)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
	uint8_t *ptr = RingBuff->data;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	61bb      	str	r3, [r7, #24]
	int cnt1, cnt2;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7ff ffb0 	bl	8006ade <RingBuffer_IsFull>
 8006b7e:	1e03      	subs	r3, r0, #0
 8006b80:	d001      	beq.n	8006b86 <RingBuffer_InsertMult+0x22>
		return 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e07a      	b.n	8006c7c <RingBuffer_InsertMult+0x118>

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetFree(RingBuff);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7ff ff98 	bl	8006abe <RingBuffer_GetFree>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	61fb      	str	r3, [r7, #28]
	if (RB_INDH(RingBuff) + cnt1 >= RingBuff->count)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	401a      	ands	r2, r3
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	18d2      	adds	r2, r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d30a      	bcc.n	8006bc4 <RingBuffer_InsertMult+0x60>
		cnt1 = RingBuff->count - RB_INDH(RingBuff);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	0019      	movs	r1, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	1acb      	subs	r3, r1, r3
 8006bc2:	61fb      	str	r3, [r7, #28]
	cnt2 -= cnt1;
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	617b      	str	r3, [r7, #20]

	cnt1 = MIN(cnt1, num);
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	dd00      	ble.n	8006bd6 <RingBuffer_InsertMult+0x72>
 8006bd4:	0013      	movs	r3, r2
 8006bd6:	61fb      	str	r3, [r7, #28]
	num -= cnt1;
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	607b      	str	r3, [r7, #4]

	cnt2 = MIN(cnt2, num);
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4293      	cmp	r3, r2
 8006be6:	dd00      	ble.n	8006bea <RingBuffer_InsertMult+0x86>
 8006be8:	0013      	movs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]
	num -= cnt2;
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	607b      	str	r3, [r7, #4]

	/* Write segment 1 */
	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	401a      	ands	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	4353      	muls	r3, r2
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	18d3      	adds	r3, r2, r3
 8006c0a:	61bb      	str	r3, [r7, #24]
	memcpy(ptr, data, cnt1 * RingBuff->itemSz);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	4353      	muls	r3, r2
 8006c14:	001a      	movs	r2, r3
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f001 f95e 	bl	8007edc <memcpy>
	RingBuff->head += cnt1;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	18d2      	adds	r2, r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	60da      	str	r2, [r3, #12]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDH(RingBuff) * RingBuff->itemSz;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68d9      	ldr	r1, [r3, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	4019      	ands	r1, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	434b      	muls	r3, r1
 8006c42:	18d3      	adds	r3, r2, r3
 8006c44:	61bb      	str	r3, [r7, #24]
	data = (const uint8_t *) data + cnt1 * RingBuff->itemSz;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	4353      	muls	r3, r2
 8006c4e:	001a      	movs	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	189b      	adds	r3, r3, r2
 8006c54:	60bb      	str	r3, [r7, #8]
	memcpy(ptr, data, cnt2 * RingBuff->itemSz);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4353      	muls	r3, r2
 8006c5e:	001a      	movs	r2, r3
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f001 f939 	bl	8007edc <memcpy>
	RingBuff->head += cnt2;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	18d2      	adds	r2, r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	60da      	str	r2, [r3, #12]

	return cnt1 + cnt2;
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	18d3      	adds	r3, r2, r3
}
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b008      	add	sp, #32
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <RingBuffer_Pop>:

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	uint8_t *ptr = RingBuff->data;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f7ff ff36 	bl	8006b08 <RingBuffer_IsEmpty>
 8006c9c:	1e03      	subs	r3, r0, #0
 8006c9e:	d001      	beq.n	8006ca4 <RingBuffer_Pop+0x20>
		return 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e019      	b.n	8006cd8 <RingBuffer_Pop+0x54>

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	401a      	ands	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4353      	muls	r3, r2
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	18d3      	adds	r3, r2, r3
 8006cba:	60fb      	str	r3, [r7, #12]
	memcpy(data, ptr, RingBuff->itemSz);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f001 f908 	bl	8007edc <memcpy>
	RingBuff->tail++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	611a      	str	r2, [r3, #16]

	return 1;
 8006cd6:	2301      	movs	r3, #1
}
 8006cd8:	0018      	movs	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b004      	add	sp, #16
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <RingBuffer_PopMult>:

/* Pop multiple items from Ring buffer */
int RingBuffer_PopMult(RINGBUFF_T *RingBuff, void *data, int num)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
	uint8_t *ptr = RingBuff->data;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	61bb      	str	r3, [r7, #24]
	int cnt1, cnt2;

	/* We cannot insert when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f7ff ff07 	bl	8006b08 <RingBuffer_IsEmpty>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d001      	beq.n	8006d02 <RingBuffer_PopMult+0x22>
		return 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e07a      	b.n	8006df8 <RingBuffer_PopMult+0x118>

	/* Calculate the segment lengths */
	cnt1 = cnt2 = RingBuffer_GetCount(RingBuff);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7ff fecb 	bl	8006aa0 <RingBuffer_GetCount>
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	61fb      	str	r3, [r7, #28]
	if (RB_INDT(RingBuff) + cnt1 >= RingBuff->count)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	401a      	ands	r2, r3
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	18d2      	adds	r2, r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d30a      	bcc.n	8006d40 <RingBuffer_PopMult+0x60>
		cnt1 = RingBuff->count - RB_INDT(RingBuff);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	0019      	movs	r1, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	1acb      	subs	r3, r1, r3
 8006d3e:	61fb      	str	r3, [r7, #28]
	cnt2 -= cnt1;
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	617b      	str	r3, [r7, #20]

	cnt1 = MIN(cnt1, num);
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	dd00      	ble.n	8006d52 <RingBuffer_PopMult+0x72>
 8006d50:	0013      	movs	r3, r2
 8006d52:	61fb      	str	r3, [r7, #28]
	num -= cnt1;
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	607b      	str	r3, [r7, #4]

	cnt2 = MIN(cnt2, num);
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4293      	cmp	r3, r2
 8006d62:	dd00      	ble.n	8006d66 <RingBuffer_PopMult+0x86>
 8006d64:	0013      	movs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]
	num -= cnt2;
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	607b      	str	r3, [r7, #4]

	/* Write segment 1 */
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	4353      	muls	r3, r2
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	18d3      	adds	r3, r2, r3
 8006d86:	61bb      	str	r3, [r7, #24]
	memcpy(data, ptr, cnt1 * RingBuff->itemSz);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	4353      	muls	r3, r2
 8006d90:	001a      	movs	r2, r3
 8006d92:	69b9      	ldr	r1, [r7, #24]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	0018      	movs	r0, r3
 8006d98:	f001 f8a0 	bl	8007edc <memcpy>
	RingBuff->tail += cnt1;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	18d2      	adds	r2, r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	611a      	str	r2, [r3, #16]

	/* Write segment 2 */
	ptr = (uint8_t *) RingBuff->data + RB_INDT(RingBuff) * RingBuff->itemSz;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6919      	ldr	r1, [r3, #16]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	4019      	ands	r1, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	434b      	muls	r3, r1
 8006dbe:	18d3      	adds	r3, r2, r3
 8006dc0:	61bb      	str	r3, [r7, #24]
	data = (uint8_t *) data + cnt1 * RingBuff->itemSz;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	4353      	muls	r3, r2
 8006dca:	001a      	movs	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	60bb      	str	r3, [r7, #8]
	memcpy(data, ptr, cnt2 * RingBuff->itemSz);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4353      	muls	r3, r2
 8006dda:	001a      	movs	r2, r3
 8006ddc:	69b9      	ldr	r1, [r7, #24]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f001 f87b 	bl	8007edc <memcpy>
	RingBuff->tail += cnt2;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	18d2      	adds	r2, r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	611a      	str	r2, [r3, #16]

	return cnt1 + cnt2;
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	18d3      	adds	r3, r2, r3
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b008      	add	sp, #32
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <setupRs485Dev>:
	u8* rxDoubleBuff,	u16 rxBufLen,
	const PIN_T DE,
	const PIN_T DET,
	s8 (*beforeSend)(void),
	s8 (*afterSend)(UART_HandleTypeDef *huart)
){
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b08b      	sub	sp, #44	; 0x2c
 8006e04:	af04      	add	r7, sp, #16
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	001a      	movs	r2, r3
 8006e0e:	1cbb      	adds	r3, r7, #2
 8006e10:	801a      	strh	r2, [r3, #0]
	Rs485Rsrc_t *pRsrc = &pDev->rsrc;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	617b      	str	r3, [r7, #20]
	
	memset(&pRsrc->uartdev, 0, sizeof(UartDev_t));
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	22bc      	movs	r2, #188	; 0xbc
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f001 f879 	bl	8007f14 <memset>

	pRsrc->DE = DE;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	22bc      	movs	r2, #188	; 0xbc
 8006e26:	2110      	movs	r1, #16
 8006e28:	2028      	movs	r0, #40	; 0x28
 8006e2a:	1809      	adds	r1, r1, r0
 8006e2c:	19c9      	adds	r1, r1, r7
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	000a      	movs	r2, r1
 8006e32:	ca12      	ldmia	r2!, {r1, r4}
 8006e34:	c312      	stmia	r3!, {r1, r4}
	pRsrc->DET = DET;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	22c4      	movs	r2, #196	; 0xc4
 8006e3a:	2118      	movs	r1, #24
 8006e3c:	1809      	adds	r1, r1, r0
 8006e3e:	19c9      	adds	r1, r1, r7
 8006e40:	189b      	adds	r3, r3, r2
 8006e42:	000a      	movs	r2, r1
 8006e44:	ca03      	ldmia	r2!, {r0, r1}
 8006e46:	c303      	stmia	r3!, {r0, r1}
	HAL_GPIO_WritePin(pRsrc->DE.GPIOx, pRsrc->DE.GPIO_Pin, GPIO_PIN_SET);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	22bc      	movs	r2, #188	; 0xbc
 8006e4c:	5898      	ldr	r0, [r3, r2]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	22c0      	movs	r2, #192	; 0xc0
 8006e52:	5a9b      	ldrh	r3, [r3, r2]
 8006e54:	2201      	movs	r2, #1
 8006e56:	0019      	movs	r1, r3
 8006e58:	f7fa fce5 	bl	8001826 <HAL_GPIO_WritePin>
	
	setupUartDev(&pRsrc->uartdev, huart,
 8006e5c:	6978      	ldr	r0, [r7, #20]
 8006e5e:	1cbb      	adds	r3, r7, #2
 8006e60:	881c      	ldrh	r4, [r3, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	2334      	movs	r3, #52	; 0x34
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	9303      	str	r3, [sp, #12]
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	9302      	str	r3, [sp, #8]
 8006e72:	232c      	movs	r3, #44	; 0x2c
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	9301      	str	r3, [sp, #4]
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	0023      	movs	r3, r4
 8006e80:	f000 fb7c 	bl	800757c <setupUartDev>
		txPool, txPoolLen,
		rxPool, rxPoolLen,
		rxDoubleBuff, rxBufLen
	);
	pRsrc->uartdev.rsrc.beforeSend = beforeSend;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2190      	movs	r1, #144	; 0x90
 8006e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e8a:	505a      	str	r2, [r3, r1]
	pRsrc->uartdev.rsrc.afterSend = afterSend;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2194      	movs	r1, #148	; 0x94
 8006e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e92:	505a      	str	r2, [r3, r1]
	
	pDev->RxPolling = rs485RxMonitor;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	21d0      	movs	r1, #208	; 0xd0
 8006e98:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <setupRs485Dev+0xc4>)
 8006e9a:	505a      	str	r2, [r3, r1]
	pDev->RxFetchFrame = rs485RxFetchFrame;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	21d4      	movs	r1, #212	; 0xd4
 8006ea0:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <setupRs485Dev+0xc8>)
 8006ea2:	505a      	str	r2, [r3, r1]
	pDev->Send = rs485TxSend;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	21d8      	movs	r1, #216	; 0xd8
 8006ea8:	4a08      	ldr	r2, [pc, #32]	; (8006ecc <setupRs485Dev+0xcc>)
 8006eaa:	505a      	str	r2, [r3, r1]
	pDev->SendStr = rs485TxSendString;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	21dc      	movs	r1, #220	; 0xdc
 8006eb0:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <setupRs485Dev+0xd0>)
 8006eb2:	505a      	str	r2, [r3, r1]
	pDev->TxPolling = rs485TxPolling;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	21e0      	movs	r1, #224	; 0xe0
 8006eb8:	4a06      	ldr	r2, [pc, #24]	; (8006ed4 <setupRs485Dev+0xd4>)
 8006eba:	505a      	str	r2, [r3, r1]

}
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b007      	add	sp, #28
 8006ec2:	bd90      	pop	{r4, r7, pc}
 8006ec4:	08006fbd 	.word	0x08006fbd
 8006ec8:	08007013 	.word	0x08007013
 8006ecc:	08006ed9 	.word	0x08006ed9
 8006ed0:	08006f19 	.word	0x08006f19
 8006ed4:	08006fdb 	.word	0x08006fdb

08006ed8 <rs485TxSend>:

static u16 rs485TxSend(Rs485Rsrc_t *pRsrc, const u8* BUF, u16 len){
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	1dbb      	adds	r3, r7, #6
 8006ee4:	801a      	strh	r2, [r3, #0]
	UartDev_t* pUartDev = &pRsrc->uartdev;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	617b      	str	r3, [r7, #20]

	if(BUF == NULL || len == 0 )	return 0;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <rs485TxSend+0x20>
 8006ef0:	1dbb      	adds	r3, r7, #6
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <rs485TxSend+0x24>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e009      	b.n	8006f10 <rs485TxSend+0x38>
	pUartDev->TxSendFrame(&pUartDev->rsrc, BUF, len);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	22b4      	movs	r2, #180	; 0xb4
 8006f00:	589b      	ldr	r3, [r3, r2]
 8006f02:	6978      	ldr	r0, [r7, #20]
 8006f04:	1dba      	adds	r2, r7, #6
 8006f06:	8812      	ldrh	r2, [r2, #0]
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	4798      	blx	r3

	return len;
 8006f0c:	1dbb      	adds	r3, r7, #6
 8006f0e:	881b      	ldrh	r3, [r3, #0]
}
 8006f10:	0018      	movs	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b006      	add	sp, #24
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <rs485TxSendString>:

static void rs485TxSendString(Rs485Rsrc_t *pRsrc, const char* FORMAT_ORG, ...){
 8006f18:	b40e      	push	{r1, r2, r3}
 8006f1a:	b5b0      	push	{r4, r5, r7, lr}
 8006f1c:	4c24      	ldr	r4, [pc, #144]	; (8006fb0 <rs485TxSendString+0x98>)
 8006f1e:	44a5      	add	sp, r4
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	va_list ap;
	s16 bytes;
	UartDev_t* pUartDev = &pRsrc->uartdev;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2485      	movs	r4, #133	; 0x85
 8006f28:	00a4      	lsls	r4, r4, #2
 8006f2a:	193a      	adds	r2, r7, r4
 8006f2c:	6013      	str	r3, [r2, #0]
	char buff[MAX_CMD_LEN]={0};
 8006f2e:	4b21      	ldr	r3, [pc, #132]	; (8006fb4 <rs485TxSendString+0x9c>)
 8006f30:	2286      	movs	r2, #134	; 0x86
 8006f32:	0092      	lsls	r2, r2, #2
 8006f34:	189b      	adds	r3, r3, r2
 8006f36:	19db      	adds	r3, r3, r7
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	22fe      	movs	r2, #254	; 0xfe
 8006f40:	0052      	lsls	r2, r2, #1
 8006f42:	2100      	movs	r1, #0
 8006f44:	0018      	movs	r0, r3
 8006f46:	f000 ffe5 	bl	8007f14 <memset>
	
	if(FORMAT_ORG == NULL)	return ;
 8006f4a:	2289      	movs	r2, #137	; 0x89
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	2508      	movs	r5, #8
 8006f50:	1953      	adds	r3, r2, r5
 8006f52:	19db      	adds	r3, r3, r7
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d021      	beq.n	8006f9e <rs485TxSendString+0x86>
	va_start(ap, FORMAT_ORG);
 8006f5a:	238a      	movs	r3, #138	; 0x8a
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	195b      	adds	r3, r3, r5
 8006f60:	19db      	adds	r3, r3, r7
 8006f62:	2183      	movs	r1, #131	; 0x83
 8006f64:	0089      	lsls	r1, r1, #2
 8006f66:	1878      	adds	r0, r7, r1
 8006f68:	6003      	str	r3, [r0, #0]
	bytes = vsnprintf(buff, MAX_CMD_LEN, FORMAT_ORG, ap);
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	1952      	adds	r2, r2, r5
 8006f70:	19d2      	adds	r2, r2, r7
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	2180      	movs	r1, #128	; 0x80
 8006f76:	0089      	lsls	r1, r1, #2
 8006f78:	250c      	movs	r5, #12
 8006f7a:	1978      	adds	r0, r7, r5
 8006f7c:	f001 f850 	bl	8008020 <vsniprintf>
 8006f80:	0002      	movs	r2, r0
 8006f82:	490d      	ldr	r1, [pc, #52]	; (8006fb8 <rs485TxSendString+0xa0>)
 8006f84:	187b      	adds	r3, r7, r1
 8006f86:	801a      	strh	r2, [r3, #0]
	va_end(ap);
	pUartDev->TxSendFrame(&pUartDev->rsrc, (u8*)buff, bytes);
 8006f88:	193b      	adds	r3, r7, r4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	22b4      	movs	r2, #180	; 0xb4
 8006f8e:	589b      	ldr	r3, [r3, r2]
 8006f90:	193a      	adds	r2, r7, r4
 8006f92:	6810      	ldr	r0, [r2, #0]
 8006f94:	187a      	adds	r2, r7, r1
 8006f96:	8812      	ldrh	r2, [r2, #0]
 8006f98:	1979      	adds	r1, r7, r5
 8006f9a:	4798      	blx	r3
 8006f9c:	e000      	b.n	8006fa0 <rs485TxSendString+0x88>
	if(FORMAT_ORG == NULL)	return ;
 8006f9e:	46c0      	nop			; (mov r8, r8)
}
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	2387      	movs	r3, #135	; 0x87
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	449d      	add	sp, r3
 8006fa8:	bcb0      	pop	{r4, r5, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	b003      	add	sp, #12
 8006fae:	4718      	bx	r3
 8006fb0:	fffffde4 	.word	0xfffffde4
 8006fb4:	fffffdf4 	.word	0xfffffdf4
 8006fb8:	00000212 	.word	0x00000212

08006fbc <rs485RxMonitor>:

static u8 rs485RxMonitor(Rs485Rsrc_t *pRsrc){
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	return (pRsrc->uartdev.RxPolling(&pRsrc->uartdev.rsrc));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	22a4      	movs	r2, #164	; 0xa4
 8006fc8:	589b      	ldr	r3, [r3, r2]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	0010      	movs	r0, r2
 8006fce:	4798      	blx	r3
 8006fd0:	0003      	movs	r3, r0
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b002      	add	sp, #8
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <rs485TxPolling>:

static void rs485TxPolling(Rs485Rsrc_t *pRsrc){
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(pRsrc->DET.GPIOx, pRsrc->DET.GPIO_Pin) == GPIO_PIN_SET)	return;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	22c4      	movs	r2, #196	; 0xc4
 8006fe6:	589a      	ldr	r2, [r3, r2]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	21c8      	movs	r1, #200	; 0xc8
 8006fec:	5a5b      	ldrh	r3, [r3, r1]
 8006fee:	0019      	movs	r1, r3
 8006ff0:	0010      	movs	r0, r2
 8006ff2:	f7fa fbfb 	bl	80017ec <HAL_GPIO_ReadPin>
 8006ff6:	0003      	movs	r3, r0
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d006      	beq.n	800700a <rs485TxPolling+0x30>
	pRsrc->uartdev.TxPolling(&pRsrc->uartdev.rsrc);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	22a0      	movs	r2, #160	; 0xa0
 8007000:	589b      	ldr	r3, [r3, r2]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	0010      	movs	r0, r2
 8007006:	4798      	blx	r3
 8007008:	e000      	b.n	800700c <rs485TxPolling+0x32>
	if(HAL_GPIO_ReadPin(pRsrc->DET.GPIOx, pRsrc->DET.GPIO_Pin) == GPIO_PIN_SET)	return;
 800700a:	46c0      	nop			; (mov r8, r8)
}
 800700c:	46bd      	mov	sp, r7
 800700e:	b002      	add	sp, #8
 8007010:	bd80      	pop	{r7, pc}

08007012 <rs485RxFetchFrame>:

static u16 rs485RxFetchFrame(Rs485Rsrc_t *pRsrc, u8* frame, u16 frameLen){
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	1dbb      	adds	r3, r7, #6
 800701e:	801a      	strh	r2, [r3, #0]
	return (pRsrc->uartdev.RxFetchFrame(&pRsrc->uartdev.rsrc, frame, frameLen));
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	22ac      	movs	r2, #172	; 0xac
 8007024:	589b      	ldr	r3, [r3, r2]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	1dba      	adds	r2, r7, #6
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	4798      	blx	r3
 8007030:	0003      	movs	r3, r0
}
 8007032:	0018      	movs	r0, r3
 8007034:	46bd      	mov	sp, r7
 8007036:	b004      	add	sp, #16
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <taskIrq>:
static void task16(void);
static void task32(void);
static void task64(void);
static void task128(void);

void taskIrq(void){
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
	if((++tickRT4&0x03) == 0)	taskRT4();
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <taskIrq+0x70>)
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	4b18      	ldr	r3, [pc, #96]	; (80070ac <taskIrq+0x70>)
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	4b17      	ldr	r3, [pc, #92]	; (80070ac <taskIrq+0x70>)
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	001a      	movs	r2, r3
 8007052:	2303      	movs	r3, #3
 8007054:	4013      	ands	r3, r2
 8007056:	d101      	bne.n	800705c <taskIrq+0x20>
 8007058:	f000 f89c 	bl	8007194 <taskRT4>
	tick4++;
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <taskIrq+0x74>)
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	3301      	adds	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	4b12      	ldr	r3, [pc, #72]	; (80070b0 <taskIrq+0x74>)
 8007066:	801a      	strh	r2, [r3, #0]
	tick8++;
 8007068:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <taskIrq+0x78>)
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	3301      	adds	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <taskIrq+0x78>)
 8007072:	801a      	strh	r2, [r3, #0]
	tick16++;
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <taskIrq+0x7c>)
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <taskIrq+0x7c>)
 800707e:	801a      	strh	r2, [r3, #0]
	tick32++;
 8007080:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <taskIrq+0x80>)
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <taskIrq+0x80>)
 800708a:	801a      	strh	r2, [r3, #0]
	tick64++;
 800708c:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <taskIrq+0x84>)
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <taskIrq+0x84>)
 8007096:	801a      	strh	r2, [r3, #0]
	tick128++;
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <taskIrq+0x88>)
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	4b08      	ldr	r3, [pc, #32]	; (80070c4 <taskIrq+0x88>)
 80070a2:	801a      	strh	r2, [r3, #0]
}
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	46c0      	nop			; (mov r8, r8)
 80070ac:	20000eec 	.word	0x20000eec
 80070b0:	20000eee 	.word	0x20000eee
 80070b4:	20000ef0 	.word	0x20000ef0
 80070b8:	20000ef2 	.word	0x20000ef2
 80070bc:	20000ef4 	.word	0x20000ef4
 80070c0:	20000ef6 	.word	0x20000ef6
 80070c4:	20000ef8 	.word	0x20000ef8

080070c8 <taskPolling>:
/**
  * @brief polling task
  * @param none
  * @retval None
  */
void taskPolling(void){
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
	if(initalDone == 0)	return;
 80070cc:	4b1f      	ldr	r3, [pc, #124]	; (800714c <taskPolling+0x84>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d038      	beq.n	8007146 <taskPolling+0x7e>
	task0();
 80070d4:	f000 f848 	bl	8007168 <task0>
	if(tick4>=4)		{task4();tick4 = 0;}
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <taskPolling+0x88>)
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d904      	bls.n	80070ea <taskPolling+0x22>
 80070e0:	f000 f85e 	bl	80071a0 <task4>
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <taskPolling+0x88>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	801a      	strh	r2, [r3, #0]
	if(tick8>=8)		{task8();tick8 = 0;}
 80070ea:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <taskPolling+0x8c>)
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	2b07      	cmp	r3, #7
 80070f0:	d904      	bls.n	80070fc <taskPolling+0x34>
 80070f2:	f000 f86b 	bl	80071cc <task8>
 80070f6:	4b17      	ldr	r3, [pc, #92]	; (8007154 <taskPolling+0x8c>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	801a      	strh	r2, [r3, #0]
	if(tick16>=16)		{task16();tick16 = 0;}
 80070fc:	4b16      	ldr	r3, [pc, #88]	; (8007158 <taskPolling+0x90>)
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	2b0f      	cmp	r3, #15
 8007102:	d904      	bls.n	800710e <taskPolling+0x46>
 8007104:	f000 f968 	bl	80073d8 <task16>
 8007108:	4b13      	ldr	r3, [pc, #76]	; (8007158 <taskPolling+0x90>)
 800710a:	2200      	movs	r2, #0
 800710c:	801a      	strh	r2, [r3, #0]
	if(tick32>=32)		{task32();tick32 = 0;}
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <taskPolling+0x94>)
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	2b1f      	cmp	r3, #31
 8007114:	d904      	bls.n	8007120 <taskPolling+0x58>
 8007116:	f000 f9d7 	bl	80074c8 <task32>
 800711a:	4b10      	ldr	r3, [pc, #64]	; (800715c <taskPolling+0x94>)
 800711c:	2200      	movs	r2, #0
 800711e:	801a      	strh	r2, [r3, #0]
	if(tick64>=64)		{task64();tick64 = 0;}
 8007120:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <taskPolling+0x98>)
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	2b3f      	cmp	r3, #63	; 0x3f
 8007126:	d904      	bls.n	8007132 <taskPolling+0x6a>
 8007128:	f000 f9d3 	bl	80074d2 <task64>
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <taskPolling+0x98>)
 800712e:	2200      	movs	r2, #0
 8007130:	801a      	strh	r2, [r3, #0]
	if(tick128>=128)	{task128();tick128 = 0;}
 8007132:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <taskPolling+0x9c>)
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	2b7f      	cmp	r3, #127	; 0x7f
 8007138:	d906      	bls.n	8007148 <taskPolling+0x80>
 800713a:	f000 f9cf 	bl	80074dc <task128>
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <taskPolling+0x9c>)
 8007140:	2200      	movs	r2, #0
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	e000      	b.n	8007148 <taskPolling+0x80>
	if(initalDone == 0)	return;
 8007146:	46c0      	nop			; (mov r8, r8)
}
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	200002dd 	.word	0x200002dd
 8007150:	20000eee 	.word	0x20000eee
 8007154:	20000ef0 	.word	0x20000ef0
 8007158:	20000ef2 	.word	0x20000ef2
 800715c:	20000ef4 	.word	0x20000ef4
 8007160:	20000ef6 	.word	0x20000ef6
 8007164:	20000ef8 	.word	0x20000ef8

08007168 <task0>:
/**
  * @brief quickly task
  * @param none
  * @retval None
  */
static void task0(void){
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
	console.TxPolling(&console.rsrc);
 800716c:	4b07      	ldr	r3, [pc, #28]	; (800718c <task0+0x24>)
 800716e:	22a0      	movs	r2, #160	; 0xa0
 8007170:	589b      	ldr	r3, [r3, r2]
 8007172:	4a06      	ldr	r2, [pc, #24]	; (800718c <task0+0x24>)
 8007174:	0010      	movs	r0, r2
 8007176:	4798      	blx	r3
	rs485.TxPolling(&rs485.rsrc);
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <task0+0x28>)
 800717a:	22e0      	movs	r2, #224	; 0xe0
 800717c:	589b      	ldr	r3, [r3, r2]
 800717e:	4a04      	ldr	r2, [pc, #16]	; (8007190 <task0+0x28>)
 8007180:	0010      	movs	r0, r2
 8007182:	4798      	blx	r3
}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	200007e0 	.word	0x200007e0
 8007190:	20000d9c 	.word	0x20000d9c

08007194 <taskRT4>:
/**
  * @brief real time task
  * @param none
  * @retval None
  */
static void taskRT4(void){
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <task4>:
/**
  * @brief tack per 4ms
  * @param none
  * @retval None
  */
static void task4(void){
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
	console.RxPolling(&console.rsrc);
 80071a4:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <task4+0x24>)
 80071a6:	22a4      	movs	r2, #164	; 0xa4
 80071a8:	589b      	ldr	r3, [r3, r2]
 80071aa:	4a06      	ldr	r2, [pc, #24]	; (80071c4 <task4+0x24>)
 80071ac:	0010      	movs	r0, r2
 80071ae:	4798      	blx	r3
	rs485.RxPolling(&rs485.rsrc);
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <task4+0x28>)
 80071b2:	22d0      	movs	r2, #208	; 0xd0
 80071b4:	589b      	ldr	r3, [r3, r2]
 80071b6:	4a04      	ldr	r2, [pc, #16]	; (80071c8 <task4+0x28>)
 80071b8:	0010      	movs	r0, r2
 80071ba:	4798      	blx	r3
}
 80071bc:	46c0      	nop			; (mov r8, r8)
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	200007e0 	.word	0x200007e0
 80071c8:	20000d9c 	.word	0x20000d9c

080071cc <task8>:
/**
  * @brief tack per 8ms
  * @param none
  * @retval None
  */
static void task8(void){
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <commandFormat>:
/**
  * @brief tack per 16ms
  * @param none
  * @retval None
  */
static void commandFormat(char* buff, u16 len){
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	000a      	movs	r2, r1
 80071e0:	1cbb      	adds	r3, r7, #2
 80071e2:	801a      	strh	r2, [r3, #0]
	u16 i;
	for(i=0;i<len;i++){
 80071e4:	230e      	movs	r3, #14
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	2200      	movs	r2, #0
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e044      	b.n	8007278 <commandFormat+0xa2>
		if(buff[i] == 0)	break;
 80071ee:	210e      	movs	r1, #14
 80071f0:	187b      	adds	r3, r7, r1
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	18d3      	adds	r3, r2, r3
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d044      	beq.n	8007288 <commandFormat+0xb2>
		if(buff[i] == '(' || buff[i] == ')' || buff[i] == ',')	buff[i] = ' ';
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	18d3      	adds	r3, r2, r3
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b28      	cmp	r3, #40	; 0x28
 800720a:	d00d      	beq.n	8007228 <commandFormat+0x52>
 800720c:	187b      	adds	r3, r7, r1
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	18d3      	adds	r3, r2, r3
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b29      	cmp	r3, #41	; 0x29
 8007218:	d006      	beq.n	8007228 <commandFormat+0x52>
 800721a:	187b      	adds	r3, r7, r1
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	18d3      	adds	r3, r2, r3
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b2c      	cmp	r3, #44	; 0x2c
 8007226:	d106      	bne.n	8007236 <commandFormat+0x60>
 8007228:	230e      	movs	r3, #14
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	18d3      	adds	r3, r2, r3
 8007232:	2220      	movs	r2, #32
 8007234:	701a      	strb	r2, [r3, #0]
		if(buff[i] >= 'A' && buff[i] <= 'Z')	buff[i] += 32;
 8007236:	210e      	movs	r1, #14
 8007238:	187b      	adds	r3, r7, r1
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	18d3      	adds	r3, r2, r3
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d912      	bls.n	800726c <commandFormat+0x96>
 8007246:	187b      	adds	r3, r7, r1
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	18d3      	adds	r3, r2, r3
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b5a      	cmp	r3, #90	; 0x5a
 8007252:	d80b      	bhi.n	800726c <commandFormat+0x96>
 8007254:	187b      	adds	r3, r7, r1
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	18d3      	adds	r3, r2, r3
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	187b      	adds	r3, r7, r1
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	18cb      	adds	r3, r1, r3
 8007266:	3220      	adds	r2, #32
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<len;i++){
 800726c:	210e      	movs	r1, #14
 800726e:	187b      	adds	r3, r7, r1
 8007270:	881a      	ldrh	r2, [r3, #0]
 8007272:	187b      	adds	r3, r7, r1
 8007274:	3201      	adds	r2, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	230e      	movs	r3, #14
 800727a:	18fa      	adds	r2, r7, r3
 800727c:	1cbb      	adds	r3, r7, #2
 800727e:	8812      	ldrh	r2, [r2, #0]
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d3b3      	bcc.n	80071ee <commandFormat+0x18>
	}
}
 8007286:	e000      	b.n	800728a <commandFormat+0xb4>
		if(buff[i] == 0)	break;
 8007288:	46c0      	nop			; (mov r8, r8)
}
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	46bd      	mov	sp, r7
 800728e:	b004      	add	sp, #16
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <doCommand>:

static u8 doCommand(char* buff, u16 len,
		void (*xprintS)(const char* MSG),
		void (*xprint)(const char* FORMAT_ORG, ...),
		void (*forward)(const char* MSG)){
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	230a      	movs	r3, #10
 80072a2:	18fb      	adds	r3, r7, r3
 80072a4:	1c0a      	adds	r2, r1, #0
 80072a6:	801a      	strh	r2, [r3, #0]
	s32 i;
	char *CMD;
	if(buff==NULL)	return 0;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <doCommand+0x1e>
 80072ae:	2300      	movs	r3, #0
 80072b0:	e079      	b.n	80073a6 <doCommand+0x112>
	//message from uart
	if(sscanf(buff, "%d.", &i)<=0){
 80072b2:	2310      	movs	r3, #16
 80072b4:	18fa      	adds	r2, r7, r3
 80072b6:	493e      	ldr	r1, [pc, #248]	; (80073b0 <doCommand+0x11c>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	0018      	movs	r0, r3
 80072bc:	f000 fe32 	bl	8007f24 <siscanf>
 80072c0:	1e03      	subs	r3, r0, #0
 80072c2:	dc25      	bgt.n	8007310 <doCommand+0x7c>
		if(strncmp(buff, "help", strlen("help")) == 0){
 80072c4:	493b      	ldr	r1, [pc, #236]	; (80073b4 <doCommand+0x120>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2204      	movs	r2, #4
 80072ca:	0018      	movs	r0, r3
 80072cc:	f000 fe54 	bl	8007f78 <strncmp>
 80072d0:	1e03      	subs	r3, r0, #0
 80072d2:	d107      	bne.n	80072e4 <doCommand+0x50>
			printHelp(boardAddr,xprint);
 80072d4:	4b38      	ldr	r3, [pc, #224]	; (80073b8 <doCommand+0x124>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	0011      	movs	r1, r2
 80072dc:	0018      	movs	r0, r3
 80072de:	f7fd fef5 	bl	80050cc <printHelp>
 80072e2:	e05f      	b.n	80073a4 <doCommand+0x110>
		}
		else if(strncmp(buff, "about", strlen("about")) == 0){
 80072e4:	4935      	ldr	r1, [pc, #212]	; (80073bc <doCommand+0x128>)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2205      	movs	r2, #5
 80072ea:	0018      	movs	r0, r3
 80072ec:	f000 fe44 	bl	8007f78 <strncmp>
 80072f0:	1e03      	subs	r3, r0, #0
 80072f2:	d107      	bne.n	8007304 <doCommand+0x70>
			xprint("+ok@about(%d,\"%s\")\r\n", boardAddr, ABOUT);
 80072f4:	4b30      	ldr	r3, [pc, #192]	; (80073b8 <doCommand+0x124>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	0019      	movs	r1, r3
 80072fa:	4a31      	ldr	r2, [pc, #196]	; (80073c0 <doCommand+0x12c>)
 80072fc:	4831      	ldr	r0, [pc, #196]	; (80073c4 <doCommand+0x130>)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	4798      	blx	r3
 8007302:	e04f      	b.n	80073a4 <doCommand+0x110>
		}
		else{
			xprint("+unknown@%s", buff);
 8007304:	68f9      	ldr	r1, [r7, #12]
 8007306:	4a30      	ldr	r2, [pc, #192]	; (80073c8 <doCommand+0x134>)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	0010      	movs	r0, r2
 800730c:	4798      	blx	r3
 800730e:	e049      	b.n	80073a4 <doCommand+0x110>
		}
	}
	else if(sscanf(buff, "%d.", &i)==1){
 8007310:	2310      	movs	r3, #16
 8007312:	18fa      	adds	r2, r7, r3
 8007314:	4926      	ldr	r1, [pc, #152]	; (80073b0 <doCommand+0x11c>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	0018      	movs	r0, r3
 800731a:	f000 fe03 	bl	8007f24 <siscanf>
 800731e:	0003      	movs	r3, r0
 8007320:	2b01      	cmp	r3, #1
 8007322:	d13f      	bne.n	80073a4 <doCommand+0x110>
		if(i == boardAddr){
 8007324:	4b24      	ldr	r3, [pc, #144]	; (80073b8 <doCommand+0x124>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	001a      	movs	r2, r3
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	429a      	cmp	r2, r3
 800732e:	d132      	bne.n	8007396 <doCommand+0x102>
			commandFormat(buff, len);
 8007330:	230a      	movs	r3, #10
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	881a      	ldrh	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	0011      	movs	r1, r2
 800733a:	0018      	movs	r0, r3
 800733c:	f7ff ff4b 	bl	80071d6 <commandFormat>
			CMD = (char*)buff + strlen(addrPre);
 8007340:	4b22      	ldr	r3, [pc, #136]	; (80073cc <doCommand+0x138>)
 8007342:	0018      	movs	r0, r3
 8007344:	f7f8 fedc 	bl	8000100 <strlen>
 8007348:	0002      	movs	r2, r0
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	189b      	adds	r3, r3, r2
 800734e:	617b      	str	r3, [r7, #20]
			if(brdCmd(CMD, boardAddr, xprint)){	}
 8007350:	4b19      	ldr	r3, [pc, #100]	; (80073b8 <doCommand+0x124>)
 8007352:	7819      	ldrb	r1, [r3, #0]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	0018      	movs	r0, r3
 800735a:	f7fd fee1 	bl	8005120 <brdCmd>
 800735e:	1e03      	subs	r3, r0, #0
 8007360:	d120      	bne.n	80073a4 <doCommand+0x110>
			else if(inputCmd(&inputDev, CMD, boardAddr, xprint)){	}
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <doCommand+0x124>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	001a      	movs	r2, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	4818      	ldr	r0, [pc, #96]	; (80073d0 <doCommand+0x13c>)
 800736e:	f7fe fd73 	bl	8005e58 <inputCmd>
 8007372:	1e03      	subs	r3, r0, #0
 8007374:	d116      	bne.n	80073a4 <doCommand+0x110>
			else if(outputCmd(&outputDev, CMD, boardAddr, xprint)){	}
 8007376:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <doCommand+0x124>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	001a      	movs	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	4814      	ldr	r0, [pc, #80]	; (80073d4 <doCommand+0x140>)
 8007382:	f7ff f8cd 	bl	8006520 <outputCmd>
 8007386:	1e03      	subs	r3, r0, #0
 8007388:	d10c      	bne.n	80073a4 <doCommand+0x110>
			else{		xprint("+unknown@%s", buff);	}
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	4a0e      	ldr	r2, [pc, #56]	; (80073c8 <doCommand+0x134>)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	0010      	movs	r0, r2
 8007392:	4798      	blx	r3
 8007394:	e006      	b.n	80073a4 <doCommand+0x110>
		}
		else{
			if(forward){
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <doCommand+0x110>
				forward((char*)buff);
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	0010      	movs	r0, r2
 80073a2:	4798      	blx	r3
			}
		}
	}
	return 1;
 80073a4:	2301      	movs	r3, #1
}
 80073a6:	0018      	movs	r0, r3
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b006      	add	sp, #24
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	08009984 	.word	0x08009984
 80073b4:	08009988 	.word	0x08009988
 80073b8:	200002dc 	.word	0x200002dc
 80073bc:	08009990 	.word	0x08009990
 80073c0:	08009a50 	.word	0x08009a50
 80073c4:	08009998 	.word	0x08009998
 80073c8:	080099b0 	.word	0x080099b0
 80073cc:	200002d8 	.word	0x200002d8
 80073d0:	20000e8c 	.word	0x20000e8c
 80073d4:	20000ec8 	.word	0x20000ec8

080073d8 <task16>:

#define MAX_LINE_LEN	MAX_CMD_LEN
static void task16(void)
{
 80073d8:	b590      	push	{r4, r7, lr}
 80073da:	4c31      	ldr	r4, [pc, #196]	; (80074a0 <task16+0xc8>)
 80073dc:	44a5      	add	sp, r4
 80073de:	af02      	add	r7, sp, #8
	u32 len;
	char buff[MAX_LINE_LEN] = {0};
 80073e0:	4b30      	ldr	r3, [pc, #192]	; (80074a4 <task16+0xcc>)
 80073e2:	2282      	movs	r2, #130	; 0x82
 80073e4:	0092      	lsls	r2, r2, #2
 80073e6:	189b      	adds	r3, r3, r2
 80073e8:	19db      	adds	r3, r3, r7
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	3304      	adds	r3, #4
 80073f0:	22fe      	movs	r2, #254	; 0xfe
 80073f2:	0052      	lsls	r2, r2, #1
 80073f4:	2100      	movs	r1, #0
 80073f6:	0018      	movs	r0, r3
 80073f8:	f000 fd8c 	bl	8007f14 <memset>
	char *CMD;

	HAL_IWDG_Refresh(&hiwdg);
 80073fc:	4b2a      	ldr	r3, [pc, #168]	; (80074a8 <task16+0xd0>)
 80073fe:	0018      	movs	r0, r3
 8007400:	f7fa fa9c 	bl	800193c <HAL_IWDG_Refresh>
	//message from uart
	if(fetchLineFromRingBuffer(&console.rsrc.rxRB, (char*)buff, MAX_LINE_LEN)){
 8007404:	2380      	movs	r3, #128	; 0x80
 8007406:	009a      	lsls	r2, r3, #2
 8007408:	1d39      	adds	r1, r7, #4
 800740a:	4b28      	ldr	r3, [pc, #160]	; (80074ac <task16+0xd4>)
 800740c:	0018      	movs	r0, r3
 800740e:	f000 fadf 	bl	80079d0 <fetchLineFromRingBuffer>
 8007412:	1e03      	subs	r3, r0, #0
 8007414:	d009      	beq.n	800742a <task16+0x52>
		doCommand(buff, MAX_LINE_LEN, printS, print, printS485);
 8007416:	4c26      	ldr	r4, [pc, #152]	; (80074b0 <task16+0xd8>)
 8007418:	4a26      	ldr	r2, [pc, #152]	; (80074b4 <task16+0xdc>)
 800741a:	2380      	movs	r3, #128	; 0x80
 800741c:	0099      	lsls	r1, r3, #2
 800741e:	1d38      	adds	r0, r7, #4
 8007420:	4b25      	ldr	r3, [pc, #148]	; (80074b8 <task16+0xe0>)
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	0023      	movs	r3, r4
 8007426:	f7ff ff35 	bl	8007294 <doCommand>
	}

	//message from rs485
	memset(buff,0,MAX_LINE_LEN);
 800742a:	2380      	movs	r3, #128	; 0x80
 800742c:	009a      	lsls	r2, r3, #2
 800742e:	1d3b      	adds	r3, r7, #4
 8007430:	2100      	movs	r1, #0
 8007432:	0018      	movs	r0, r3
 8007434:	f000 fd6e 	bl	8007f14 <memset>
	len = rs485.RxFetchFrame(&rs485.rsrc, (u8*)buff, MAX_LINE_LEN);
 8007438:	4b20      	ldr	r3, [pc, #128]	; (80074bc <task16+0xe4>)
 800743a:	22d4      	movs	r2, #212	; 0xd4
 800743c:	589b      	ldr	r3, [r3, r2]
 800743e:	2280      	movs	r2, #128	; 0x80
 8007440:	0092      	lsls	r2, r2, #2
 8007442:	1d39      	adds	r1, r7, #4
 8007444:	481d      	ldr	r0, [pc, #116]	; (80074bc <task16+0xe4>)
 8007446:	4798      	blx	r3
 8007448:	0003      	movs	r3, r0
 800744a:	2281      	movs	r2, #129	; 0x81
 800744c:	0092      	lsls	r2, r2, #2
 800744e:	18b9      	adds	r1, r7, r2
 8007450:	600b      	str	r3, [r1, #0]
	if(len>0){
 8007452:	18bb      	adds	r3, r7, r2
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d015      	beq.n	8007486 <task16+0xae>
		if(buff[0] == '+'){
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <task16+0xcc>)
 800745c:	2282      	movs	r2, #130	; 0x82
 800745e:	0092      	lsls	r2, r2, #2
 8007460:	189b      	adds	r3, r3, r2
 8007462:	19db      	adds	r3, r3, r7
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b2b      	cmp	r3, #43	; 0x2b
 8007468:	d104      	bne.n	8007474 <task16+0x9c>
			printS(buff);	// message begins with '+', it means message is from bus
 800746a:	1d3b      	adds	r3, r7, #4
 800746c:	0018      	movs	r0, r3
 800746e:	f7fd fc59 	bl	8004d24 <printS>
 8007472:	e008      	b.n	8007486 <task16+0xae>
		}
		else{
			doCommand(buff, MAX_LINE_LEN, printS485, print485, NULL);
 8007474:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <task16+0xe8>)
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <task16+0xe0>)
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	0089      	lsls	r1, r1, #2
 800747c:	1d38      	adds	r0, r7, #4
 800747e:	2400      	movs	r4, #0
 8007480:	9400      	str	r4, [sp, #0]
 8007482:	f7ff ff07 	bl	8007294 <doCommand>
		}
	}

	inputDev.Polling(&inputDev.rsrc, 16);
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <task16+0xec>)
 8007488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748a:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <task16+0xec>)
 800748c:	2110      	movs	r1, #16
 800748e:	0010      	movs	r0, r2
 8007490:	4798      	blx	r3
}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	46bd      	mov	sp, r7
 8007496:	2383      	movs	r3, #131	; 0x83
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	449d      	add	sp, r3
 800749c:	bd90      	pop	{r4, r7, pc}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	fffffdec 	.word	0xfffffdec
 80074a4:	fffffdfc 	.word	0xfffffdfc
 80074a8:	20000118 	.word	0x20000118
 80074ac:	200007f8 	.word	0x200007f8
 80074b0:	08004d55 	.word	0x08004d55
 80074b4:	08004d25 	.word	0x08004d25
 80074b8:	08004de1 	.word	0x08004de1
 80074bc:	20000d9c 	.word	0x20000d9c
 80074c0:	08004e11 	.word	0x08004e11
 80074c4:	20000e8c 	.word	0x20000e8c

080074c8 <task32>:
/**
  * @brief task per 32ms
  * @param none
  * @retval none
  */
static void task32(void){
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
}
 80074cc:	46c0      	nop			; (mov r8, r8)
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <task64>:
/**
  * @brief tack per 64ms
  * @param none
  * @retval None
  */
static void task64(void){
 80074d2:	b580      	push	{r7, lr}
 80074d4:	af00      	add	r7, sp, #0
}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <task128>:
/**
  * @brief tack per 128ms
  * @param none
  * @retval None
  */
static void task128(void){
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RUNNING.GPIOx, RUNNING.GPIO_Pin);
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <task128+0x1c>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <task128+0x1c>)
 80074e6:	889b      	ldrh	r3, [r3, #4]
 80074e8:	0019      	movs	r1, r3
 80074ea:	0010      	movs	r0, r2
 80074ec:	f7fa f9b8 	bl	8001860 <HAL_GPIO_TogglePin>
}
 80074f0:	46c0      	nop			; (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	08009b70 	.word	0x08009b70

080074fc <RingBuffer_Flush>:
 * @brief	Resets the ring buffer to empty
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
static inline void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	RingBuff->head = RingBuff->tail = 0;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	611a      	str	r2, [r3, #16]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]
}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	46bd      	mov	sp, r7
 8007516:	b002      	add	sp, #8
 8007518:	bd80      	pop	{r7, pc}

0800751a <RingBuffer_GetCount>:
 * @brief	Return number of items in the ring buffer
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
static inline int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	330c      	adds	r3, #12
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3310      	adds	r3, #16
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	1ad3      	subs	r3, r2, r3
}
 8007530:	0018      	movs	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	b002      	add	sp, #8
 8007536:	bd80      	pop	{r7, pc}

08007538 <RingBuffer_GetFree>:
 * @brief	Return number of free items in the ring buffer
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of free items in the ring buffer
 */
static inline int RingBuffer_GetFree(RINGBUFF_T *RingBuff)
{
 8007538:	b590      	push	{r4, r7, lr}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	return RingBuff->count - RingBuffer_GetCount(RingBuff);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685c      	ldr	r4, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	0018      	movs	r0, r3
 8007548:	f7ff ffe7 	bl	800751a <RingBuffer_GetCount>
 800754c:	0003      	movs	r3, r0
 800754e:	1ae3      	subs	r3, r4, r3
}
 8007550:	0018      	movs	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	b003      	add	sp, #12
 8007556:	bd90      	pop	{r4, r7, pc}

08007558 <RingBuffer_IsEmpty>:
 * @brief	Return empty status of ring buffer
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
static inline int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	330c      	adds	r3, #12
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3310      	adds	r3, #16
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	425a      	negs	r2, r3
 8007570:	4153      	adcs	r3, r2
 8007572:	b2db      	uxtb	r3, r3
}
 8007574:	0018      	movs	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	b002      	add	sp, #8
 800757a:	bd80      	pop	{r7, pc}

0800757c <setupUartDev>:
	UartDev_t *pDev, 
	UART_HandleTypeDef* huart,
	u8* txPool, u16 txPoolLen,
	u8* rxPool,	u16	rxPoolLen,
	u8* rxDoubleBuff,	u16 rxBufLen
){
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	001a      	movs	r2, r3
 800758a:	1cbb      	adds	r3, r7, #2
 800758c:	801a      	strh	r2, [r3, #0]
	UartRsrc_t *pRsrc = &pDev->rsrc;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	617b      	str	r3, [r7, #20]
	pRsrc->huart = huart;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	601a      	str	r2, [r3, #0]
	
	pRsrc->rxPool = rxPool;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	6a3a      	ldr	r2, [r7, #32]
 800759c:	62da      	str	r2, [r3, #44]	; 0x2c
	pRsrc->rxPoolLen = rxPoolLen;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2224      	movs	r2, #36	; 0x24
 80075a2:	18ba      	adds	r2, r7, r2
 80075a4:	2140      	movs	r1, #64	; 0x40
 80075a6:	8812      	ldrh	r2, [r2, #0]
 80075a8:	525a      	strh	r2, [r3, r1]
	
	pRsrc->rxBuf0 = rxDoubleBuff;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
	pRsrc->rxBuf1 = rxDoubleBuff + rxBufLen;
 80075b0:	212c      	movs	r1, #44	; 0x2c
 80075b2:	187b      	adds	r3, r7, r1
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b8:	18d2      	adds	r2, r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	635a      	str	r2, [r3, #52]	; 0x34
	pRsrc->rxBufLen = rxBufLen;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	187a      	adds	r2, r7, r1
 80075c2:	2142      	movs	r1, #66	; 0x42
 80075c4:	8812      	ldrh	r2, [r2, #0]
 80075c6:	525a      	strh	r2, [r3, r1]
	
	pRsrc->txPool = txPool;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
	pRsrc->txPoolLen = txPoolLen;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	1cba      	adds	r2, r7, #2
 80075d2:	2148      	movs	r1, #72	; 0x48
 80075d4:	8812      	ldrh	r2, [r2, #0]
 80075d6:	525a      	strh	r2, [r3, r1]

	pRsrc->rxCurBuf = pRsrc->rxBuf0;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	639a      	str	r2, [r3, #56]	; 0x38
	pRsrc->rxNxtBuf = pRsrc->rxBuf1;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	63da      	str	r2, [r3, #60]	; 0x3c
	
	pRsrc->afterSend = NULL;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2294      	movs	r2, #148	; 0x94
 80075ec:	2100      	movs	r1, #0
 80075ee:	5099      	str	r1, [r3, r2]
	pRsrc->beforeSend = NULL;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2290      	movs	r2, #144	; 0x90
 80075f4:	2100      	movs	r1, #0
 80075f6:	5099      	str	r1, [r3, r2]
	
	//register op
	pDev->TxPolling = uartTxPolling;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	21a0      	movs	r1, #160	; 0xa0
 80075fc:	4a18      	ldr	r2, [pc, #96]	; (8007660 <setupUartDev+0xe4>)
 80075fe:	505a      	str	r2, [r3, r1]
	pDev->RxPolling = uartRxMonitor;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	21a4      	movs	r1, #164	; 0xa4
 8007604:	4a17      	ldr	r2, [pc, #92]	; (8007664 <setupUartDev+0xe8>)
 8007606:	505a      	str	r2, [r3, r1]
	pDev->RxFetchLine = uartRxFetchLine;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	21a8      	movs	r1, #168	; 0xa8
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <setupUartDev+0xec>)
 800760e:	505a      	str	r2, [r3, r1]
	pDev->RxFetchFrame = uartRxFetchFrame;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	21ac      	movs	r1, #172	; 0xac
 8007614:	4a15      	ldr	r2, [pc, #84]	; (800766c <setupUartDev+0xf0>)
 8007616:	505a      	str	r2, [r3, r1]
	
	pDev->TxSendFrame = uartTxSendFrame;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	21b4      	movs	r1, #180	; 0xb4
 800761c:	4a14      	ldr	r2, [pc, #80]	; (8007670 <setupUartDev+0xf4>)
 800761e:	505a      	str	r2, [r3, r1]
	pDev->Send = uartSend;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	21b0      	movs	r1, #176	; 0xb0
 8007624:	4a13      	ldr	r2, [pc, #76]	; (8007674 <setupUartDev+0xf8>)
 8007626:	505a      	str	r2, [r3, r1]
	pDev->TJC_Send = TjcSendCmd;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	21b8      	movs	r1, #184	; 0xb8
 800762c:	4a12      	ldr	r2, [pc, #72]	; (8007678 <setupUartDev+0xfc>)
 800762e:	505a      	str	r2, [r3, r1]
	pDev->SendSync = uartSendSync;
	pDev->SendStr = uartTxSendString;
	pDev->SendStrSync = uartTxSendStringSync;
#endif

	pDev->StartRcv = uartStartRecv;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2198      	movs	r1, #152	; 0x98
 8007634:	4a11      	ldr	r2, [pc, #68]	; (800767c <setupUartDev+0x100>)
 8007636:	505a      	str	r2, [r3, r1]
	pDev->TestRestartRcv = uartTestRestartRecv;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	219c      	movs	r1, #156	; 0x9c
 800763c:	4a10      	ldr	r2, [pc, #64]	; (8007680 <setupUartDev+0x104>)
 800763e:	505a      	str	r2, [r3, r1]
	
	RingBuffer_Init(&pRsrc->txRB, pRsrc->txPool, 1, pRsrc->txPoolLen);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	1d18      	adds	r0, r3, #4
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2248      	movs	r2, #72	; 0x48
 800764c:	5a9b      	ldrh	r3, [r3, r2]
 800764e:	b29b      	uxth	r3, r3
 8007650:	2201      	movs	r2, #1
 8007652:	f7ff fa6b 	bl	8006b2c <RingBuffer_Init>
}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	46bd      	mov	sp, r7
 800765a:	b006      	add	sp, #24
 800765c:	bd80      	pop	{r7, pc}
 800765e:	46c0      	nop			; (mov r8, r8)
 8007660:	0800773b 	.word	0x0800773b
 8007664:	080078e9 	.word	0x080078e9
 8007668:	08007b39 	.word	0x08007b39
 800766c:	08007b65 	.word	0x08007b65
 8007670:	08007839 	.word	0x08007839
 8007674:	080077bf 	.word	0x080077bf
 8007678:	08007dcd 	.word	0x08007dcd
 800767c:	08007685 	.word	0x08007685
 8007680:	08007705 	.word	0x08007705

08007684 <uartStartRecv>:

static void uartStartRecv(UartRsrc_t *pRsrc){
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	memset(pRsrc->rxBuf0,0,pRsrc->rxBufLen*2);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2242      	movs	r2, #66	; 0x42
 8007694:	5a9b      	ldrh	r3, [r3, r2]
 8007696:	b29b      	uxth	r3, r3
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	001a      	movs	r2, r3
 800769c:	2100      	movs	r1, #0
 800769e:	f000 fc39 	bl	8007f14 <memset>
	memset(pRsrc->rxPool,0,pRsrc->rxPoolLen);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2240      	movs	r2, #64	; 0x40
 80076aa:	5a9b      	ldrh	r3, [r3, r2]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	001a      	movs	r2, r3
 80076b0:	2100      	movs	r1, #0
 80076b2:	f000 fc2f 	bl	8007f14 <memset>
	RingBuffer_Init(&pRsrc->rxRB, pRsrc->rxPool, 1, pRsrc->rxPoolLen);	
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3318      	adds	r3, #24
 80076ba:	0018      	movs	r0, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2240      	movs	r2, #64	; 0x40
 80076c4:	5a9b      	ldrh	r3, [r3, r2]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2201      	movs	r2, #1
 80076ca:	f7ff fa2f 	bl	8006b2c <RingBuffer_Init>
	pRsrc->rxCurBuf = pRsrc->rxBuf0;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
	pRsrc->rxNxtBuf = pRsrc->rxBuf1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	63da      	str	r2, [r3, #60]	; 0x3c
	while(HAL_UART_Receive_IT(pRsrc->huart, pRsrc->rxCurBuf, pRsrc->rxBufLen) != HAL_OK){
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2242      	movs	r2, #66	; 0x42
 80076ec:	5a9b      	ldrh	r3, [r3, r2]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	001a      	movs	r2, r3
 80076f2:	f7fb f915 	bl	8002920 <HAL_UART_Receive_IT>
 80076f6:	1e03      	subs	r3, r0, #0
 80076f8:	d1f2      	bne.n	80076e0 <uartStartRecv+0x5c>
	}
}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	46c0      	nop			; (mov r8, r8)
 80076fe:	46bd      	mov	sp, r7
 8007700:	b002      	add	sp, #8
 8007702:	bd80      	pop	{r7, pc}

08007704 <uartTestRestartRecv>:

static u8 uartTestRestartRecv(UartRsrc_t *pRsrc){
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	// auto start and restart
	if((pRsrc->huart->RxState & BIT(1)) == 0){
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	228c      	movs	r2, #140	; 0x8c
 8007712:	589b      	ldr	r3, [r3, r2]
 8007714:	2202      	movs	r2, #2
 8007716:	4013      	ands	r3, r2
 8007718:	d10a      	bne.n	8007730 <uartTestRestartRecv+0x2c>
		HAL_UART_AbortReceive_IT(pRsrc->huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	0018      	movs	r0, r3
 8007720:	f7fb f956 	bl	80029d0 <HAL_UART_AbortReceive_IT>
		uartStartRecv(pRsrc);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	0018      	movs	r0, r3
 8007728:	f7ff ffac 	bl	8007684 <uartStartRecv>
		return 1;
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <uartTestRestartRecv+0x2e>
	}
	return 0;
 8007730:	2300      	movs	r3, #0
}
 8007732:	0018      	movs	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	b002      	add	sp, #8
 8007738:	bd80      	pop	{r7, pc}

0800773a <uartTxPolling>:

static u16 uartTxPolling(UartRsrc_t *pRsrc){
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
	s32 bytes;
	
	if(RingBuffer_IsEmpty(&pRsrc->txRB))	return 0;	
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3304      	adds	r3, #4
 8007746:	0018      	movs	r0, r3
 8007748:	f7ff ff06 	bl	8007558 <RingBuffer_IsEmpty>
 800774c:	1e03      	subs	r3, r0, #0
 800774e:	d001      	beq.n	8007754 <uartTxPolling+0x1a>
 8007750:	2300      	movs	r3, #0
 8007752:	e030      	b.n	80077b6 <uartTxPolling+0x7c>
	if(pRsrc->huart->gState & BIT(0))	return 0;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2288      	movs	r2, #136	; 0x88
 800775a:	589b      	ldr	r3, [r3, r2]
 800775c:	2201      	movs	r2, #1
 800775e:	4013      	ands	r3, r2
 8007760:	d001      	beq.n	8007766 <uartTxPolling+0x2c>
 8007762:	2300      	movs	r3, #0
 8007764:	e027      	b.n	80077b6 <uartTxPolling+0x7c>
	if(pRsrc->beforeSend && pRsrc->beforeSend()<0)	return 0;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2290      	movs	r2, #144	; 0x90
 800776a:	589b      	ldr	r3, [r3, r2]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <uartTxPolling+0x46>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2290      	movs	r2, #144	; 0x90
 8007774:	589b      	ldr	r3, [r3, r2]
 8007776:	4798      	blx	r3
 8007778:	1e03      	subs	r3, r0, #0
 800777a:	da01      	bge.n	8007780 <uartTxPolling+0x46>
 800777c:	2300      	movs	r3, #0
 800777e:	e01a      	b.n	80077b6 <uartTxPolling+0x7c>
	
	bytes = RingBuffer_PopMult(&pRsrc->txRB, (u8*)pRsrc->txBuff, UART_TX_BUFF_LEN);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	1d18      	adds	r0, r3, #4
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3350      	adds	r3, #80	; 0x50
 8007788:	2240      	movs	r2, #64	; 0x40
 800778a:	0019      	movs	r1, r3
 800778c:	f7ff faa8 	bl	8006ce0 <RingBuffer_PopMult>
 8007790:	0003      	movs	r3, r0
 8007792:	60fb      	str	r3, [r7, #12]
	
	if(bytes>0){
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	dd0b      	ble.n	80077b2 <uartTxPolling+0x78>
		while(HAL_UART_Transmit_IT(pRsrc->huart, pRsrc->txBuff, bytes) != HAL_OK){}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3350      	adds	r3, #80	; 0x50
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	b292      	uxth	r2, r2
 80077a8:	0019      	movs	r1, r3
 80077aa:	f7fb f811 	bl	80027d0 <HAL_UART_Transmit_IT>
 80077ae:	1e03      	subs	r3, r0, #0
 80077b0:	d1f4      	bne.n	800779c <uartTxPolling+0x62>
	}
	return bytes;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	b29b      	uxth	r3, r3
}
 80077b6:	0018      	movs	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b004      	add	sp, #16
 80077bc:	bd80      	pop	{r7, pc}

080077be <uartSend>:

static s16 uartSend(UartRsrc_t *pRsrc, const u8* BUF, u16 len){
 80077be:	b590      	push	{r4, r7, lr}
 80077c0:	b087      	sub	sp, #28
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	1dbb      	adds	r3, r7, #6
 80077ca:	801a      	strh	r2, [r3, #0]
	u16 sentBytes;
	if(BUF == NULL || len==0)	return 0;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <uartSend+0x1c>
 80077d2:	1dbb      	adds	r3, r7, #6
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <uartSend+0x20>
 80077da:	2300      	movs	r3, #0
 80077dc:	e028      	b.n	8007830 <uartSend+0x72>
	for(sentBytes = 0; sentBytes < len; ){
 80077de:	2316      	movs	r3, #22
 80077e0:	18fb      	adds	r3, r7, r3
 80077e2:	2200      	movs	r2, #0
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	e019      	b.n	800781c <uartSend+0x5e>
		sentBytes += RingBuffer_InsertMult(&pRsrc->txRB, (void*)&BUF[sentBytes], len-sentBytes);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	1d18      	adds	r0, r3, #4
 80077ec:	2416      	movs	r4, #22
 80077ee:	193b      	adds	r3, r7, r4
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	18d1      	adds	r1, r2, r3
 80077f6:	1dbb      	adds	r3, r7, #6
 80077f8:	881a      	ldrh	r2, [r3, #0]
 80077fa:	193b      	adds	r3, r7, r4
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	001a      	movs	r2, r3
 8007802:	f7ff f9af 	bl	8006b64 <RingBuffer_InsertMult>
 8007806:	0003      	movs	r3, r0
 8007808:	b299      	uxth	r1, r3
 800780a:	193b      	adds	r3, r7, r4
 800780c:	193a      	adds	r2, r7, r4
 800780e:	8812      	ldrh	r2, [r2, #0]
 8007810:	188a      	adds	r2, r1, r2
 8007812:	801a      	strh	r2, [r3, #0]
		uartTxPolling(pRsrc);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	0018      	movs	r0, r3
 8007818:	f7ff ff8f 	bl	800773a <uartTxPolling>
	for(sentBytes = 0; sentBytes < len; ){
 800781c:	2116      	movs	r1, #22
 800781e:	187a      	adds	r2, r7, r1
 8007820:	1dbb      	adds	r3, r7, #6
 8007822:	8812      	ldrh	r2, [r2, #0]
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d3de      	bcc.n	80077e8 <uartSend+0x2a>
	}
	return sentBytes;
 800782a:	187b      	adds	r3, r7, r1
 800782c:	2200      	movs	r2, #0
 800782e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8007830:	0018      	movs	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	b007      	add	sp, #28
 8007836:	bd90      	pop	{r4, r7, pc}

08007838 <uartTxSendFrame>:
	
	uartSendSync(pRsrc, (u8*)buff, bytes);
}
#endif

static u16 uartTxSendFrame(UartRsrc_t *pRsrc, const u8* BUF, u16 len){
 8007838:	b5b0      	push	{r4, r5, r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	1dbb      	adds	r3, r7, #6
 8007844:	801a      	strh	r2, [r3, #0]
	u16 crc;
	u8 buff[5];
	
	if(BUF == NULL || len==0)	return 0;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <uartTxSendFrame+0x1c>
 800784c:	1dbb      	adds	r3, r7, #6
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <uartTxSendFrame+0x20>
 8007854:	2300      	movs	r3, #0
 8007856:	e041      	b.n	80078dc <uartTxSendFrame+0xa4>

	crc = CRC16(BUF, len, 0xacca);
 8007858:	1dbb      	adds	r3, r7, #6
 800785a:	8819      	ldrh	r1, [r3, #0]
 800785c:	2516      	movs	r5, #22
 800785e:	197c      	adds	r4, r7, r5
 8007860:	4a20      	ldr	r2, [pc, #128]	; (80078e4 <uartTxSendFrame+0xac>)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	0018      	movs	r0, r3
 8007866:	f7ff f8a5 	bl	80069b4 <CRC16>
 800786a:	0003      	movs	r3, r0
 800786c:	8023      	strh	r3, [r4, #0]
	buff[0] = UART_FRAM_HEAD&0xff;
 800786e:	2410      	movs	r4, #16
 8007870:	193b      	adds	r3, r7, r4
 8007872:	22ba      	movs	r2, #186	; 0xba
 8007874:	701a      	strb	r2, [r3, #0]
	buff[1] = (UART_FRAM_HEAD>>8)&0xff;	
 8007876:	193b      	adds	r3, r7, r4
 8007878:	2298      	movs	r2, #152	; 0x98
 800787a:	705a      	strb	r2, [r3, #1]
	buff[2] = (UART_FRAM_HEAD>>16)&0xff;
 800787c:	193b      	adds	r3, r7, r4
 800787e:	22ed      	movs	r2, #237	; 0xed
 8007880:	709a      	strb	r2, [r3, #2]
	uartSend(pRsrc, buff, 3);
 8007882:	1939      	adds	r1, r7, r4
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2203      	movs	r2, #3
 8007888:	0018      	movs	r0, r3
 800788a:	f7ff ff98 	bl	80077be <uartSend>
	uartSend(pRsrc, BUF, len);
 800788e:	1dbb      	adds	r3, r7, #6
 8007890:	881a      	ldrh	r2, [r3, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	0018      	movs	r0, r3
 8007898:	f7ff ff91 	bl	80077be <uartSend>
	buff[0] = crc & 0xff;
 800789c:	197b      	adds	r3, r7, r5
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	0021      	movs	r1, r4
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	701a      	strb	r2, [r3, #0]
	buff[1] = (crc>>8) & 0xff;
 80078a8:	197b      	adds	r3, r7, r5
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	0a1b      	lsrs	r3, r3, #8
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	705a      	strb	r2, [r3, #1]
	buff[2] = UART_FRAM_END&0xff;
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	22cd      	movs	r2, #205	; 0xcd
 80078ba:	709a      	strb	r2, [r3, #2]
	buff[3] = (UART_FRAM_END>>8)&0xff;
 80078bc:	187b      	adds	r3, r7, r1
 80078be:	22ab      	movs	r2, #171	; 0xab
 80078c0:	70da      	strb	r2, [r3, #3]
	buff[4] = (UART_FRAM_END>>16)&0xff;
 80078c2:	187b      	adds	r3, r7, r1
 80078c4:	2289      	movs	r2, #137	; 0x89
 80078c6:	711a      	strb	r2, [r3, #4]
	uartSend(pRsrc, buff, 5);
 80078c8:	1879      	adds	r1, r7, r1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2205      	movs	r2, #5
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7ff ff75 	bl	80077be <uartSend>

	return (len+8);
 80078d4:	1dbb      	adds	r3, r7, #6
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	b29b      	uxth	r3, r3
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b006      	add	sp, #24
 80078e2:	bdb0      	pop	{r4, r5, r7, pc}
 80078e4:	0000acca 	.word	0x0000acca

080078e8 <uartRxMonitor>:

static u8 uartRxMonitor(UartRsrc_t *pRsrc){
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	s16 bytesReceived;
	u8* pTmp, abandond;
	UART_HandleTypeDef *huart = pRsrc->huart;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	617b      	str	r3, [r7, #20]

  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE|UART_IT_PE);
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4932      	ldr	r1, [pc, #200]	; (80079cc <uartRxMonitor+0xe4>)
 8007902:	400a      	ands	r2, r1
 8007904:	601a      	str	r2, [r3, #0]
	bytesReceived = huart->RxXferSize - huart->RxXferCount;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	225c      	movs	r2, #92	; 0x5c
 800790a:	5a9a      	ldrh	r2, [r3, r2]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	215e      	movs	r1, #94	; 0x5e
 8007910:	5a5b      	ldrh	r3, [r3, r1]
 8007912:	b29b      	uxth	r3, r3
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	b29a      	uxth	r2, r3
 8007918:	2112      	movs	r1, #18
 800791a:	187b      	adds	r3, r7, r1
 800791c:	801a      	strh	r2, [r3, #0]
	if(bytesReceived > 0){
 800791e:	187b      	adds	r3, r7, r1
 8007920:	2200      	movs	r2, #0
 8007922:	5e9b      	ldrsh	r3, [r3, r2]
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd0a      	ble.n	800793e <uartRxMonitor+0x56>
		//restart uart
		huart->pRxBuffPtr = pRsrc->rxNxtBuf;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	659a      	str	r2, [r3, #88]	; 0x58
		huart->RxXferCount = pRsrc->rxBufLen;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2242      	movs	r2, #66	; 0x42
 8007934:	5a9b      	ldrh	r3, [r3, r2]
 8007936:	b299      	uxth	r1, r3
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	225e      	movs	r2, #94	; 0x5e
 800793c:	5299      	strh	r1, [r3, r2]
	}
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE|UART_IT_PE);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2180      	movs	r1, #128	; 0x80
 800794a:	0189      	lsls	r1, r1, #6
 800794c:	430a      	orrs	r2, r1
 800794e:	601a      	str	r2, [r3, #0]

	if(bytesReceived <= 0)	return 0;
 8007950:	2312      	movs	r3, #18
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	2200      	movs	r2, #0
 8007956:	5e9b      	ldrsh	r3, [r3, r2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc0f      	bgt.n	800797c <uartRxMonitor+0x94>
 800795c:	2300      	movs	r3, #0
 800795e:	e031      	b.n	80079c4 <uartRxMonitor+0xdc>
	
	// only keep the last received
	while(RingBuffer_GetFree(&pRsrc->rxRB) < bytesReceived){		
		RingBuffer_Pop(&pRsrc->rxRB, &abandond);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3318      	adds	r3, #24
 8007964:	220b      	movs	r2, #11
 8007966:	18ba      	adds	r2, r7, r2
 8007968:	0011      	movs	r1, r2
 800796a:	0018      	movs	r0, r3
 800796c:	f7ff f98a 	bl	8006c84 <RingBuffer_Pop>
		pRsrc->errorCode |= BIT(0);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007974:	2201      	movs	r2, #1
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	64da      	str	r2, [r3, #76]	; 0x4c
	while(RingBuffer_GetFree(&pRsrc->rxRB) < bytesReceived){		
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3318      	adds	r3, #24
 8007980:	0018      	movs	r0, r3
 8007982:	f7ff fdd9 	bl	8007538 <RingBuffer_GetFree>
 8007986:	0002      	movs	r2, r0
 8007988:	2412      	movs	r4, #18
 800798a:	193b      	adds	r3, r7, r4
 800798c:	2100      	movs	r1, #0
 800798e:	5e5b      	ldrsh	r3, [r3, r1]
 8007990:	429a      	cmp	r2, r3
 8007992:	dbe5      	blt.n	8007960 <uartRxMonitor+0x78>
	}
	RingBuffer_InsertMult(&pRsrc->rxRB, pRsrc->rxCurBuf, bytesReceived);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3318      	adds	r3, #24
 8007998:	0018      	movs	r0, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800799e:	193b      	adds	r3, r7, r4
 80079a0:	2200      	movs	r2, #0
 80079a2:	5e9b      	ldrsh	r3, [r3, r2]
 80079a4:	001a      	movs	r2, r3
 80079a6:	f7ff f8dd 	bl	8006b64 <RingBuffer_InsertMult>
	
	pTmp = pRsrc->rxCurBuf;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	60fb      	str	r3, [r7, #12]
	pRsrc->rxCurBuf = pRsrc->rxNxtBuf;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38
	pRsrc->rxNxtBuf = pTmp;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	63da      	str	r2, [r3, #60]	; 0x3c
	
	return (bytesReceived);
 80079be:	193b      	adds	r3, r7, r4
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b2db      	uxtb	r3, r3
}
 80079c4:	0018      	movs	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b007      	add	sp, #28
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	ffffdfff 	.word	0xffffdfff

080079d0 <fetchLineFromRingBuffer>:

u16 fetchLineFromRingBuffer(RINGBUFF_T* rb, char* line, u16 len){
 80079d0:	b590      	push	{r4, r7, lr}
 80079d2:	b08b      	sub	sp, #44	; 0x2c
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	1dbb      	adds	r3, r7, #6
 80079dc:	801a      	strh	r2, [r3, #0]
	u8 ret = 0;
 80079de:	2327      	movs	r3, #39	; 0x27
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
	char *p = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	623b      	str	r3, [r7, #32]
	s32 i,lineLen=0, bytes, count;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]
		
	count = RingBuffer_GetCount(rb);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7ff fd92 	bl	800751a <RingBuffer_GetCount>
 80079f6:	0003      	movs	r3, r0
 80079f8:	61bb      	str	r3, [r7, #24]
	if((count <= 0) || (line==NULL) || (len==0))	return 0;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd06      	ble.n	8007a0e <fetchLineFromRingBuffer+0x3e>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <fetchLineFromRingBuffer+0x3e>
 8007a06:	1dbb      	adds	r3, r7, #6
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10d      	bne.n	8007a2a <fetchLineFromRingBuffer+0x5a>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e08c      	b.n	8007b2c <fetchLineFromRingBuffer+0x15c>

	// only take the lase receive
	while(count > len){
		RingBuffer_Pop(rb, line);
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	0011      	movs	r1, r2
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f7ff f933 	bl	8006c84 <RingBuffer_Pop>
		count = RingBuffer_GetCount(rb);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	0018      	movs	r0, r3
 8007a22:	f7ff fd7a 	bl	800751a <RingBuffer_GetCount>
 8007a26:	0003      	movs	r3, r0
 8007a28:	61bb      	str	r3, [r7, #24]
	while(count > len){
 8007a2a:	1dbb      	adds	r3, r7, #6
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	dcee      	bgt.n	8007a12 <fetchLineFromRingBuffer+0x42>
	}
	bytes = RingBuffer_PopMult(rb, line, len);
 8007a34:	1dbb      	adds	r3, r7, #6
 8007a36:	881a      	ldrh	r2, [r3, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7ff f94f 	bl	8006ce0 <RingBuffer_PopMult>
 8007a42:	0003      	movs	r3, r0
 8007a44:	613b      	str	r3, [r7, #16]
	RingBuffer_Flush(rb);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	0018      	movs	r0, r3
 8007a4a:	f7ff fd57 	bl	80074fc <RingBuffer_Flush>

	// seek for end code
	for(i=0;i<bytes;i++){
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	e05a      	b.n	8007b0a <fetchLineFromRingBuffer+0x13a>
		p = strstr(&line[i], CMD_END);	//be careful!! p can be out off buff, because 'line' may not end with '\0'
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	18d3      	adds	r3, r2, r3
 8007a5a:	4a36      	ldr	r2, [pc, #216]	; (8007b34 <fetchLineFromRingBuffer+0x164>)
 8007a5c:	0011      	movs	r1, r2
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f000 fa9c 	bl	8007f9c <strstr>
 8007a64:	0003      	movs	r3, r0
 8007a66:	623b      	str	r3, [r7, #32]
		if(p){
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d04a      	beq.n	8007b04 <fetchLineFromRingBuffer+0x134>
			// test overfloat memory
			if(p > (line+bytes-strlen(CMD_END))){
 8007a6e:	693c      	ldr	r4, [r7, #16]
 8007a70:	4b30      	ldr	r3, [pc, #192]	; (8007b34 <fetchLineFromRingBuffer+0x164>)
 8007a72:	0018      	movs	r0, r3
 8007a74:	f7f8 fb44 	bl	8000100 <strlen>
 8007a78:	0003      	movs	r3, r0
 8007a7a:	1ae3      	subs	r3, r4, r3
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	18d3      	adds	r3, r2, r3
 8007a80:	6a3a      	ldr	r2, [r7, #32]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d902      	bls.n	8007a8c <fetchLineFromRingBuffer+0xbc>
				p = NULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	623b      	str	r3, [r7, #32]
				break;
 8007a8a:	e042      	b.n	8007b12 <fetchLineFromRingBuffer+0x142>
			}	
			lineLen = p-(char*)&line[i]+strlen(CMD_END);
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	18d3      	adds	r3, r2, r3
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	001c      	movs	r4, r3
 8007a98:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <fetchLineFromRingBuffer+0x164>)
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f7f8 fb30 	bl	8000100 <strlen>
 8007aa0:	0003      	movs	r3, r0
 8007aa2:	18e3      	adds	r3, r4, r3
 8007aa4:	617b      	str	r3, [r7, #20]
			count = bytes - (i+lineLen);
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	18d3      	adds	r3, r2, r3
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	61bb      	str	r3, [r7, #24]
			if(count > 0){
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dd0a      	ble.n	8007ace <fetchLineFromRingBuffer+0xfe>
				RingBuffer_InsertMult(rb, &line[i+lineLen], count);
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	18d3      	adds	r3, r2, r3
 8007abe:	001a      	movs	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	1899      	adds	r1, r3, r2
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7ff f84b 	bl	8006b64 <RingBuffer_InsertMult>
			}
			if(i>0){
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dd12      	ble.n	8007afa <fetchLineFromRingBuffer+0x12a>
				memmove(line, &line[i], (lineLen>len?len:lineLen));
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	18d1      	adds	r1, r2, r3
 8007ada:	1dbb      	adds	r3, r7, #6
 8007adc:	881a      	ldrh	r2, [r3, #0]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	dd00      	ble.n	8007ae6 <fetchLineFromRingBuffer+0x116>
 8007ae4:	0013      	movs	r3, r2
 8007ae6:	001a      	movs	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 f9ff 	bl	8007eee <memmove>
				line[lineLen] = 0;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	18d3      	adds	r3, r2, r3
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
			}
			ret = 1;
 8007afa:	2327      	movs	r3, #39	; 0x27
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
			break;
 8007b02:	e006      	b.n	8007b12 <fetchLineFromRingBuffer+0x142>
	for(i=0;i<bytes;i++){
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	3301      	adds	r3, #1
 8007b08:	61fb      	str	r3, [r7, #28]
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	dba0      	blt.n	8007a54 <fetchLineFromRingBuffer+0x84>
		}
	}
	
	if(p==NULL){	RingBuffer_InsertMult(rb, line, bytes);	}
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d105      	bne.n	8007b24 <fetchLineFromRingBuffer+0x154>
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7ff f820 	bl	8006b64 <RingBuffer_InsertMult>

	return ret;
 8007b24:	2327      	movs	r3, #39	; 0x27
 8007b26:	18fb      	adds	r3, r7, r3
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
}
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	b00b      	add	sp, #44	; 0x2c
 8007b32:	bd90      	pop	{r4, r7, pc}
 8007b34:	2000000c 	.word	0x2000000c

08007b38 <uartRxFetchLine>:


//better if len equ rxRB' pool len
static u16 uartRxFetchLine(UartRsrc_t *pRsrc, char* line, u16 len){
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	1dbb      	adds	r3, r7, #6
 8007b44:	801a      	strh	r2, [r3, #0]
	return(fetchLineFromRingBuffer(&pRsrc->rxRB, line, len));
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3318      	adds	r3, #24
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	1dbb      	adds	r3, r7, #6
 8007b4e:	881a      	ldrh	r2, [r3, #0]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	0019      	movs	r1, r3
 8007b54:	f7ff ff3c 	bl	80079d0 <fetchLineFromRingBuffer>
 8007b58:	0003      	movs	r3, r0
}
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	b004      	add	sp, #16
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <uartRxFetchFrame>:

static u16 uartRxFetchFrame(UartRsrc_t *pRsrc, u8* frame, u16 frameLen){
 8007b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b66:	b08d      	sub	sp, #52	; 0x34
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	1dbb      	adds	r3, r7, #6
 8007b70:	801a      	strh	r2, [r3, #0]
	u16 i,j,crc0,crc1;
	u8 *head, *end, *pCrc, *buff = frame;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	623b      	str	r3, [r7, #32]
	u16 len = 0;
 8007b76:	231e      	movs	r3, #30
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	801a      	strh	r2, [r3, #0]
	s16 bytes,count;
	
	if(RingBuffer_GetCount(&pRsrc->rxRB) < (3+2+3))	return 0;	// 3(head) + 2(CRC) + 3(end)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3318      	adds	r3, #24
 8007b82:	0018      	movs	r0, r3
 8007b84:	f7ff fcc9 	bl	800751a <RingBuffer_GetCount>
 8007b88:	0003      	movs	r3, r0
 8007b8a:	2b07      	cmp	r3, #7
 8007b8c:	dc01      	bgt.n	8007b92 <uartRxFetchFrame+0x2e>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e115      	b.n	8007dbe <uartRxFetchFrame+0x25a>
		
	bytes = RingBuffer_PopMult(&pRsrc->rxRB, buff, frameLen);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3318      	adds	r3, #24
 8007b96:	0018      	movs	r0, r3
 8007b98:	1dbb      	adds	r3, r7, #6
 8007b9a:	881a      	ldrh	r2, [r3, #0]
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	0019      	movs	r1, r3
 8007ba0:	f7ff f89e 	bl	8006ce0 <RingBuffer_PopMult>
 8007ba4:	0002      	movs	r2, r0
 8007ba6:	231c      	movs	r3, #28
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	801a      	strh	r2, [r3, #0]
	RingBuffer_Flush(&pRsrc->rxRB);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3318      	adds	r3, #24
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f7ff fca3 	bl	80074fc <RingBuffer_Flush>
	
	head = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	for(i=0;(i+2)<bytes;i++){
 8007bba:	232e      	movs	r3, #46	; 0x2e
 8007bbc:	18fb      	adds	r3, r7, r3
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	801a      	strh	r2, [r3, #0]
 8007bc2:	e029      	b.n	8007c18 <uartRxFetchFrame+0xb4>
		if(	(buff[i+0] == (UART_FRAM_HEAD & 0XFF)) &&
 8007bc4:	212e      	movs	r1, #46	; 0x2e
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	18d3      	adds	r3, r2, r3
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2bba      	cmp	r3, #186	; 0xba
 8007bd2:	d11b      	bne.n	8007c0c <uartRxFetchFrame+0xa8>
			(buff[i+1] == ((UART_FRAM_HEAD>>8) & 0XFF)) &&
 8007bd4:	187b      	adds	r3, r7, r1
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	18d3      	adds	r3, r2, r3
 8007bde:	781b      	ldrb	r3, [r3, #0]
		if(	(buff[i+0] == (UART_FRAM_HEAD & 0XFF)) &&
 8007be0:	2b98      	cmp	r3, #152	; 0x98
 8007be2:	d113      	bne.n	8007c0c <uartRxFetchFrame+0xa8>
			(buff[i+2] == ((UART_FRAM_HEAD>>16) & 0XFF))
 8007be4:	187b      	adds	r3, r7, r1
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	3302      	adds	r3, #2
 8007bea:	6a3a      	ldr	r2, [r7, #32]
 8007bec:	18d3      	adds	r3, r2, r3
 8007bee:	781b      	ldrb	r3, [r3, #0]
			(buff[i+1] == ((UART_FRAM_HEAD>>8) & 0XFF)) &&
 8007bf0:	2bed      	cmp	r3, #237	; 0xed
 8007bf2:	d10b      	bne.n	8007c0c <uartRxFetchFrame+0xa8>
		){
			head = &buff[i];
 8007bf4:	187b      	adds	r3, r7, r1
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	6a3a      	ldr	r2, [r7, #32]
 8007bfa:	18d3      	adds	r3, r2, r3
 8007bfc:	62bb      	str	r3, [r7, #40]	; 0x28
			j = i+3+2;
 8007bfe:	232c      	movs	r3, #44	; 0x2c
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	187a      	adds	r2, r7, r1
 8007c04:	8812      	ldrh	r2, [r2, #0]
 8007c06:	3205      	adds	r2, #5
 8007c08:	801a      	strh	r2, [r3, #0]
			break;
 8007c0a:	e00f      	b.n	8007c2c <uartRxFetchFrame+0xc8>
	for(i=0;(i+2)<bytes;i++){
 8007c0c:	212e      	movs	r1, #46	; 0x2e
 8007c0e:	187b      	adds	r3, r7, r1
 8007c10:	881a      	ldrh	r2, [r3, #0]
 8007c12:	187b      	adds	r3, r7, r1
 8007c14:	3201      	adds	r2, #1
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	232e      	movs	r3, #46	; 0x2e
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	1c9a      	adds	r2, r3, #2
 8007c20:	231c      	movs	r3, #28
 8007c22:	18fb      	adds	r3, r7, r3
 8007c24:	2100      	movs	r1, #0
 8007c26:	5e5b      	ldrsh	r3, [r3, r1]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	dbcb      	blt.n	8007bc4 <uartRxFetchFrame+0x60>
		}
	}
	// if do not meet head, just keep last 2 bytes, this two may be head beginning
	if(head==NULL){
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10c      	bne.n	8007c4c <uartRxFetchFrame+0xe8>
		RingBuffer_InsertMult(&pRsrc->rxRB, buff, bytes);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3318      	adds	r3, #24
 8007c36:	0018      	movs	r0, r3
 8007c38:	231c      	movs	r3, #28
 8007c3a:	18fb      	adds	r3, r7, r3
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	5e9a      	ldrsh	r2, [r3, r2]
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	0019      	movs	r1, r3
 8007c44:	f7fe ff8e 	bl	8006b64 <RingBuffer_InsertMult>
//		if(bytes > 2)	RingBuffer_InsertMult(&pRsrc->rxRB, &buff[bytes-2], 2);
//		else	RingBuffer_InsertMult(&pRsrc->rxRB, buff, bytes);
		return 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e0b8      	b.n	8007dbe <uartRxFetchFrame+0x25a>
	}
	
	end = NULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
	for(i=j;(i+2)<bytes;i++){
 8007c50:	232e      	movs	r3, #46	; 0x2e
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	222c      	movs	r2, #44	; 0x2c
 8007c56:	18ba      	adds	r2, r7, r2
 8007c58:	8812      	ldrh	r2, [r2, #0]
 8007c5a:	801a      	strh	r2, [r3, #0]
 8007c5c:	e023      	b.n	8007ca6 <uartRxFetchFrame+0x142>
		if(	(buff[i+0] == (UART_FRAM_END & 0XFF)) &&
 8007c5e:	212e      	movs	r1, #46	; 0x2e
 8007c60:	187b      	adds	r3, r7, r1
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	6a3a      	ldr	r2, [r7, #32]
 8007c66:	18d3      	adds	r3, r2, r3
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2bcd      	cmp	r3, #205	; 0xcd
 8007c6c:	d115      	bne.n	8007c9a <uartRxFetchFrame+0x136>
			(buff[i+1] == ((UART_FRAM_END>>8) & 0XFF)) &&
 8007c6e:	187b      	adds	r3, r7, r1
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	6a3a      	ldr	r2, [r7, #32]
 8007c76:	18d3      	adds	r3, r2, r3
 8007c78:	781b      	ldrb	r3, [r3, #0]
		if(	(buff[i+0] == (UART_FRAM_END & 0XFF)) &&
 8007c7a:	2bab      	cmp	r3, #171	; 0xab
 8007c7c:	d10d      	bne.n	8007c9a <uartRxFetchFrame+0x136>
			(buff[i+2] == ((UART_FRAM_END>>16) & 0XFF))
 8007c7e:	187b      	adds	r3, r7, r1
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	3302      	adds	r3, #2
 8007c84:	6a3a      	ldr	r2, [r7, #32]
 8007c86:	18d3      	adds	r3, r2, r3
 8007c88:	781b      	ldrb	r3, [r3, #0]
			(buff[i+1] == ((UART_FRAM_END>>8) & 0XFF)) &&
 8007c8a:	2b89      	cmp	r3, #137	; 0x89
 8007c8c:	d105      	bne.n	8007c9a <uartRxFetchFrame+0x136>
		){
			end = &buff[i];
 8007c8e:	187b      	adds	r3, r7, r1
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	6a3a      	ldr	r2, [r7, #32]
 8007c94:	18d3      	adds	r3, r2, r3
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8007c98:	e00f      	b.n	8007cba <uartRxFetchFrame+0x156>
	for(i=j;(i+2)<bytes;i++){
 8007c9a:	212e      	movs	r1, #46	; 0x2e
 8007c9c:	187b      	adds	r3, r7, r1
 8007c9e:	881a      	ldrh	r2, [r3, #0]
 8007ca0:	187b      	adds	r3, r7, r1
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	232e      	movs	r3, #46	; 0x2e
 8007ca8:	18fb      	adds	r3, r7, r3
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	1c9a      	adds	r2, r3, #2
 8007cae:	231c      	movs	r3, #28
 8007cb0:	18fb      	adds	r3, r7, r3
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	5e5b      	ldrsh	r3, [r3, r1]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	dbd1      	blt.n	8007c5e <uartRxFetchFrame+0xfa>
		}
	}
	// keep effective data
	if(end==NULL){
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10c      	bne.n	8007cda <uartRxFetchFrame+0x176>
		//RingBuffer_InsertMult(&pRsrc->rxRB, head, bytes-(head-buff));
		RingBuffer_InsertMult(&pRsrc->rxRB, buff, bytes);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3318      	adds	r3, #24
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	231c      	movs	r3, #28
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	2200      	movs	r2, #0
 8007ccc:	5e9a      	ldrsh	r2, [r3, r2]
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	0019      	movs	r1, r3
 8007cd2:	f7fe ff47 	bl	8006b64 <RingBuffer_InsertMult>
		return 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e071      	b.n	8007dbe <uartRxFetchFrame+0x25a>
	}

	count = buff + bytes - (end+3);
 8007cda:	231c      	movs	r3, #28
 8007cdc:	18fb      	adds	r3, r7, r3
 8007cde:	2200      	movs	r2, #0
 8007ce0:	5e9b      	ldrsh	r3, [r3, r2]
 8007ce2:	6a3a      	ldr	r2, [r7, #32]
 8007ce4:	18d2      	adds	r2, r2, r3
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	3303      	adds	r3, #3
 8007cea:	1ad2      	subs	r2, r2, r3
 8007cec:	211a      	movs	r1, #26
 8007cee:	187b      	adds	r3, r7, r1
 8007cf0:	801a      	strh	r2, [r3, #0]
	if(count>0){	RingBuffer_InsertMult(&pRsrc->rxRB, end+3, count);	}
 8007cf2:	000a      	movs	r2, r1
 8007cf4:	18bb      	adds	r3, r7, r2
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	5e5b      	ldrsh	r3, [r3, r1]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dd0a      	ble.n	8007d14 <uartRxFetchFrame+0x1b0>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3318      	adds	r3, #24
 8007d02:	0018      	movs	r0, r3
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	1cd9      	adds	r1, r3, #3
 8007d08:	18bb      	adds	r3, r7, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	5e9b      	ldrsh	r3, [r3, r2]
 8007d0e:	001a      	movs	r2, r3
 8007d10:	f7fe ff28 	bl	8006b64 <RingBuffer_InsertMult>
	
	pCrc = end-1;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	3b01      	subs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
	crc0 = *pCrc;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	2512      	movs	r5, #18
 8007d20:	197b      	adds	r3, r7, r5
 8007d22:	801a      	strh	r2, [r3, #0]
	crc0 <<= 8;
 8007d24:	197b      	adds	r3, r7, r5
 8007d26:	197a      	adds	r2, r7, r5
 8007d28:	8812      	ldrh	r2, [r2, #0]
 8007d2a:	0212      	lsls	r2, r2, #8
 8007d2c:	801a      	strh	r2, [r3, #0]
	pCrc--;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]
	crc0 |= *pCrc;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	b299      	uxth	r1, r3
 8007d3a:	197b      	adds	r3, r7, r5
 8007d3c:	197a      	adds	r2, r7, r5
 8007d3e:	8812      	ldrh	r2, [r2, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	801a      	strh	r2, [r3, #0]
	len = end-head-3-2;
 8007d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	261e      	movs	r6, #30
 8007d4e:	19bb      	adds	r3, r7, r6
 8007d50:	3a05      	subs	r2, #5
 8007d52:	801a      	strh	r2, [r3, #0]
	crc1 = CRC16(head+3,len,0xacca);
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	1cd8      	adds	r0, r3, #3
 8007d58:	19bb      	adds	r3, r7, r6
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	2210      	movs	r2, #16
 8007d5e:	18bc      	adds	r4, r7, r2
 8007d60:	4a19      	ldr	r2, [pc, #100]	; (8007dc8 <uartRxFetchFrame+0x264>)
 8007d62:	0019      	movs	r1, r3
 8007d64:	f7fe fe26 	bl	80069b4 <CRC16>
 8007d68:	0003      	movs	r3, r0
 8007d6a:	8023      	strh	r3, [r4, #0]
	if(crc0==crc1){
 8007d6c:	197a      	adds	r2, r7, r5
 8007d6e:	2310      	movs	r3, #16
 8007d70:	18fb      	adds	r3, r7, r3
 8007d72:	8812      	ldrh	r2, [r2, #0]
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d120      	bne.n	8007dbc <uartRxFetchFrame+0x258>
		memmove(frame, head+3, (len>=frameLen?frameLen:len));
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	1cd8      	adds	r0, r3, #3
 8007d7e:	1dbb      	adds	r3, r7, #6
 8007d80:	19ba      	adds	r2, r7, r6
 8007d82:	8814      	ldrh	r4, [r2, #0]
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b299      	uxth	r1, r3
 8007d88:	b2a2      	uxth	r2, r4
 8007d8a:	4291      	cmp	r1, r2
 8007d8c:	d900      	bls.n	8007d90 <uartRxFetchFrame+0x22c>
 8007d8e:	1c23      	adds	r3, r4, #0
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	001a      	movs	r2, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	0001      	movs	r1, r0
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f000 f8a8 	bl	8007eee <memmove>
		frame[len]=0;
 8007d9e:	241e      	movs	r4, #30
 8007da0:	193b      	adds	r3, r7, r4
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	18d3      	adds	r3, r2, r3
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
		RingBuffer_Flush(&pRsrc->rxRB);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3318      	adds	r3, #24
 8007db0:	0018      	movs	r0, r3
 8007db2:	f7ff fba3 	bl	80074fc <RingBuffer_Flush>
		return len;
 8007db6:	193b      	adds	r3, r7, r4
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	e000      	b.n	8007dbe <uartRxFetchFrame+0x25a>
	}

	return 0;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	b00d      	add	sp, #52	; 0x34
 8007dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	0000acca 	.word	0x0000acca

08007dcc <TjcSendCmd>:

static s16 TjcSendCmd(UartRsrc_t* p, const char* FORMAT_ORG, ...){
 8007dcc:	b40e      	push	{r1, r2, r3}
 8007dce:	b590      	push	{r4, r7, lr}
 8007dd0:	b09e      	sub	sp, #120	; 0x78
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
	u8 buf[100] = {0};
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	3304      	adds	r3, #4
 8007de0:	2260      	movs	r2, #96	; 0x60
 8007de2:	2100      	movs	r1, #0
 8007de4:	0018      	movs	r0, r3
 8007de6:	f000 f895 	bl	8007f14 <memset>
	s32 len;
	va_list ap;
	s16 bytes;
	//take string
	if(FORMAT_ORG == NULL)	return -1;
 8007dea:	2384      	movs	r3, #132	; 0x84
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <TjcSendCmd+0x2e>
 8007df4:	2301      	movs	r3, #1
 8007df6:	425b      	negs	r3, r3
 8007df8:	e03f      	b.n	8007e7a <TjcSendCmd+0xae>
	memset(buf, 0, 100);
 8007dfa:	240c      	movs	r4, #12
 8007dfc:	193b      	adds	r3, r7, r4
 8007dfe:	2264      	movs	r2, #100	; 0x64
 8007e00:	2100      	movs	r1, #0
 8007e02:	0018      	movs	r0, r3
 8007e04:	f000 f886 	bl	8007f14 <memset>
	va_start(ap, FORMAT_ORG);
 8007e08:	2388      	movs	r3, #136	; 0x88
 8007e0a:	18fb      	adds	r3, r7, r3
 8007e0c:	60bb      	str	r3, [r7, #8]
	bytes = vsnprintf((char*)buf, 100, FORMAT_ORG, ap);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2284      	movs	r2, #132	; 0x84
 8007e12:	18ba      	adds	r2, r7, r2
 8007e14:	6812      	ldr	r2, [r2, #0]
 8007e16:	1938      	adds	r0, r7, r4
 8007e18:	2164      	movs	r1, #100	; 0x64
 8007e1a:	f000 f901 	bl	8008020 <vsniprintf>
 8007e1e:	0002      	movs	r2, r0
 8007e20:	2376      	movs	r3, #118	; 0x76
 8007e22:	18fb      	adds	r3, r7, r3
 8007e24:	801a      	strh	r2, [r3, #0]
	va_end(ap);

	len = strlen((char*)buf);
 8007e26:	193b      	adds	r3, r7, r4
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f7f8 f969 	bl	8000100 <strlen>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	673b      	str	r3, [r7, #112]	; 0x70
	if(len <= 0)	return -2;
 8007e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dc02      	bgt.n	8007e3e <TjcSendCmd+0x72>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	425b      	negs	r3, r3
 8007e3c:	e01d      	b.n	8007e7a <TjcSendCmd+0xae>
	buf[len++] = 0xff;
 8007e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	673a      	str	r2, [r7, #112]	; 0x70
 8007e44:	200c      	movs	r0, #12
 8007e46:	183a      	adds	r2, r7, r0
 8007e48:	21ff      	movs	r1, #255	; 0xff
 8007e4a:	54d1      	strb	r1, [r2, r3]
	buf[len++] = 0xff;
 8007e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	673a      	str	r2, [r7, #112]	; 0x70
 8007e52:	183a      	adds	r2, r7, r0
 8007e54:	21ff      	movs	r1, #255	; 0xff
 8007e56:	54d1      	strb	r1, [r2, r3]
	buf[len++] = 0xff;
 8007e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	673a      	str	r2, [r7, #112]	; 0x70
 8007e5e:	183a      	adds	r2, r7, r0
 8007e60:	21ff      	movs	r1, #255	; 0xff
 8007e62:	54d1      	strb	r1, [r2, r3]
	uartSend(p, buf, len);	// load to ringbuffer
 8007e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	1839      	adds	r1, r7, r0
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f7ff fca6 	bl	80077be <uartSend>
//	p->uart.TxPolling(&p->uart.rsrc);	// send out
//	HAL_Delay(5);
	return bytes;
 8007e72:	2376      	movs	r3, #118	; 0x76
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	2200      	movs	r2, #0
 8007e78:	5e9b      	ldrsh	r3, [r3, r2]
}
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	b01e      	add	sp, #120	; 0x78
 8007e80:	bc90      	pop	{r4, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	b003      	add	sp, #12
 8007e86:	4718      	bx	r3

08007e88 <__errno>:
 8007e88:	4b01      	ldr	r3, [pc, #4]	; (8007e90 <__errno+0x8>)
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	4770      	bx	lr
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	20000010 	.word	0x20000010

08007e94 <__libc_init_array>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	2600      	movs	r6, #0
 8007e98:	4d0c      	ldr	r5, [pc, #48]	; (8007ecc <__libc_init_array+0x38>)
 8007e9a:	4c0d      	ldr	r4, [pc, #52]	; (8007ed0 <__libc_init_array+0x3c>)
 8007e9c:	1b64      	subs	r4, r4, r5
 8007e9e:	10a4      	asrs	r4, r4, #2
 8007ea0:	42a6      	cmp	r6, r4
 8007ea2:	d109      	bne.n	8007eb8 <__libc_init_array+0x24>
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	f001 f9cb 	bl	8009240 <_init>
 8007eaa:	4d0a      	ldr	r5, [pc, #40]	; (8007ed4 <__libc_init_array+0x40>)
 8007eac:	4c0a      	ldr	r4, [pc, #40]	; (8007ed8 <__libc_init_array+0x44>)
 8007eae:	1b64      	subs	r4, r4, r5
 8007eb0:	10a4      	asrs	r4, r4, #2
 8007eb2:	42a6      	cmp	r6, r4
 8007eb4:	d105      	bne.n	8007ec2 <__libc_init_array+0x2e>
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	00b3      	lsls	r3, r6, #2
 8007eba:	58eb      	ldr	r3, [r5, r3]
 8007ebc:	4798      	blx	r3
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	e7ee      	b.n	8007ea0 <__libc_init_array+0xc>
 8007ec2:	00b3      	lsls	r3, r6, #2
 8007ec4:	58eb      	ldr	r3, [r5, r3]
 8007ec6:	4798      	blx	r3
 8007ec8:	3601      	adds	r6, #1
 8007eca:	e7f2      	b.n	8007eb2 <__libc_init_array+0x1e>
 8007ecc:	08009fa8 	.word	0x08009fa8
 8007ed0:	08009fa8 	.word	0x08009fa8
 8007ed4:	08009fa8 	.word	0x08009fa8
 8007ed8:	08009fac 	.word	0x08009fac

08007edc <memcpy>:
 8007edc:	2300      	movs	r3, #0
 8007ede:	b510      	push	{r4, lr}
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d100      	bne.n	8007ee6 <memcpy+0xa>
 8007ee4:	bd10      	pop	{r4, pc}
 8007ee6:	5ccc      	ldrb	r4, [r1, r3]
 8007ee8:	54c4      	strb	r4, [r0, r3]
 8007eea:	3301      	adds	r3, #1
 8007eec:	e7f8      	b.n	8007ee0 <memcpy+0x4>

08007eee <memmove>:
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	4288      	cmp	r0, r1
 8007ef2:	d902      	bls.n	8007efa <memmove+0xc>
 8007ef4:	188b      	adds	r3, r1, r2
 8007ef6:	4298      	cmp	r0, r3
 8007ef8:	d303      	bcc.n	8007f02 <memmove+0x14>
 8007efa:	2300      	movs	r3, #0
 8007efc:	e007      	b.n	8007f0e <memmove+0x20>
 8007efe:	5c8b      	ldrb	r3, [r1, r2]
 8007f00:	5483      	strb	r3, [r0, r2]
 8007f02:	3a01      	subs	r2, #1
 8007f04:	d2fb      	bcs.n	8007efe <memmove+0x10>
 8007f06:	bd10      	pop	{r4, pc}
 8007f08:	5ccc      	ldrb	r4, [r1, r3]
 8007f0a:	54c4      	strb	r4, [r0, r3]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d1fa      	bne.n	8007f08 <memmove+0x1a>
 8007f12:	e7f8      	b.n	8007f06 <memmove+0x18>

08007f14 <memset>:
 8007f14:	0003      	movs	r3, r0
 8007f16:	1882      	adds	r2, r0, r2
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d100      	bne.n	8007f1e <memset+0xa>
 8007f1c:	4770      	bx	lr
 8007f1e:	7019      	strb	r1, [r3, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	e7f9      	b.n	8007f18 <memset+0x4>

08007f24 <siscanf>:
 8007f24:	b40e      	push	{r1, r2, r3}
 8007f26:	b530      	push	{r4, r5, lr}
 8007f28:	2381      	movs	r3, #129	; 0x81
 8007f2a:	b09c      	sub	sp, #112	; 0x70
 8007f2c:	466a      	mov	r2, sp
 8007f2e:	ac1f      	add	r4, sp, #124	; 0x7c
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	cc20      	ldmia	r4!, {r5}
 8007f34:	8293      	strh	r3, [r2, #20]
 8007f36:	9002      	str	r0, [sp, #8]
 8007f38:	9006      	str	r0, [sp, #24]
 8007f3a:	f7f8 f8e1 	bl	8000100 <strlen>
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <siscanf+0x48>)
 8007f40:	466a      	mov	r2, sp
 8007f42:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f44:	2300      	movs	r3, #0
 8007f46:	9003      	str	r0, [sp, #12]
 8007f48:	9007      	str	r0, [sp, #28]
 8007f4a:	4809      	ldr	r0, [pc, #36]	; (8007f70 <siscanf+0x4c>)
 8007f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f4e:	9314      	str	r3, [sp, #80]	; 0x50
 8007f50:	3b01      	subs	r3, #1
 8007f52:	82d3      	strh	r3, [r2, #22]
 8007f54:	a902      	add	r1, sp, #8
 8007f56:	0023      	movs	r3, r4
 8007f58:	002a      	movs	r2, r5
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	9401      	str	r4, [sp, #4]
 8007f5e:	f000 fa29 	bl	80083b4 <__ssvfiscanf_r>
 8007f62:	b01c      	add	sp, #112	; 0x70
 8007f64:	bc30      	pop	{r4, r5}
 8007f66:	bc08      	pop	{r3}
 8007f68:	b003      	add	sp, #12
 8007f6a:	4718      	bx	r3
 8007f6c:	08007f75 	.word	0x08007f75
 8007f70:	20000010 	.word	0x20000010

08007f74 <__seofread>:
 8007f74:	2000      	movs	r0, #0
 8007f76:	4770      	bx	lr

08007f78 <strncmp>:
 8007f78:	b530      	push	{r4, r5, lr}
 8007f7a:	0005      	movs	r5, r0
 8007f7c:	1e10      	subs	r0, r2, #0
 8007f7e:	d008      	beq.n	8007f92 <strncmp+0x1a>
 8007f80:	2400      	movs	r4, #0
 8007f82:	3a01      	subs	r2, #1
 8007f84:	5d2b      	ldrb	r3, [r5, r4]
 8007f86:	5d08      	ldrb	r0, [r1, r4]
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	d101      	bne.n	8007f90 <strncmp+0x18>
 8007f8c:	4294      	cmp	r4, r2
 8007f8e:	d101      	bne.n	8007f94 <strncmp+0x1c>
 8007f90:	1a18      	subs	r0, r3, r0
 8007f92:	bd30      	pop	{r4, r5, pc}
 8007f94:	3401      	adds	r4, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f4      	bne.n	8007f84 <strncmp+0xc>
 8007f9a:	e7f9      	b.n	8007f90 <strncmp+0x18>

08007f9c <strstr>:
 8007f9c:	780a      	ldrb	r2, [r1, #0]
 8007f9e:	b530      	push	{r4, r5, lr}
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d10c      	bne.n	8007fbe <strstr+0x22>
 8007fa4:	bd30      	pop	{r4, r5, pc}
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d108      	bne.n	8007fbc <strstr+0x20>
 8007faa:	2301      	movs	r3, #1
 8007fac:	5ccc      	ldrb	r4, [r1, r3]
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	d0f8      	beq.n	8007fa4 <strstr+0x8>
 8007fb2:	5cc5      	ldrb	r5, [r0, r3]
 8007fb4:	42a5      	cmp	r5, r4
 8007fb6:	d101      	bne.n	8007fbc <strstr+0x20>
 8007fb8:	3301      	adds	r3, #1
 8007fba:	e7f7      	b.n	8007fac <strstr+0x10>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	7803      	ldrb	r3, [r0, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f0      	bne.n	8007fa6 <strstr+0xa>
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	e7ed      	b.n	8007fa4 <strstr+0x8>

08007fc8 <_vsniprintf_r>:
 8007fc8:	b530      	push	{r4, r5, lr}
 8007fca:	0014      	movs	r4, r2
 8007fcc:	0005      	movs	r5, r0
 8007fce:	001a      	movs	r2, r3
 8007fd0:	b09b      	sub	sp, #108	; 0x6c
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	da05      	bge.n	8007fe2 <_vsniprintf_r+0x1a>
 8007fd6:	238b      	movs	r3, #139	; 0x8b
 8007fd8:	6003      	str	r3, [r0, #0]
 8007fda:	2001      	movs	r0, #1
 8007fdc:	4240      	negs	r0, r0
 8007fde:	b01b      	add	sp, #108	; 0x6c
 8007fe0:	bd30      	pop	{r4, r5, pc}
 8007fe2:	2382      	movs	r3, #130	; 0x82
 8007fe4:	4668      	mov	r0, sp
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	8183      	strh	r3, [r0, #12]
 8007fea:	2300      	movs	r3, #0
 8007fec:	9100      	str	r1, [sp, #0]
 8007fee:	9104      	str	r1, [sp, #16]
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d000      	beq.n	8007ff6 <_vsniprintf_r+0x2e>
 8007ff4:	1e63      	subs	r3, r4, #1
 8007ff6:	9302      	str	r3, [sp, #8]
 8007ff8:	9305      	str	r3, [sp, #20]
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4669      	mov	r1, sp
 8007ffe:	425b      	negs	r3, r3
 8008000:	81cb      	strh	r3, [r1, #14]
 8008002:	0028      	movs	r0, r5
 8008004:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008006:	f000 f879 	bl	80080fc <_svfiprintf_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	da01      	bge.n	8008012 <_vsniprintf_r+0x4a>
 800800e:	238b      	movs	r3, #139	; 0x8b
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	2c00      	cmp	r4, #0
 8008014:	d0e3      	beq.n	8007fde <_vsniprintf_r+0x16>
 8008016:	2300      	movs	r3, #0
 8008018:	9a00      	ldr	r2, [sp, #0]
 800801a:	7013      	strb	r3, [r2, #0]
 800801c:	e7df      	b.n	8007fde <_vsniprintf_r+0x16>
	...

08008020 <vsniprintf>:
 8008020:	b507      	push	{r0, r1, r2, lr}
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	0013      	movs	r3, r2
 8008026:	000a      	movs	r2, r1
 8008028:	0001      	movs	r1, r0
 800802a:	4802      	ldr	r0, [pc, #8]	; (8008034 <vsniprintf+0x14>)
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f7ff ffcb 	bl	8007fc8 <_vsniprintf_r>
 8008032:	bd0e      	pop	{r1, r2, r3, pc}
 8008034:	20000010 	.word	0x20000010

08008038 <__ssputs_r>:
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	688e      	ldr	r6, [r1, #8]
 800803c:	b085      	sub	sp, #20
 800803e:	0007      	movs	r7, r0
 8008040:	000c      	movs	r4, r1
 8008042:	9203      	str	r2, [sp, #12]
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	429e      	cmp	r6, r3
 8008048:	d83c      	bhi.n	80080c4 <__ssputs_r+0x8c>
 800804a:	2390      	movs	r3, #144	; 0x90
 800804c:	898a      	ldrh	r2, [r1, #12]
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	421a      	tst	r2, r3
 8008052:	d034      	beq.n	80080be <__ssputs_r+0x86>
 8008054:	6909      	ldr	r1, [r1, #16]
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	6960      	ldr	r0, [r4, #20]
 800805a:	1a5b      	subs	r3, r3, r1
 800805c:	9302      	str	r3, [sp, #8]
 800805e:	2303      	movs	r3, #3
 8008060:	4343      	muls	r3, r0
 8008062:	0fdd      	lsrs	r5, r3, #31
 8008064:	18ed      	adds	r5, r5, r3
 8008066:	9b01      	ldr	r3, [sp, #4]
 8008068:	9802      	ldr	r0, [sp, #8]
 800806a:	3301      	adds	r3, #1
 800806c:	181b      	adds	r3, r3, r0
 800806e:	106d      	asrs	r5, r5, #1
 8008070:	42ab      	cmp	r3, r5
 8008072:	d900      	bls.n	8008076 <__ssputs_r+0x3e>
 8008074:	001d      	movs	r5, r3
 8008076:	0553      	lsls	r3, r2, #21
 8008078:	d532      	bpl.n	80080e0 <__ssputs_r+0xa8>
 800807a:	0029      	movs	r1, r5
 800807c:	0038      	movs	r0, r7
 800807e:	f001 f80f 	bl	80090a0 <_malloc_r>
 8008082:	1e06      	subs	r6, r0, #0
 8008084:	d109      	bne.n	800809a <__ssputs_r+0x62>
 8008086:	230c      	movs	r3, #12
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	2340      	movs	r3, #64	; 0x40
 800808c:	2001      	movs	r0, #1
 800808e:	89a2      	ldrh	r2, [r4, #12]
 8008090:	4240      	negs	r0, r0
 8008092:	4313      	orrs	r3, r2
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	b005      	add	sp, #20
 8008098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809a:	9a02      	ldr	r2, [sp, #8]
 800809c:	6921      	ldr	r1, [r4, #16]
 800809e:	f7ff ff1d 	bl	8007edc <memcpy>
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	4a14      	ldr	r2, [pc, #80]	; (80080f8 <__ssputs_r+0xc0>)
 80080a6:	401a      	ands	r2, r3
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	4313      	orrs	r3, r2
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	6126      	str	r6, [r4, #16]
 80080b2:	18f6      	adds	r6, r6, r3
 80080b4:	6026      	str	r6, [r4, #0]
 80080b6:	6165      	str	r5, [r4, #20]
 80080b8:	9e01      	ldr	r6, [sp, #4]
 80080ba:	1aed      	subs	r5, r5, r3
 80080bc:	60a5      	str	r5, [r4, #8]
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	429e      	cmp	r6, r3
 80080c2:	d900      	bls.n	80080c6 <__ssputs_r+0x8e>
 80080c4:	9e01      	ldr	r6, [sp, #4]
 80080c6:	0032      	movs	r2, r6
 80080c8:	9903      	ldr	r1, [sp, #12]
 80080ca:	6820      	ldr	r0, [r4, #0]
 80080cc:	f7ff ff0f 	bl	8007eee <memmove>
 80080d0:	68a3      	ldr	r3, [r4, #8]
 80080d2:	2000      	movs	r0, #0
 80080d4:	1b9b      	subs	r3, r3, r6
 80080d6:	60a3      	str	r3, [r4, #8]
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	199e      	adds	r6, r3, r6
 80080dc:	6026      	str	r6, [r4, #0]
 80080de:	e7da      	b.n	8008096 <__ssputs_r+0x5e>
 80080e0:	002a      	movs	r2, r5
 80080e2:	0038      	movs	r0, r7
 80080e4:	f001 f852 	bl	800918c <_realloc_r>
 80080e8:	1e06      	subs	r6, r0, #0
 80080ea:	d1e0      	bne.n	80080ae <__ssputs_r+0x76>
 80080ec:	0038      	movs	r0, r7
 80080ee:	6921      	ldr	r1, [r4, #16]
 80080f0:	f000 ff6a 	bl	8008fc8 <_free_r>
 80080f4:	e7c7      	b.n	8008086 <__ssputs_r+0x4e>
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	fffffb7f 	.word	0xfffffb7f

080080fc <_svfiprintf_r>:
 80080fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fe:	b0a1      	sub	sp, #132	; 0x84
 8008100:	9003      	str	r0, [sp, #12]
 8008102:	001d      	movs	r5, r3
 8008104:	898b      	ldrh	r3, [r1, #12]
 8008106:	000f      	movs	r7, r1
 8008108:	0016      	movs	r6, r2
 800810a:	061b      	lsls	r3, r3, #24
 800810c:	d511      	bpl.n	8008132 <_svfiprintf_r+0x36>
 800810e:	690b      	ldr	r3, [r1, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10e      	bne.n	8008132 <_svfiprintf_r+0x36>
 8008114:	2140      	movs	r1, #64	; 0x40
 8008116:	f000 ffc3 	bl	80090a0 <_malloc_r>
 800811a:	6038      	str	r0, [r7, #0]
 800811c:	6138      	str	r0, [r7, #16]
 800811e:	2800      	cmp	r0, #0
 8008120:	d105      	bne.n	800812e <_svfiprintf_r+0x32>
 8008122:	230c      	movs	r3, #12
 8008124:	9a03      	ldr	r2, [sp, #12]
 8008126:	3801      	subs	r0, #1
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	b021      	add	sp, #132	; 0x84
 800812c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800812e:	2340      	movs	r3, #64	; 0x40
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	2300      	movs	r3, #0
 8008134:	ac08      	add	r4, sp, #32
 8008136:	6163      	str	r3, [r4, #20]
 8008138:	3320      	adds	r3, #32
 800813a:	7663      	strb	r3, [r4, #25]
 800813c:	3310      	adds	r3, #16
 800813e:	76a3      	strb	r3, [r4, #26]
 8008140:	9507      	str	r5, [sp, #28]
 8008142:	0035      	movs	r5, r6
 8008144:	782b      	ldrb	r3, [r5, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <_svfiprintf_r+0x52>
 800814a:	2b25      	cmp	r3, #37	; 0x25
 800814c:	d147      	bne.n	80081de <_svfiprintf_r+0xe2>
 800814e:	1bab      	subs	r3, r5, r6
 8008150:	9305      	str	r3, [sp, #20]
 8008152:	42b5      	cmp	r5, r6
 8008154:	d00c      	beq.n	8008170 <_svfiprintf_r+0x74>
 8008156:	0032      	movs	r2, r6
 8008158:	0039      	movs	r1, r7
 800815a:	9803      	ldr	r0, [sp, #12]
 800815c:	f7ff ff6c 	bl	8008038 <__ssputs_r>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d100      	bne.n	8008166 <_svfiprintf_r+0x6a>
 8008164:	e0ae      	b.n	80082c4 <_svfiprintf_r+0x1c8>
 8008166:	6962      	ldr	r2, [r4, #20]
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	4694      	mov	ip, r2
 800816c:	4463      	add	r3, ip
 800816e:	6163      	str	r3, [r4, #20]
 8008170:	782b      	ldrb	r3, [r5, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d100      	bne.n	8008178 <_svfiprintf_r+0x7c>
 8008176:	e0a5      	b.n	80082c4 <_svfiprintf_r+0x1c8>
 8008178:	2201      	movs	r2, #1
 800817a:	2300      	movs	r3, #0
 800817c:	4252      	negs	r2, r2
 800817e:	6062      	str	r2, [r4, #4]
 8008180:	a904      	add	r1, sp, #16
 8008182:	3254      	adds	r2, #84	; 0x54
 8008184:	1852      	adds	r2, r2, r1
 8008186:	1c6e      	adds	r6, r5, #1
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	60e3      	str	r3, [r4, #12]
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	7013      	strb	r3, [r2, #0]
 8008190:	65a3      	str	r3, [r4, #88]	; 0x58
 8008192:	2205      	movs	r2, #5
 8008194:	7831      	ldrb	r1, [r6, #0]
 8008196:	4854      	ldr	r0, [pc, #336]	; (80082e8 <_svfiprintf_r+0x1ec>)
 8008198:	f000 ff0a 	bl	8008fb0 <memchr>
 800819c:	1c75      	adds	r5, r6, #1
 800819e:	2800      	cmp	r0, #0
 80081a0:	d11f      	bne.n	80081e2 <_svfiprintf_r+0xe6>
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	06d3      	lsls	r3, r2, #27
 80081a6:	d504      	bpl.n	80081b2 <_svfiprintf_r+0xb6>
 80081a8:	2353      	movs	r3, #83	; 0x53
 80081aa:	a904      	add	r1, sp, #16
 80081ac:	185b      	adds	r3, r3, r1
 80081ae:	2120      	movs	r1, #32
 80081b0:	7019      	strb	r1, [r3, #0]
 80081b2:	0713      	lsls	r3, r2, #28
 80081b4:	d504      	bpl.n	80081c0 <_svfiprintf_r+0xc4>
 80081b6:	2353      	movs	r3, #83	; 0x53
 80081b8:	a904      	add	r1, sp, #16
 80081ba:	185b      	adds	r3, r3, r1
 80081bc:	212b      	movs	r1, #43	; 0x2b
 80081be:	7019      	strb	r1, [r3, #0]
 80081c0:	7833      	ldrb	r3, [r6, #0]
 80081c2:	2b2a      	cmp	r3, #42	; 0x2a
 80081c4:	d016      	beq.n	80081f4 <_svfiprintf_r+0xf8>
 80081c6:	0035      	movs	r5, r6
 80081c8:	2100      	movs	r1, #0
 80081ca:	200a      	movs	r0, #10
 80081cc:	68e3      	ldr	r3, [r4, #12]
 80081ce:	782a      	ldrb	r2, [r5, #0]
 80081d0:	1c6e      	adds	r6, r5, #1
 80081d2:	3a30      	subs	r2, #48	; 0x30
 80081d4:	2a09      	cmp	r2, #9
 80081d6:	d94e      	bls.n	8008276 <_svfiprintf_r+0x17a>
 80081d8:	2900      	cmp	r1, #0
 80081da:	d111      	bne.n	8008200 <_svfiprintf_r+0x104>
 80081dc:	e017      	b.n	800820e <_svfiprintf_r+0x112>
 80081de:	3501      	adds	r5, #1
 80081e0:	e7b0      	b.n	8008144 <_svfiprintf_r+0x48>
 80081e2:	4b41      	ldr	r3, [pc, #260]	; (80082e8 <_svfiprintf_r+0x1ec>)
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	1ac0      	subs	r0, r0, r3
 80081e8:	2301      	movs	r3, #1
 80081ea:	4083      	lsls	r3, r0
 80081ec:	4313      	orrs	r3, r2
 80081ee:	002e      	movs	r6, r5
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	e7ce      	b.n	8008192 <_svfiprintf_r+0x96>
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	1d19      	adds	r1, r3, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	9107      	str	r1, [sp, #28]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	db01      	blt.n	8008204 <_svfiprintf_r+0x108>
 8008200:	930b      	str	r3, [sp, #44]	; 0x2c
 8008202:	e004      	b.n	800820e <_svfiprintf_r+0x112>
 8008204:	425b      	negs	r3, r3
 8008206:	60e3      	str	r3, [r4, #12]
 8008208:	2302      	movs	r3, #2
 800820a:	4313      	orrs	r3, r2
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	782b      	ldrb	r3, [r5, #0]
 8008210:	2b2e      	cmp	r3, #46	; 0x2e
 8008212:	d10a      	bne.n	800822a <_svfiprintf_r+0x12e>
 8008214:	786b      	ldrb	r3, [r5, #1]
 8008216:	2b2a      	cmp	r3, #42	; 0x2a
 8008218:	d135      	bne.n	8008286 <_svfiprintf_r+0x18a>
 800821a:	9b07      	ldr	r3, [sp, #28]
 800821c:	3502      	adds	r5, #2
 800821e:	1d1a      	adds	r2, r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	9207      	str	r2, [sp, #28]
 8008224:	2b00      	cmp	r3, #0
 8008226:	db2b      	blt.n	8008280 <_svfiprintf_r+0x184>
 8008228:	9309      	str	r3, [sp, #36]	; 0x24
 800822a:	4e30      	ldr	r6, [pc, #192]	; (80082ec <_svfiprintf_r+0x1f0>)
 800822c:	2203      	movs	r2, #3
 800822e:	0030      	movs	r0, r6
 8008230:	7829      	ldrb	r1, [r5, #0]
 8008232:	f000 febd 	bl	8008fb0 <memchr>
 8008236:	2800      	cmp	r0, #0
 8008238:	d006      	beq.n	8008248 <_svfiprintf_r+0x14c>
 800823a:	2340      	movs	r3, #64	; 0x40
 800823c:	1b80      	subs	r0, r0, r6
 800823e:	4083      	lsls	r3, r0
 8008240:	6822      	ldr	r2, [r4, #0]
 8008242:	3501      	adds	r5, #1
 8008244:	4313      	orrs	r3, r2
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	7829      	ldrb	r1, [r5, #0]
 800824a:	2206      	movs	r2, #6
 800824c:	4828      	ldr	r0, [pc, #160]	; (80082f0 <_svfiprintf_r+0x1f4>)
 800824e:	1c6e      	adds	r6, r5, #1
 8008250:	7621      	strb	r1, [r4, #24]
 8008252:	f000 fead 	bl	8008fb0 <memchr>
 8008256:	2800      	cmp	r0, #0
 8008258:	d03c      	beq.n	80082d4 <_svfiprintf_r+0x1d8>
 800825a:	4b26      	ldr	r3, [pc, #152]	; (80082f4 <_svfiprintf_r+0x1f8>)
 800825c:	2b00      	cmp	r3, #0
 800825e:	d125      	bne.n	80082ac <_svfiprintf_r+0x1b0>
 8008260:	2207      	movs	r2, #7
 8008262:	9b07      	ldr	r3, [sp, #28]
 8008264:	3307      	adds	r3, #7
 8008266:	4393      	bics	r3, r2
 8008268:	3308      	adds	r3, #8
 800826a:	9307      	str	r3, [sp, #28]
 800826c:	6963      	ldr	r3, [r4, #20]
 800826e:	9a04      	ldr	r2, [sp, #16]
 8008270:	189b      	adds	r3, r3, r2
 8008272:	6163      	str	r3, [r4, #20]
 8008274:	e765      	b.n	8008142 <_svfiprintf_r+0x46>
 8008276:	4343      	muls	r3, r0
 8008278:	0035      	movs	r5, r6
 800827a:	2101      	movs	r1, #1
 800827c:	189b      	adds	r3, r3, r2
 800827e:	e7a6      	b.n	80081ce <_svfiprintf_r+0xd2>
 8008280:	2301      	movs	r3, #1
 8008282:	425b      	negs	r3, r3
 8008284:	e7d0      	b.n	8008228 <_svfiprintf_r+0x12c>
 8008286:	2300      	movs	r3, #0
 8008288:	200a      	movs	r0, #10
 800828a:	001a      	movs	r2, r3
 800828c:	3501      	adds	r5, #1
 800828e:	6063      	str	r3, [r4, #4]
 8008290:	7829      	ldrb	r1, [r5, #0]
 8008292:	1c6e      	adds	r6, r5, #1
 8008294:	3930      	subs	r1, #48	; 0x30
 8008296:	2909      	cmp	r1, #9
 8008298:	d903      	bls.n	80082a2 <_svfiprintf_r+0x1a6>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0c5      	beq.n	800822a <_svfiprintf_r+0x12e>
 800829e:	9209      	str	r2, [sp, #36]	; 0x24
 80082a0:	e7c3      	b.n	800822a <_svfiprintf_r+0x12e>
 80082a2:	4342      	muls	r2, r0
 80082a4:	0035      	movs	r5, r6
 80082a6:	2301      	movs	r3, #1
 80082a8:	1852      	adds	r2, r2, r1
 80082aa:	e7f1      	b.n	8008290 <_svfiprintf_r+0x194>
 80082ac:	ab07      	add	r3, sp, #28
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	003a      	movs	r2, r7
 80082b2:	0021      	movs	r1, r4
 80082b4:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <_svfiprintf_r+0x1fc>)
 80082b6:	9803      	ldr	r0, [sp, #12]
 80082b8:	e000      	b.n	80082bc <_svfiprintf_r+0x1c0>
 80082ba:	bf00      	nop
 80082bc:	9004      	str	r0, [sp, #16]
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	d1d3      	bne.n	800826c <_svfiprintf_r+0x170>
 80082c4:	89bb      	ldrh	r3, [r7, #12]
 80082c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80082c8:	065b      	lsls	r3, r3, #25
 80082ca:	d400      	bmi.n	80082ce <_svfiprintf_r+0x1d2>
 80082cc:	e72d      	b.n	800812a <_svfiprintf_r+0x2e>
 80082ce:	2001      	movs	r0, #1
 80082d0:	4240      	negs	r0, r0
 80082d2:	e72a      	b.n	800812a <_svfiprintf_r+0x2e>
 80082d4:	ab07      	add	r3, sp, #28
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	003a      	movs	r2, r7
 80082da:	0021      	movs	r1, r4
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <_svfiprintf_r+0x1fc>)
 80082de:	9803      	ldr	r0, [sp, #12]
 80082e0:	f000 fa56 	bl	8008790 <_printf_i>
 80082e4:	e7ea      	b.n	80082bc <_svfiprintf_r+0x1c0>
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	08009df8 	.word	0x08009df8
 80082ec:	08009dfe 	.word	0x08009dfe
 80082f0:	08009e02 	.word	0x08009e02
 80082f4:	00000000 	.word	0x00000000
 80082f8:	08008039 	.word	0x08008039

080082fc <_sungetc_r>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	0014      	movs	r4, r2
 8008300:	1c4b      	adds	r3, r1, #1
 8008302:	d103      	bne.n	800830c <_sungetc_r+0x10>
 8008304:	2501      	movs	r5, #1
 8008306:	426d      	negs	r5, r5
 8008308:	0028      	movs	r0, r5
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	8993      	ldrh	r3, [r2, #12]
 800830e:	2220      	movs	r2, #32
 8008310:	4393      	bics	r3, r2
 8008312:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	b2ce      	uxtb	r6, r1
 8008318:	6863      	ldr	r3, [r4, #4]
 800831a:	b2cd      	uxtb	r5, r1
 800831c:	2a00      	cmp	r2, #0
 800831e:	d010      	beq.n	8008342 <_sungetc_r+0x46>
 8008320:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008322:	429a      	cmp	r2, r3
 8008324:	dd07      	ble.n	8008336 <_sungetc_r+0x3a>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	3b01      	subs	r3, #1
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	701e      	strb	r6, [r3, #0]
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	3301      	adds	r3, #1
 8008332:	6063      	str	r3, [r4, #4]
 8008334:	e7e8      	b.n	8008308 <_sungetc_r+0xc>
 8008336:	0021      	movs	r1, r4
 8008338:	f000 fdfa 	bl	8008f30 <__submore>
 800833c:	2800      	cmp	r0, #0
 800833e:	d0f2      	beq.n	8008326 <_sungetc_r+0x2a>
 8008340:	e7e0      	b.n	8008304 <_sungetc_r+0x8>
 8008342:	6921      	ldr	r1, [r4, #16]
 8008344:	6822      	ldr	r2, [r4, #0]
 8008346:	2900      	cmp	r1, #0
 8008348:	d007      	beq.n	800835a <_sungetc_r+0x5e>
 800834a:	4291      	cmp	r1, r2
 800834c:	d205      	bcs.n	800835a <_sungetc_r+0x5e>
 800834e:	1e51      	subs	r1, r2, #1
 8008350:	7808      	ldrb	r0, [r1, #0]
 8008352:	42a8      	cmp	r0, r5
 8008354:	d101      	bne.n	800835a <_sungetc_r+0x5e>
 8008356:	6021      	str	r1, [r4, #0]
 8008358:	e7ea      	b.n	8008330 <_sungetc_r+0x34>
 800835a:	6423      	str	r3, [r4, #64]	; 0x40
 800835c:	0023      	movs	r3, r4
 800835e:	3344      	adds	r3, #68	; 0x44
 8008360:	6363      	str	r3, [r4, #52]	; 0x34
 8008362:	2303      	movs	r3, #3
 8008364:	63a3      	str	r3, [r4, #56]	; 0x38
 8008366:	0023      	movs	r3, r4
 8008368:	3346      	adds	r3, #70	; 0x46
 800836a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800836c:	701e      	strb	r6, [r3, #0]
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	2301      	movs	r3, #1
 8008372:	e7de      	b.n	8008332 <_sungetc_r+0x36>

08008374 <__ssrefill_r>:
 8008374:	b510      	push	{r4, lr}
 8008376:	000c      	movs	r4, r1
 8008378:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800837a:	2900      	cmp	r1, #0
 800837c:	d00e      	beq.n	800839c <__ssrefill_r+0x28>
 800837e:	0023      	movs	r3, r4
 8008380:	3344      	adds	r3, #68	; 0x44
 8008382:	4299      	cmp	r1, r3
 8008384:	d001      	beq.n	800838a <__ssrefill_r+0x16>
 8008386:	f000 fe1f 	bl	8008fc8 <_free_r>
 800838a:	2000      	movs	r0, #0
 800838c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800838e:	6360      	str	r0, [r4, #52]	; 0x34
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	4283      	cmp	r3, r0
 8008394:	d002      	beq.n	800839c <__ssrefill_r+0x28>
 8008396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd10      	pop	{r4, pc}
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	2001      	movs	r0, #1
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	89a2      	ldrh	r2, [r4, #12]
 80083a6:	6063      	str	r3, [r4, #4]
 80083a8:	3320      	adds	r3, #32
 80083aa:	4313      	orrs	r3, r2
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	4240      	negs	r0, r0
 80083b0:	e7f3      	b.n	800839a <__ssrefill_r+0x26>
	...

080083b4 <__ssvfiscanf_r>:
 80083b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b6:	4cb8      	ldr	r4, [pc, #736]	; (8008698 <__ssvfiscanf_r+0x2e4>)
 80083b8:	0006      	movs	r6, r0
 80083ba:	44a5      	add	sp, r4
 80083bc:	000c      	movs	r4, r1
 80083be:	2100      	movs	r1, #0
 80083c0:	9146      	str	r1, [sp, #280]	; 0x118
 80083c2:	9147      	str	r1, [sp, #284]	; 0x11c
 80083c4:	a903      	add	r1, sp, #12
 80083c6:	9148      	str	r1, [sp, #288]	; 0x120
 80083c8:	21be      	movs	r1, #190	; 0xbe
 80083ca:	48b4      	ldr	r0, [pc, #720]	; (800869c <__ssvfiscanf_r+0x2e8>)
 80083cc:	0049      	lsls	r1, r1, #1
 80083ce:	ad43      	add	r5, sp, #268	; 0x10c
 80083d0:	5068      	str	r0, [r5, r1]
 80083d2:	25c0      	movs	r5, #192	; 0xc0
 80083d4:	49b2      	ldr	r1, [pc, #712]	; (80086a0 <__ssvfiscanf_r+0x2ec>)
 80083d6:	006d      	lsls	r5, r5, #1
 80083d8:	a843      	add	r0, sp, #268	; 0x10c
 80083da:	5141      	str	r1, [r0, r5]
 80083dc:	9302      	str	r3, [sp, #8]
 80083de:	7813      	ldrb	r3, [r2, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d100      	bne.n	80083e6 <__ssvfiscanf_r+0x32>
 80083e4:	e155      	b.n	8008692 <__ssvfiscanf_r+0x2de>
 80083e6:	49af      	ldr	r1, [pc, #700]	; (80086a4 <__ssvfiscanf_r+0x2f0>)
 80083e8:	2508      	movs	r5, #8
 80083ea:	5cc8      	ldrb	r0, [r1, r3]
 80083ec:	2108      	movs	r1, #8
 80083ee:	1c57      	adds	r7, r2, #1
 80083f0:	4001      	ands	r1, r0
 80083f2:	4228      	tst	r0, r5
 80083f4:	d020      	beq.n	8008438 <__ssvfiscanf_r+0x84>
 80083f6:	6863      	ldr	r3, [r4, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dd12      	ble.n	8008422 <__ssvfiscanf_r+0x6e>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	49a9      	ldr	r1, [pc, #676]	; (80086a4 <__ssvfiscanf_r+0x2f0>)
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	5c8a      	ldrb	r2, [r1, r2]
 8008404:	2108      	movs	r1, #8
 8008406:	420a      	tst	r2, r1
 8008408:	d101      	bne.n	800840e <__ssvfiscanf_r+0x5a>
 800840a:	003a      	movs	r2, r7
 800840c:	e7e7      	b.n	80083de <__ssvfiscanf_r+0x2a>
 800840e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008410:	3301      	adds	r3, #1
 8008412:	9200      	str	r2, [sp, #0]
 8008414:	3201      	adds	r2, #1
 8008416:	9247      	str	r2, [sp, #284]	; 0x11c
 8008418:	6862      	ldr	r2, [r4, #4]
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	3a01      	subs	r2, #1
 800841e:	6062      	str	r2, [r4, #4]
 8008420:	e7e9      	b.n	80083f6 <__ssvfiscanf_r+0x42>
 8008422:	22c0      	movs	r2, #192	; 0xc0
 8008424:	ab43      	add	r3, sp, #268	; 0x10c
 8008426:	0052      	lsls	r2, r2, #1
 8008428:	589b      	ldr	r3, [r3, r2]
 800842a:	0021      	movs	r1, r4
 800842c:	0030      	movs	r0, r6
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	4798      	blx	r3
 8008432:	2800      	cmp	r0, #0
 8008434:	d0e2      	beq.n	80083fc <__ssvfiscanf_r+0x48>
 8008436:	e7e8      	b.n	800840a <__ssvfiscanf_r+0x56>
 8008438:	001d      	movs	r5, r3
 800843a:	2b25      	cmp	r3, #37	; 0x25
 800843c:	d164      	bne.n	8008508 <__ssvfiscanf_r+0x154>
 800843e:	9145      	str	r1, [sp, #276]	; 0x114
 8008440:	9143      	str	r1, [sp, #268]	; 0x10c
 8008442:	7853      	ldrb	r3, [r2, #1]
 8008444:	2b2a      	cmp	r3, #42	; 0x2a
 8008446:	d102      	bne.n	800844e <__ssvfiscanf_r+0x9a>
 8008448:	3b1a      	subs	r3, #26
 800844a:	9343      	str	r3, [sp, #268]	; 0x10c
 800844c:	1c97      	adds	r7, r2, #2
 800844e:	003d      	movs	r5, r7
 8008450:	220a      	movs	r2, #10
 8008452:	7829      	ldrb	r1, [r5, #0]
 8008454:	1c6b      	adds	r3, r5, #1
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	000b      	movs	r3, r1
 800845a:	3b30      	subs	r3, #48	; 0x30
 800845c:	2b09      	cmp	r3, #9
 800845e:	d91f      	bls.n	80084a0 <__ssvfiscanf_r+0xec>
 8008460:	4f91      	ldr	r7, [pc, #580]	; (80086a8 <__ssvfiscanf_r+0x2f4>)
 8008462:	2203      	movs	r2, #3
 8008464:	0038      	movs	r0, r7
 8008466:	f000 fda3 	bl	8008fb0 <memchr>
 800846a:	2800      	cmp	r0, #0
 800846c:	d007      	beq.n	800847e <__ssvfiscanf_r+0xca>
 800846e:	2301      	movs	r3, #1
 8008470:	1bc0      	subs	r0, r0, r7
 8008472:	4083      	lsls	r3, r0
 8008474:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008476:	9d00      	ldr	r5, [sp, #0]
 8008478:	4313      	orrs	r3, r2
 800847a:	9201      	str	r2, [sp, #4]
 800847c:	9343      	str	r3, [sp, #268]	; 0x10c
 800847e:	1c6f      	adds	r7, r5, #1
 8008480:	782d      	ldrb	r5, [r5, #0]
 8008482:	2d78      	cmp	r5, #120	; 0x78
 8008484:	d807      	bhi.n	8008496 <__ssvfiscanf_r+0xe2>
 8008486:	2d57      	cmp	r5, #87	; 0x57
 8008488:	d812      	bhi.n	80084b0 <__ssvfiscanf_r+0xfc>
 800848a:	2d25      	cmp	r5, #37	; 0x25
 800848c:	d03c      	beq.n	8008508 <__ssvfiscanf_r+0x154>
 800848e:	d836      	bhi.n	80084fe <__ssvfiscanf_r+0x14a>
 8008490:	2d00      	cmp	r5, #0
 8008492:	d100      	bne.n	8008496 <__ssvfiscanf_r+0xe2>
 8008494:	e0fa      	b.n	800868c <__ssvfiscanf_r+0x2d8>
 8008496:	2303      	movs	r3, #3
 8008498:	9349      	str	r3, [sp, #292]	; 0x124
 800849a:	3307      	adds	r3, #7
 800849c:	9344      	str	r3, [sp, #272]	; 0x110
 800849e:	e06d      	b.n	800857c <__ssvfiscanf_r+0x1c8>
 80084a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80084a2:	9d00      	ldr	r5, [sp, #0]
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	4353      	muls	r3, r2
 80084a8:	3b30      	subs	r3, #48	; 0x30
 80084aa:	185b      	adds	r3, r3, r1
 80084ac:	9345      	str	r3, [sp, #276]	; 0x114
 80084ae:	e7d0      	b.n	8008452 <__ssvfiscanf_r+0x9e>
 80084b0:	0028      	movs	r0, r5
 80084b2:	3858      	subs	r0, #88	; 0x58
 80084b4:	2820      	cmp	r0, #32
 80084b6:	d8ee      	bhi.n	8008496 <__ssvfiscanf_r+0xe2>
 80084b8:	f7f7 fe2a 	bl	8000110 <__gnu_thumb1_case_shi>
 80084bc:	ffed0051 	.word	0xffed0051
 80084c0:	0087ffed 	.word	0x0087ffed
 80084c4:	ffedffed 	.word	0xffedffed
 80084c8:	ffedffed 	.word	0xffedffed
 80084cc:	ffedffed 	.word	0xffedffed
 80084d0:	0095ffed 	.word	0x0095ffed
 80084d4:	0024007d 	.word	0x0024007d
 80084d8:	00240024 	.word	0x00240024
 80084dc:	007fffed 	.word	0x007fffed
 80084e0:	ffedffed 	.word	0xffedffed
 80084e4:	ffedffed 	.word	0xffedffed
 80084e8:	0083009f 	.word	0x0083009f
 80084ec:	ffed004b 	.word	0xffed004b
 80084f0:	009dffed 	.word	0x009dffed
 80084f4:	007dffed 	.word	0x007dffed
 80084f8:	ffedffed 	.word	0xffedffed
 80084fc:	0051      	.short	0x0051
 80084fe:	3d45      	subs	r5, #69	; 0x45
 8008500:	2d02      	cmp	r5, #2
 8008502:	d8c8      	bhi.n	8008496 <__ssvfiscanf_r+0xe2>
 8008504:	2305      	movs	r3, #5
 8008506:	e06c      	b.n	80085e2 <__ssvfiscanf_r+0x22e>
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dd0e      	ble.n	800852c <__ssvfiscanf_r+0x178>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	42aa      	cmp	r2, r5
 8008514:	d000      	beq.n	8008518 <__ssvfiscanf_r+0x164>
 8008516:	e0bc      	b.n	8008692 <__ssvfiscanf_r+0x2de>
 8008518:	3301      	adds	r3, #1
 800851a:	6862      	ldr	r2, [r4, #4]
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008520:	3a01      	subs	r2, #1
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	6062      	str	r2, [r4, #4]
 8008528:	9347      	str	r3, [sp, #284]	; 0x11c
 800852a:	e76e      	b.n	800840a <__ssvfiscanf_r+0x56>
 800852c:	22c0      	movs	r2, #192	; 0xc0
 800852e:	ab43      	add	r3, sp, #268	; 0x10c
 8008530:	0052      	lsls	r2, r2, #1
 8008532:	589b      	ldr	r3, [r3, r2]
 8008534:	0021      	movs	r1, r4
 8008536:	0030      	movs	r0, r6
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	4798      	blx	r3
 800853c:	2800      	cmp	r0, #0
 800853e:	d0e6      	beq.n	800850e <__ssvfiscanf_r+0x15a>
 8008540:	9846      	ldr	r0, [sp, #280]	; 0x118
 8008542:	2800      	cmp	r0, #0
 8008544:	d000      	beq.n	8008548 <__ssvfiscanf_r+0x194>
 8008546:	e09d      	b.n	8008684 <__ssvfiscanf_r+0x2d0>
 8008548:	3801      	subs	r0, #1
 800854a:	23a5      	movs	r3, #165	; 0xa5
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	449d      	add	sp, r3
 8008550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008552:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	2320      	movs	r3, #32
 8008558:	9a00      	ldr	r2, [sp, #0]
 800855a:	4313      	orrs	r3, r2
 800855c:	9343      	str	r3, [sp, #268]	; 0x10c
 800855e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	2380      	movs	r3, #128	; 0x80
 8008564:	9a00      	ldr	r2, [sp, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4313      	orrs	r3, r2
 800856a:	9343      	str	r3, [sp, #268]	; 0x10c
 800856c:	2310      	movs	r3, #16
 800856e:	9344      	str	r3, [sp, #272]	; 0x110
 8008570:	236e      	movs	r3, #110	; 0x6e
 8008572:	42ab      	cmp	r3, r5
 8008574:	41ad      	sbcs	r5, r5
 8008576:	426d      	negs	r5, r5
 8008578:	3503      	adds	r5, #3
 800857a:	9549      	str	r5, [sp, #292]	; 0x124
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	dd4a      	ble.n	8008618 <__ssvfiscanf_r+0x264>
 8008582:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	065b      	lsls	r3, r3, #25
 8008588:	d406      	bmi.n	8008598 <__ssvfiscanf_r+0x1e4>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	4945      	ldr	r1, [pc, #276]	; (80086a4 <__ssvfiscanf_r+0x2f0>)
 800858e:	781a      	ldrb	r2, [r3, #0]
 8008590:	5c8a      	ldrb	r2, [r1, r2]
 8008592:	2108      	movs	r1, #8
 8008594:	420a      	tst	r2, r1
 8008596:	d14a      	bne.n	800862e <__ssvfiscanf_r+0x27a>
 8008598:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800859a:	2b02      	cmp	r3, #2
 800859c:	dc5e      	bgt.n	800865c <__ssvfiscanf_r+0x2a8>
 800859e:	0022      	movs	r2, r4
 80085a0:	0030      	movs	r0, r6
 80085a2:	ab02      	add	r3, sp, #8
 80085a4:	a943      	add	r1, sp, #268	; 0x10c
 80085a6:	f000 fa05 	bl	80089b4 <_scanf_chars>
 80085aa:	2801      	cmp	r0, #1
 80085ac:	d071      	beq.n	8008692 <__ssvfiscanf_r+0x2de>
 80085ae:	2802      	cmp	r0, #2
 80085b0:	d000      	beq.n	80085b4 <__ssvfiscanf_r+0x200>
 80085b2:	e72a      	b.n	800840a <__ssvfiscanf_r+0x56>
 80085b4:	e7c4      	b.n	8008540 <__ssvfiscanf_r+0x18c>
 80085b6:	230a      	movs	r3, #10
 80085b8:	e7d9      	b.n	800856e <__ssvfiscanf_r+0x1ba>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2503      	movs	r5, #3
 80085be:	9344      	str	r3, [sp, #272]	; 0x110
 80085c0:	e7db      	b.n	800857a <__ssvfiscanf_r+0x1c6>
 80085c2:	2308      	movs	r3, #8
 80085c4:	2504      	movs	r5, #4
 80085c6:	9344      	str	r3, [sp, #272]	; 0x110
 80085c8:	e7d7      	b.n	800857a <__ssvfiscanf_r+0x1c6>
 80085ca:	0039      	movs	r1, r7
 80085cc:	a803      	add	r0, sp, #12
 80085ce:	f000 fb53 	bl	8008c78 <__sccl>
 80085d2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80085d4:	0007      	movs	r7, r0
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	9a00      	ldr	r2, [sp, #0]
 80085dc:	4313      	orrs	r3, r2
 80085de:	9343      	str	r3, [sp, #268]	; 0x10c
 80085e0:	2301      	movs	r3, #1
 80085e2:	9349      	str	r3, [sp, #292]	; 0x124
 80085e4:	e7ca      	b.n	800857c <__ssvfiscanf_r+0x1c8>
 80085e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	2340      	movs	r3, #64	; 0x40
 80085ec:	9a00      	ldr	r2, [sp, #0]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80085f2:	2300      	movs	r3, #0
 80085f4:	e7f5      	b.n	80085e2 <__ssvfiscanf_r+0x22e>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e7f3      	b.n	80085e2 <__ssvfiscanf_r+0x22e>
 80085fa:	9843      	ldr	r0, [sp, #268]	; 0x10c
 80085fc:	06c3      	lsls	r3, r0, #27
 80085fe:	d500      	bpl.n	8008602 <__ssvfiscanf_r+0x24e>
 8008600:	e703      	b.n	800840a <__ssvfiscanf_r+0x56>
 8008602:	9b02      	ldr	r3, [sp, #8]
 8008604:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008606:	1d19      	adds	r1, r3, #4
 8008608:	9102      	str	r1, [sp, #8]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	07c5      	lsls	r5, r0, #31
 800860e:	d501      	bpl.n	8008614 <__ssvfiscanf_r+0x260>
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	e6fa      	b.n	800840a <__ssvfiscanf_r+0x56>
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	e6f8      	b.n	800840a <__ssvfiscanf_r+0x56>
 8008618:	22c0      	movs	r2, #192	; 0xc0
 800861a:	ab43      	add	r3, sp, #268	; 0x10c
 800861c:	0052      	lsls	r2, r2, #1
 800861e:	589b      	ldr	r3, [r3, r2]
 8008620:	0021      	movs	r1, r4
 8008622:	0030      	movs	r0, r6
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	4798      	blx	r3
 8008628:	2800      	cmp	r0, #0
 800862a:	d0aa      	beq.n	8008582 <__ssvfiscanf_r+0x1ce>
 800862c:	e788      	b.n	8008540 <__ssvfiscanf_r+0x18c>
 800862e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008630:	9200      	str	r2, [sp, #0]
 8008632:	3201      	adds	r2, #1
 8008634:	9247      	str	r2, [sp, #284]	; 0x11c
 8008636:	6862      	ldr	r2, [r4, #4]
 8008638:	3a01      	subs	r2, #1
 800863a:	6062      	str	r2, [r4, #4]
 800863c:	2a00      	cmp	r2, #0
 800863e:	dd02      	ble.n	8008646 <__ssvfiscanf_r+0x292>
 8008640:	3301      	adds	r3, #1
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	e7a1      	b.n	800858a <__ssvfiscanf_r+0x1d6>
 8008646:	22c0      	movs	r2, #192	; 0xc0
 8008648:	ab43      	add	r3, sp, #268	; 0x10c
 800864a:	0052      	lsls	r2, r2, #1
 800864c:	589b      	ldr	r3, [r3, r2]
 800864e:	0021      	movs	r1, r4
 8008650:	0030      	movs	r0, r6
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4798      	blx	r3
 8008656:	2800      	cmp	r0, #0
 8008658:	d097      	beq.n	800858a <__ssvfiscanf_r+0x1d6>
 800865a:	e771      	b.n	8008540 <__ssvfiscanf_r+0x18c>
 800865c:	2b04      	cmp	r3, #4
 800865e:	dc06      	bgt.n	800866e <__ssvfiscanf_r+0x2ba>
 8008660:	0022      	movs	r2, r4
 8008662:	0030      	movs	r0, r6
 8008664:	ab02      	add	r3, sp, #8
 8008666:	a943      	add	r1, sp, #268	; 0x10c
 8008668:	f000 fa02 	bl	8008a70 <_scanf_i>
 800866c:	e79d      	b.n	80085aa <__ssvfiscanf_r+0x1f6>
 800866e:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <__ssvfiscanf_r+0x2f8>)
 8008670:	2b00      	cmp	r3, #0
 8008672:	d100      	bne.n	8008676 <__ssvfiscanf_r+0x2c2>
 8008674:	e6c9      	b.n	800840a <__ssvfiscanf_r+0x56>
 8008676:	0022      	movs	r2, r4
 8008678:	0030      	movs	r0, r6
 800867a:	ab02      	add	r3, sp, #8
 800867c:	a943      	add	r1, sp, #268	; 0x10c
 800867e:	e000      	b.n	8008682 <__ssvfiscanf_r+0x2ce>
 8008680:	bf00      	nop
 8008682:	e792      	b.n	80085aa <__ssvfiscanf_r+0x1f6>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	065b      	lsls	r3, r3, #25
 8008688:	d400      	bmi.n	800868c <__ssvfiscanf_r+0x2d8>
 800868a:	e75e      	b.n	800854a <__ssvfiscanf_r+0x196>
 800868c:	2001      	movs	r0, #1
 800868e:	4240      	negs	r0, r0
 8008690:	e75b      	b.n	800854a <__ssvfiscanf_r+0x196>
 8008692:	9846      	ldr	r0, [sp, #280]	; 0x118
 8008694:	e759      	b.n	800854a <__ssvfiscanf_r+0x196>
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	fffffd6c 	.word	0xfffffd6c
 800869c:	080082fd 	.word	0x080082fd
 80086a0:	08008375 	.word	0x08008375
 80086a4:	08009e47 	.word	0x08009e47
 80086a8:	08009dfe 	.word	0x08009dfe
 80086ac:	00000000 	.word	0x00000000

080086b0 <_printf_common>:
 80086b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086b2:	0015      	movs	r5, r2
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	688a      	ldr	r2, [r1, #8]
 80086b8:	690b      	ldr	r3, [r1, #16]
 80086ba:	000c      	movs	r4, r1
 80086bc:	9000      	str	r0, [sp, #0]
 80086be:	4293      	cmp	r3, r2
 80086c0:	da00      	bge.n	80086c4 <_printf_common+0x14>
 80086c2:	0013      	movs	r3, r2
 80086c4:	0022      	movs	r2, r4
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	3243      	adds	r2, #67	; 0x43
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	2a00      	cmp	r2, #0
 80086ce:	d001      	beq.n	80086d4 <_printf_common+0x24>
 80086d0:	3301      	adds	r3, #1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	069b      	lsls	r3, r3, #26
 80086d8:	d502      	bpl.n	80086e0 <_printf_common+0x30>
 80086da:	682b      	ldr	r3, [r5, #0]
 80086dc:	3302      	adds	r3, #2
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	2306      	movs	r3, #6
 80086e4:	0017      	movs	r7, r2
 80086e6:	401f      	ands	r7, r3
 80086e8:	421a      	tst	r2, r3
 80086ea:	d027      	beq.n	800873c <_printf_common+0x8c>
 80086ec:	0023      	movs	r3, r4
 80086ee:	3343      	adds	r3, #67	; 0x43
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	1e5a      	subs	r2, r3, #1
 80086f4:	4193      	sbcs	r3, r2
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	0692      	lsls	r2, r2, #26
 80086fa:	d430      	bmi.n	800875e <_printf_common+0xae>
 80086fc:	0022      	movs	r2, r4
 80086fe:	9901      	ldr	r1, [sp, #4]
 8008700:	9800      	ldr	r0, [sp, #0]
 8008702:	9e08      	ldr	r6, [sp, #32]
 8008704:	3243      	adds	r2, #67	; 0x43
 8008706:	47b0      	blx	r6
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d025      	beq.n	8008758 <_printf_common+0xa8>
 800870c:	2306      	movs	r3, #6
 800870e:	6820      	ldr	r0, [r4, #0]
 8008710:	682a      	ldr	r2, [r5, #0]
 8008712:	68e1      	ldr	r1, [r4, #12]
 8008714:	2500      	movs	r5, #0
 8008716:	4003      	ands	r3, r0
 8008718:	2b04      	cmp	r3, #4
 800871a:	d103      	bne.n	8008724 <_printf_common+0x74>
 800871c:	1a8d      	subs	r5, r1, r2
 800871e:	43eb      	mvns	r3, r5
 8008720:	17db      	asrs	r3, r3, #31
 8008722:	401d      	ands	r5, r3
 8008724:	68a3      	ldr	r3, [r4, #8]
 8008726:	6922      	ldr	r2, [r4, #16]
 8008728:	4293      	cmp	r3, r2
 800872a:	dd01      	ble.n	8008730 <_printf_common+0x80>
 800872c:	1a9b      	subs	r3, r3, r2
 800872e:	18ed      	adds	r5, r5, r3
 8008730:	2700      	movs	r7, #0
 8008732:	42bd      	cmp	r5, r7
 8008734:	d120      	bne.n	8008778 <_printf_common+0xc8>
 8008736:	2000      	movs	r0, #0
 8008738:	e010      	b.n	800875c <_printf_common+0xac>
 800873a:	3701      	adds	r7, #1
 800873c:	68e3      	ldr	r3, [r4, #12]
 800873e:	682a      	ldr	r2, [r5, #0]
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	42bb      	cmp	r3, r7
 8008744:	ddd2      	ble.n	80086ec <_printf_common+0x3c>
 8008746:	0022      	movs	r2, r4
 8008748:	2301      	movs	r3, #1
 800874a:	9901      	ldr	r1, [sp, #4]
 800874c:	9800      	ldr	r0, [sp, #0]
 800874e:	9e08      	ldr	r6, [sp, #32]
 8008750:	3219      	adds	r2, #25
 8008752:	47b0      	blx	r6
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d1f0      	bne.n	800873a <_printf_common+0x8a>
 8008758:	2001      	movs	r0, #1
 800875a:	4240      	negs	r0, r0
 800875c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800875e:	2030      	movs	r0, #48	; 0x30
 8008760:	18e1      	adds	r1, r4, r3
 8008762:	3143      	adds	r1, #67	; 0x43
 8008764:	7008      	strb	r0, [r1, #0]
 8008766:	0021      	movs	r1, r4
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	3145      	adds	r1, #69	; 0x45
 800876c:	7809      	ldrb	r1, [r1, #0]
 800876e:	18a2      	adds	r2, r4, r2
 8008770:	3243      	adds	r2, #67	; 0x43
 8008772:	3302      	adds	r3, #2
 8008774:	7011      	strb	r1, [r2, #0]
 8008776:	e7c1      	b.n	80086fc <_printf_common+0x4c>
 8008778:	0022      	movs	r2, r4
 800877a:	2301      	movs	r3, #1
 800877c:	9901      	ldr	r1, [sp, #4]
 800877e:	9800      	ldr	r0, [sp, #0]
 8008780:	9e08      	ldr	r6, [sp, #32]
 8008782:	321a      	adds	r2, #26
 8008784:	47b0      	blx	r6
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	d0e6      	beq.n	8008758 <_printf_common+0xa8>
 800878a:	3701      	adds	r7, #1
 800878c:	e7d1      	b.n	8008732 <_printf_common+0x82>
	...

08008790 <_printf_i>:
 8008790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008792:	b08b      	sub	sp, #44	; 0x2c
 8008794:	9206      	str	r2, [sp, #24]
 8008796:	000a      	movs	r2, r1
 8008798:	3243      	adds	r2, #67	; 0x43
 800879a:	9307      	str	r3, [sp, #28]
 800879c:	9005      	str	r0, [sp, #20]
 800879e:	9204      	str	r2, [sp, #16]
 80087a0:	7e0a      	ldrb	r2, [r1, #24]
 80087a2:	000c      	movs	r4, r1
 80087a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087a6:	2a78      	cmp	r2, #120	; 0x78
 80087a8:	d807      	bhi.n	80087ba <_printf_i+0x2a>
 80087aa:	2a62      	cmp	r2, #98	; 0x62
 80087ac:	d809      	bhi.n	80087c2 <_printf_i+0x32>
 80087ae:	2a00      	cmp	r2, #0
 80087b0:	d100      	bne.n	80087b4 <_printf_i+0x24>
 80087b2:	e0c1      	b.n	8008938 <_printf_i+0x1a8>
 80087b4:	2a58      	cmp	r2, #88	; 0x58
 80087b6:	d100      	bne.n	80087ba <_printf_i+0x2a>
 80087b8:	e08c      	b.n	80088d4 <_printf_i+0x144>
 80087ba:	0026      	movs	r6, r4
 80087bc:	3642      	adds	r6, #66	; 0x42
 80087be:	7032      	strb	r2, [r6, #0]
 80087c0:	e022      	b.n	8008808 <_printf_i+0x78>
 80087c2:	0010      	movs	r0, r2
 80087c4:	3863      	subs	r0, #99	; 0x63
 80087c6:	2815      	cmp	r0, #21
 80087c8:	d8f7      	bhi.n	80087ba <_printf_i+0x2a>
 80087ca:	f7f7 fca1 	bl	8000110 <__gnu_thumb1_case_shi>
 80087ce:	0016      	.short	0x0016
 80087d0:	fff6001f 	.word	0xfff6001f
 80087d4:	fff6fff6 	.word	0xfff6fff6
 80087d8:	001ffff6 	.word	0x001ffff6
 80087dc:	fff6fff6 	.word	0xfff6fff6
 80087e0:	fff6fff6 	.word	0xfff6fff6
 80087e4:	003600a8 	.word	0x003600a8
 80087e8:	fff6009a 	.word	0xfff6009a
 80087ec:	00b9fff6 	.word	0x00b9fff6
 80087f0:	0036fff6 	.word	0x0036fff6
 80087f4:	fff6fff6 	.word	0xfff6fff6
 80087f8:	009e      	.short	0x009e
 80087fa:	0026      	movs	r6, r4
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	3642      	adds	r6, #66	; 0x42
 8008800:	1d11      	adds	r1, r2, #4
 8008802:	6019      	str	r1, [r3, #0]
 8008804:	6813      	ldr	r3, [r2, #0]
 8008806:	7033      	strb	r3, [r6, #0]
 8008808:	2301      	movs	r3, #1
 800880a:	e0a7      	b.n	800895c <_printf_i+0x1cc>
 800880c:	6808      	ldr	r0, [r1, #0]
 800880e:	6819      	ldr	r1, [r3, #0]
 8008810:	1d0a      	adds	r2, r1, #4
 8008812:	0605      	lsls	r5, r0, #24
 8008814:	d50b      	bpl.n	800882e <_printf_i+0x9e>
 8008816:	680d      	ldr	r5, [r1, #0]
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	2d00      	cmp	r5, #0
 800881c:	da03      	bge.n	8008826 <_printf_i+0x96>
 800881e:	232d      	movs	r3, #45	; 0x2d
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	426d      	negs	r5, r5
 8008824:	7013      	strb	r3, [r2, #0]
 8008826:	4b61      	ldr	r3, [pc, #388]	; (80089ac <_printf_i+0x21c>)
 8008828:	270a      	movs	r7, #10
 800882a:	9303      	str	r3, [sp, #12]
 800882c:	e01b      	b.n	8008866 <_printf_i+0xd6>
 800882e:	680d      	ldr	r5, [r1, #0]
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	0641      	lsls	r1, r0, #25
 8008834:	d5f1      	bpl.n	800881a <_printf_i+0x8a>
 8008836:	b22d      	sxth	r5, r5
 8008838:	e7ef      	b.n	800881a <_printf_i+0x8a>
 800883a:	680d      	ldr	r5, [r1, #0]
 800883c:	6819      	ldr	r1, [r3, #0]
 800883e:	1d08      	adds	r0, r1, #4
 8008840:	6018      	str	r0, [r3, #0]
 8008842:	062e      	lsls	r6, r5, #24
 8008844:	d501      	bpl.n	800884a <_printf_i+0xba>
 8008846:	680d      	ldr	r5, [r1, #0]
 8008848:	e003      	b.n	8008852 <_printf_i+0xc2>
 800884a:	066d      	lsls	r5, r5, #25
 800884c:	d5fb      	bpl.n	8008846 <_printf_i+0xb6>
 800884e:	680d      	ldr	r5, [r1, #0]
 8008850:	b2ad      	uxth	r5, r5
 8008852:	4b56      	ldr	r3, [pc, #344]	; (80089ac <_printf_i+0x21c>)
 8008854:	2708      	movs	r7, #8
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	2a6f      	cmp	r2, #111	; 0x6f
 800885a:	d000      	beq.n	800885e <_printf_i+0xce>
 800885c:	3702      	adds	r7, #2
 800885e:	0023      	movs	r3, r4
 8008860:	2200      	movs	r2, #0
 8008862:	3343      	adds	r3, #67	; 0x43
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	60a3      	str	r3, [r4, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	db03      	blt.n	8008876 <_printf_i+0xe6>
 800886e:	2204      	movs	r2, #4
 8008870:	6821      	ldr	r1, [r4, #0]
 8008872:	4391      	bics	r1, r2
 8008874:	6021      	str	r1, [r4, #0]
 8008876:	2d00      	cmp	r5, #0
 8008878:	d102      	bne.n	8008880 <_printf_i+0xf0>
 800887a:	9e04      	ldr	r6, [sp, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00c      	beq.n	800889a <_printf_i+0x10a>
 8008880:	9e04      	ldr	r6, [sp, #16]
 8008882:	0028      	movs	r0, r5
 8008884:	0039      	movs	r1, r7
 8008886:	f7f7 fcd3 	bl	8000230 <__aeabi_uidivmod>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	3e01      	subs	r6, #1
 800888e:	5c5b      	ldrb	r3, [r3, r1]
 8008890:	7033      	strb	r3, [r6, #0]
 8008892:	002b      	movs	r3, r5
 8008894:	0005      	movs	r5, r0
 8008896:	429f      	cmp	r7, r3
 8008898:	d9f3      	bls.n	8008882 <_printf_i+0xf2>
 800889a:	2f08      	cmp	r7, #8
 800889c:	d109      	bne.n	80088b2 <_printf_i+0x122>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	07db      	lsls	r3, r3, #31
 80088a2:	d506      	bpl.n	80088b2 <_printf_i+0x122>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	6922      	ldr	r2, [r4, #16]
 80088a8:	4293      	cmp	r3, r2
 80088aa:	dc02      	bgt.n	80088b2 <_printf_i+0x122>
 80088ac:	2330      	movs	r3, #48	; 0x30
 80088ae:	3e01      	subs	r6, #1
 80088b0:	7033      	strb	r3, [r6, #0]
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	1b9b      	subs	r3, r3, r6
 80088b6:	6123      	str	r3, [r4, #16]
 80088b8:	9b07      	ldr	r3, [sp, #28]
 80088ba:	0021      	movs	r1, r4
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	9805      	ldr	r0, [sp, #20]
 80088c0:	9b06      	ldr	r3, [sp, #24]
 80088c2:	aa09      	add	r2, sp, #36	; 0x24
 80088c4:	f7ff fef4 	bl	80086b0 <_printf_common>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d14c      	bne.n	8008966 <_printf_i+0x1d6>
 80088cc:	2001      	movs	r0, #1
 80088ce:	4240      	negs	r0, r0
 80088d0:	b00b      	add	sp, #44	; 0x2c
 80088d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d4:	3145      	adds	r1, #69	; 0x45
 80088d6:	700a      	strb	r2, [r1, #0]
 80088d8:	4a34      	ldr	r2, [pc, #208]	; (80089ac <_printf_i+0x21c>)
 80088da:	9203      	str	r2, [sp, #12]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	6821      	ldr	r1, [r4, #0]
 80088e0:	ca20      	ldmia	r2!, {r5}
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	0608      	lsls	r0, r1, #24
 80088e6:	d516      	bpl.n	8008916 <_printf_i+0x186>
 80088e8:	07cb      	lsls	r3, r1, #31
 80088ea:	d502      	bpl.n	80088f2 <_printf_i+0x162>
 80088ec:	2320      	movs	r3, #32
 80088ee:	4319      	orrs	r1, r3
 80088f0:	6021      	str	r1, [r4, #0]
 80088f2:	2710      	movs	r7, #16
 80088f4:	2d00      	cmp	r5, #0
 80088f6:	d1b2      	bne.n	800885e <_printf_i+0xce>
 80088f8:	2320      	movs	r3, #32
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	439a      	bics	r2, r3
 80088fe:	6022      	str	r2, [r4, #0]
 8008900:	e7ad      	b.n	800885e <_printf_i+0xce>
 8008902:	2220      	movs	r2, #32
 8008904:	6809      	ldr	r1, [r1, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	6022      	str	r2, [r4, #0]
 800890a:	0022      	movs	r2, r4
 800890c:	2178      	movs	r1, #120	; 0x78
 800890e:	3245      	adds	r2, #69	; 0x45
 8008910:	7011      	strb	r1, [r2, #0]
 8008912:	4a27      	ldr	r2, [pc, #156]	; (80089b0 <_printf_i+0x220>)
 8008914:	e7e1      	b.n	80088da <_printf_i+0x14a>
 8008916:	0648      	lsls	r0, r1, #25
 8008918:	d5e6      	bpl.n	80088e8 <_printf_i+0x158>
 800891a:	b2ad      	uxth	r5, r5
 800891c:	e7e4      	b.n	80088e8 <_printf_i+0x158>
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	680d      	ldr	r5, [r1, #0]
 8008922:	1d10      	adds	r0, r2, #4
 8008924:	6949      	ldr	r1, [r1, #20]
 8008926:	6018      	str	r0, [r3, #0]
 8008928:	6813      	ldr	r3, [r2, #0]
 800892a:	062e      	lsls	r6, r5, #24
 800892c:	d501      	bpl.n	8008932 <_printf_i+0x1a2>
 800892e:	6019      	str	r1, [r3, #0]
 8008930:	e002      	b.n	8008938 <_printf_i+0x1a8>
 8008932:	066d      	lsls	r5, r5, #25
 8008934:	d5fb      	bpl.n	800892e <_printf_i+0x19e>
 8008936:	8019      	strh	r1, [r3, #0]
 8008938:	2300      	movs	r3, #0
 800893a:	9e04      	ldr	r6, [sp, #16]
 800893c:	6123      	str	r3, [r4, #16]
 800893e:	e7bb      	b.n	80088b8 <_printf_i+0x128>
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	1d11      	adds	r1, r2, #4
 8008944:	6019      	str	r1, [r3, #0]
 8008946:	6816      	ldr	r6, [r2, #0]
 8008948:	2100      	movs	r1, #0
 800894a:	0030      	movs	r0, r6
 800894c:	6862      	ldr	r2, [r4, #4]
 800894e:	f000 fb2f 	bl	8008fb0 <memchr>
 8008952:	2800      	cmp	r0, #0
 8008954:	d001      	beq.n	800895a <_printf_i+0x1ca>
 8008956:	1b80      	subs	r0, r0, r6
 8008958:	6060      	str	r0, [r4, #4]
 800895a:	6863      	ldr	r3, [r4, #4]
 800895c:	6123      	str	r3, [r4, #16]
 800895e:	2300      	movs	r3, #0
 8008960:	9a04      	ldr	r2, [sp, #16]
 8008962:	7013      	strb	r3, [r2, #0]
 8008964:	e7a8      	b.n	80088b8 <_printf_i+0x128>
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	0032      	movs	r2, r6
 800896a:	9906      	ldr	r1, [sp, #24]
 800896c:	9805      	ldr	r0, [sp, #20]
 800896e:	9d07      	ldr	r5, [sp, #28]
 8008970:	47a8      	blx	r5
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d0aa      	beq.n	80088cc <_printf_i+0x13c>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	079b      	lsls	r3, r3, #30
 800897a:	d415      	bmi.n	80089a8 <_printf_i+0x218>
 800897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897e:	68e0      	ldr	r0, [r4, #12]
 8008980:	4298      	cmp	r0, r3
 8008982:	daa5      	bge.n	80088d0 <_printf_i+0x140>
 8008984:	0018      	movs	r0, r3
 8008986:	e7a3      	b.n	80088d0 <_printf_i+0x140>
 8008988:	0022      	movs	r2, r4
 800898a:	2301      	movs	r3, #1
 800898c:	9906      	ldr	r1, [sp, #24]
 800898e:	9805      	ldr	r0, [sp, #20]
 8008990:	9e07      	ldr	r6, [sp, #28]
 8008992:	3219      	adds	r2, #25
 8008994:	47b0      	blx	r6
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d098      	beq.n	80088cc <_printf_i+0x13c>
 800899a:	3501      	adds	r5, #1
 800899c:	68e3      	ldr	r3, [r4, #12]
 800899e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	42ab      	cmp	r3, r5
 80089a4:	dcf0      	bgt.n	8008988 <_printf_i+0x1f8>
 80089a6:	e7e9      	b.n	800897c <_printf_i+0x1ec>
 80089a8:	2500      	movs	r5, #0
 80089aa:	e7f7      	b.n	800899c <_printf_i+0x20c>
 80089ac:	08009e09 	.word	0x08009e09
 80089b0:	08009e1a 	.word	0x08009e1a

080089b4 <_scanf_chars>:
 80089b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089b6:	0015      	movs	r5, r2
 80089b8:	688a      	ldr	r2, [r1, #8]
 80089ba:	000c      	movs	r4, r1
 80089bc:	9001      	str	r0, [sp, #4]
 80089be:	2a00      	cmp	r2, #0
 80089c0:	d105      	bne.n	80089ce <_scanf_chars+0x1a>
 80089c2:	6989      	ldr	r1, [r1, #24]
 80089c4:	3201      	adds	r2, #1
 80089c6:	2900      	cmp	r1, #0
 80089c8:	d000      	beq.n	80089cc <_scanf_chars+0x18>
 80089ca:	3a02      	subs	r2, #2
 80089cc:	60a2      	str	r2, [r4, #8]
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	06d2      	lsls	r2, r2, #27
 80089d2:	d403      	bmi.n	80089dc <_scanf_chars+0x28>
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	1d11      	adds	r1, r2, #4
 80089d8:	6019      	str	r1, [r3, #0]
 80089da:	6817      	ldr	r7, [r2, #0]
 80089dc:	2600      	movs	r6, #0
 80089de:	69a0      	ldr	r0, [r4, #24]
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d013      	beq.n	8008a0c <_scanf_chars+0x58>
 80089e4:	2801      	cmp	r0, #1
 80089e6:	d108      	bne.n	80089fa <_scanf_chars+0x46>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	6962      	ldr	r2, [r4, #20]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	5cd3      	ldrb	r3, [r2, r3]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <_scanf_chars+0x58>
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	d038      	beq.n	8008a6a <_scanf_chars+0xb6>
 80089f8:	e026      	b.n	8008a48 <_scanf_chars+0x94>
 80089fa:	2802      	cmp	r0, #2
 80089fc:	d124      	bne.n	8008a48 <_scanf_chars+0x94>
 80089fe:	682b      	ldr	r3, [r5, #0]
 8008a00:	4a1a      	ldr	r2, [pc, #104]	; (8008a6c <_scanf_chars+0xb8>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	5cd3      	ldrb	r3, [r2, r3]
 8008a06:	2208      	movs	r2, #8
 8008a08:	4213      	tst	r3, r2
 8008a0a:	d11d      	bne.n	8008a48 <_scanf_chars+0x94>
 8008a0c:	2210      	movs	r2, #16
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	3601      	adds	r6, #1
 8008a12:	4213      	tst	r3, r2
 8008a14:	d103      	bne.n	8008a1e <_scanf_chars+0x6a>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	703b      	strb	r3, [r7, #0]
 8008a1c:	3701      	adds	r7, #1
 8008a1e:	682a      	ldr	r2, [r5, #0]
 8008a20:	686b      	ldr	r3, [r5, #4]
 8008a22:	3201      	adds	r2, #1
 8008a24:	602a      	str	r2, [r5, #0]
 8008a26:	68a2      	ldr	r2, [r4, #8]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	3a01      	subs	r2, #1
 8008a2c:	606b      	str	r3, [r5, #4]
 8008a2e:	60a2      	str	r2, [r4, #8]
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	d009      	beq.n	8008a48 <_scanf_chars+0x94>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dcd2      	bgt.n	80089de <_scanf_chars+0x2a>
 8008a38:	23c0      	movs	r3, #192	; 0xc0
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	0029      	movs	r1, r5
 8008a3e:	58e3      	ldr	r3, [r4, r3]
 8008a40:	9801      	ldr	r0, [sp, #4]
 8008a42:	4798      	blx	r3
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d0ca      	beq.n	80089de <_scanf_chars+0x2a>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	0011      	movs	r1, r2
 8008a4e:	4019      	ands	r1, r3
 8008a50:	421a      	tst	r2, r3
 8008a52:	d106      	bne.n	8008a62 <_scanf_chars+0xae>
 8008a54:	68e3      	ldr	r3, [r4, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60e3      	str	r3, [r4, #12]
 8008a5a:	69a3      	ldr	r3, [r4, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d000      	beq.n	8008a62 <_scanf_chars+0xae>
 8008a60:	7039      	strb	r1, [r7, #0]
 8008a62:	2000      	movs	r0, #0
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	199e      	adds	r6, r3, r6
 8008a68:	6126      	str	r6, [r4, #16]
 8008a6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a6c:	08009e47 	.word	0x08009e47

08008a70 <_scanf_i>:
 8008a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a72:	000c      	movs	r4, r1
 8008a74:	b08d      	sub	sp, #52	; 0x34
 8008a76:	9302      	str	r3, [sp, #8]
 8008a78:	4b79      	ldr	r3, [pc, #484]	; (8008c60 <_scanf_i+0x1f0>)
 8008a7a:	0016      	movs	r6, r2
 8008a7c:	9005      	str	r0, [sp, #20]
 8008a7e:	aa09      	add	r2, sp, #36	; 0x24
 8008a80:	cb23      	ldmia	r3!, {r0, r1, r5}
 8008a82:	c223      	stmia	r2!, {r0, r1, r5}
 8008a84:	4b77      	ldr	r3, [pc, #476]	; (8008c64 <_scanf_i+0x1f4>)
 8008a86:	9306      	str	r3, [sp, #24]
 8008a88:	69a3      	ldr	r3, [r4, #24]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d001      	beq.n	8008a92 <_scanf_i+0x22>
 8008a8e:	4b76      	ldr	r3, [pc, #472]	; (8008c68 <_scanf_i+0x1f8>)
 8008a90:	9306      	str	r3, [sp, #24]
 8008a92:	22ae      	movs	r2, #174	; 0xae
 8008a94:	2000      	movs	r0, #0
 8008a96:	68a3      	ldr	r3, [r4, #8]
 8008a98:	0052      	lsls	r2, r2, #1
 8008a9a:	1e59      	subs	r1, r3, #1
 8008a9c:	9004      	str	r0, [sp, #16]
 8008a9e:	4291      	cmp	r1, r2
 8008aa0:	d905      	bls.n	8008aae <_scanf_i+0x3e>
 8008aa2:	3b5e      	subs	r3, #94	; 0x5e
 8008aa4:	3bff      	subs	r3, #255	; 0xff
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	235e      	movs	r3, #94	; 0x5e
 8008aaa:	33ff      	adds	r3, #255	; 0xff
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	0023      	movs	r3, r4
 8008ab0:	331c      	adds	r3, #28
 8008ab2:	9301      	str	r3, [sp, #4]
 8008ab4:	23d0      	movs	r3, #208	; 0xd0
 8008ab6:	2700      	movs	r7, #0
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	4313      	orrs	r3, r2
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	9303      	str	r3, [sp, #12]
 8008ac4:	6833      	ldr	r3, [r6, #0]
 8008ac6:	a809      	add	r0, sp, #36	; 0x24
 8008ac8:	7819      	ldrb	r1, [r3, #0]
 8008aca:	00bb      	lsls	r3, r7, #2
 8008acc:	2202      	movs	r2, #2
 8008ace:	5818      	ldr	r0, [r3, r0]
 8008ad0:	f000 fa6e 	bl	8008fb0 <memchr>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d02b      	beq.n	8008b30 <_scanf_i+0xc0>
 8008ad8:	2f01      	cmp	r7, #1
 8008ada:	d162      	bne.n	8008ba2 <_scanf_i+0x132>
 8008adc:	6863      	ldr	r3, [r4, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d106      	bne.n	8008af0 <_scanf_i+0x80>
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	6822      	ldr	r2, [r4, #0]
 8008ae6:	6063      	str	r3, [r4, #4]
 8008ae8:	33f9      	adds	r3, #249	; 0xf9
 8008aea:	33ff      	adds	r3, #255	; 0xff
 8008aec:	4313      	orrs	r3, r2
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	4b5e      	ldr	r3, [pc, #376]	; (8008c6c <_scanf_i+0x1fc>)
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	4013      	ands	r3, r2
 8008af6:	6023      	str	r3, [r4, #0]
 8008af8:	68a3      	ldr	r3, [r4, #8]
 8008afa:	1e5a      	subs	r2, r3, #1
 8008afc:	60a2      	str	r2, [r4, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d016      	beq.n	8008b30 <_scanf_i+0xc0>
 8008b02:	6833      	ldr	r3, [r6, #0]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	6032      	str	r2, [r6, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	9a03      	ldr	r2, [sp, #12]
 8008b0c:	7013      	strb	r3, [r2, #0]
 8008b0e:	6873      	ldr	r3, [r6, #4]
 8008b10:	1c55      	adds	r5, r2, #1
 8008b12:	3b01      	subs	r3, #1
 8008b14:	6073      	str	r3, [r6, #4]
 8008b16:	9503      	str	r5, [sp, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	dc09      	bgt.n	8008b30 <_scanf_i+0xc0>
 8008b1c:	23c0      	movs	r3, #192	; 0xc0
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	58e3      	ldr	r3, [r4, r3]
 8008b22:	0031      	movs	r1, r6
 8008b24:	9805      	ldr	r0, [sp, #20]
 8008b26:	9307      	str	r3, [sp, #28]
 8008b28:	4798      	blx	r3
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d000      	beq.n	8008b30 <_scanf_i+0xc0>
 8008b2e:	e081      	b.n	8008c34 <_scanf_i+0x1c4>
 8008b30:	3701      	adds	r7, #1
 8008b32:	2f03      	cmp	r7, #3
 8008b34:	d1c6      	bne.n	8008ac4 <_scanf_i+0x54>
 8008b36:	6863      	ldr	r3, [r4, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <_scanf_i+0xd0>
 8008b3c:	330a      	adds	r3, #10
 8008b3e:	6063      	str	r3, [r4, #4]
 8008b40:	2110      	movs	r1, #16
 8008b42:	2700      	movs	r7, #0
 8008b44:	6863      	ldr	r3, [r4, #4]
 8008b46:	6960      	ldr	r0, [r4, #20]
 8008b48:	1ac9      	subs	r1, r1, r3
 8008b4a:	4b49      	ldr	r3, [pc, #292]	; (8008c70 <_scanf_i+0x200>)
 8008b4c:	18c9      	adds	r1, r1, r3
 8008b4e:	f000 f893 	bl	8008c78 <__sccl>
 8008b52:	9d03      	ldr	r5, [sp, #12]
 8008b54:	68a3      	ldr	r3, [r4, #8]
 8008b56:	6822      	ldr	r2, [r4, #0]
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d041      	beq.n	8008be2 <_scanf_i+0x172>
 8008b5e:	6831      	ldr	r1, [r6, #0]
 8008b60:	6963      	ldr	r3, [r4, #20]
 8008b62:	7808      	ldrb	r0, [r1, #0]
 8008b64:	5c1b      	ldrb	r3, [r3, r0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d03b      	beq.n	8008be2 <_scanf_i+0x172>
 8008b6a:	2830      	cmp	r0, #48	; 0x30
 8008b6c:	d129      	bne.n	8008bc2 <_scanf_i+0x152>
 8008b6e:	2380      	movs	r3, #128	; 0x80
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	421a      	tst	r2, r3
 8008b74:	d025      	beq.n	8008bc2 <_scanf_i+0x152>
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	3701      	adds	r7, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <_scanf_i+0x11a>
 8008b7e:	001a      	movs	r2, r3
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	3a01      	subs	r2, #1
 8008b84:	3301      	adds	r3, #1
 8008b86:	9204      	str	r2, [sp, #16]
 8008b88:	60a3      	str	r3, [r4, #8]
 8008b8a:	6873      	ldr	r3, [r6, #4]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	6073      	str	r3, [r6, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dd1d      	ble.n	8008bd0 <_scanf_i+0x160>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	3301      	adds	r3, #1
 8008b98:	6033      	str	r3, [r6, #0]
 8008b9a:	68a3      	ldr	r3, [r4, #8]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	60a3      	str	r3, [r4, #8]
 8008ba0:	e7d8      	b.n	8008b54 <_scanf_i+0xe4>
 8008ba2:	2f02      	cmp	r7, #2
 8008ba4:	d1a8      	bne.n	8008af8 <_scanf_i+0x88>
 8008ba6:	21c0      	movs	r1, #192	; 0xc0
 8008ba8:	2380      	movs	r3, #128	; 0x80
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	00c9      	lsls	r1, r1, #3
 8008bae:	4011      	ands	r1, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	d1bf      	bne.n	8008b36 <_scanf_i+0xc6>
 8008bb6:	3bf1      	subs	r3, #241	; 0xf1
 8008bb8:	3bff      	subs	r3, #255	; 0xff
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	33f0      	adds	r3, #240	; 0xf0
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	e799      	b.n	8008af6 <_scanf_i+0x86>
 8008bc2:	4b2c      	ldr	r3, [pc, #176]	; (8008c74 <_scanf_i+0x204>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	780b      	ldrb	r3, [r1, #0]
 8008bca:	702b      	strb	r3, [r5, #0]
 8008bcc:	3501      	adds	r5, #1
 8008bce:	e7dc      	b.n	8008b8a <_scanf_i+0x11a>
 8008bd0:	23c0      	movs	r3, #192	; 0xc0
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	58e3      	ldr	r3, [r4, r3]
 8008bd6:	0031      	movs	r1, r6
 8008bd8:	9805      	ldr	r0, [sp, #20]
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	4798      	blx	r3
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d0db      	beq.n	8008b9a <_scanf_i+0x12a>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	05db      	lsls	r3, r3, #23
 8008be6:	d50e      	bpl.n	8008c06 <_scanf_i+0x196>
 8008be8:	9b01      	ldr	r3, [sp, #4]
 8008bea:	429d      	cmp	r5, r3
 8008bec:	d907      	bls.n	8008bfe <_scanf_i+0x18e>
 8008bee:	23be      	movs	r3, #190	; 0xbe
 8008bf0:	3d01      	subs	r5, #1
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	0032      	movs	r2, r6
 8008bf6:	7829      	ldrb	r1, [r5, #0]
 8008bf8:	58e3      	ldr	r3, [r4, r3]
 8008bfa:	9805      	ldr	r0, [sp, #20]
 8008bfc:	4798      	blx	r3
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	2001      	movs	r0, #1
 8008c02:	429d      	cmp	r5, r3
 8008c04:	d029      	beq.n	8008c5a <_scanf_i+0x1ea>
 8008c06:	6821      	ldr	r1, [r4, #0]
 8008c08:	2310      	movs	r3, #16
 8008c0a:	000a      	movs	r2, r1
 8008c0c:	401a      	ands	r2, r3
 8008c0e:	4219      	tst	r1, r3
 8008c10:	d11c      	bne.n	8008c4c <_scanf_i+0x1dc>
 8008c12:	702a      	strb	r2, [r5, #0]
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	9901      	ldr	r1, [sp, #4]
 8008c18:	9805      	ldr	r0, [sp, #20]
 8008c1a:	9e06      	ldr	r6, [sp, #24]
 8008c1c:	47b0      	blx	r6
 8008c1e:	9b02      	ldr	r3, [sp, #8]
 8008c20:	6821      	ldr	r1, [r4, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	068a      	lsls	r2, r1, #26
 8008c26:	d507      	bpl.n	8008c38 <_scanf_i+0x1c8>
 8008c28:	1d1a      	adds	r2, r3, #4
 8008c2a:	9902      	ldr	r1, [sp, #8]
 8008c2c:	600a      	str	r2, [r1, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6018      	str	r0, [r3, #0]
 8008c32:	e008      	b.n	8008c46 <_scanf_i+0x1d6>
 8008c34:	2700      	movs	r7, #0
 8008c36:	e7d4      	b.n	8008be2 <_scanf_i+0x172>
 8008c38:	1d1a      	adds	r2, r3, #4
 8008c3a:	07ce      	lsls	r6, r1, #31
 8008c3c:	d5f5      	bpl.n	8008c2a <_scanf_i+0x1ba>
 8008c3e:	9902      	ldr	r1, [sp, #8]
 8008c40:	600a      	str	r2, [r1, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	8018      	strh	r0, [r3, #0]
 8008c46:	68e3      	ldr	r3, [r4, #12]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60e3      	str	r3, [r4, #12]
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	1aed      	subs	r5, r5, r3
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	19ef      	adds	r7, r5, r7
 8008c56:	19df      	adds	r7, r3, r7
 8008c58:	6127      	str	r7, [r4, #16]
 8008c5a:	b00d      	add	sp, #52	; 0x34
 8008c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c5e:	46c0      	nop			; (mov r8, r8)
 8008c60:	080099bc 	.word	0x080099bc
 8008c64:	08008e0d 	.word	0x08008e0d
 8008c68:	08008f29 	.word	0x08008f29
 8008c6c:	fffffaff 	.word	0xfffffaff
 8008c70:	08009e34 	.word	0x08009e34
 8008c74:	fffff6ff 	.word	0xfffff6ff

08008c78 <__sccl>:
 8008c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7a:	780b      	ldrb	r3, [r1, #0]
 8008c7c:	0004      	movs	r4, r0
 8008c7e:	2b5e      	cmp	r3, #94	; 0x5e
 8008c80:	d00c      	beq.n	8008c9c <__sccl+0x24>
 8008c82:	1c48      	adds	r0, r1, #1
 8008c84:	2100      	movs	r1, #0
 8008c86:	0022      	movs	r2, r4
 8008c88:	1c65      	adds	r5, r4, #1
 8008c8a:	35ff      	adds	r5, #255	; 0xff
 8008c8c:	7011      	strb	r1, [r2, #0]
 8008c8e:	3201      	adds	r2, #1
 8008c90:	42aa      	cmp	r2, r5
 8008c92:	d1fb      	bne.n	8008c8c <__sccl+0x14>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d105      	bne.n	8008ca4 <__sccl+0x2c>
 8008c98:	3801      	subs	r0, #1
 8008c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9c:	784b      	ldrb	r3, [r1, #1]
 8008c9e:	1c88      	adds	r0, r1, #2
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	e7f0      	b.n	8008c86 <__sccl+0xe>
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	262d      	movs	r6, #45	; 0x2d
 8008ca8:	4051      	eors	r1, r2
 8008caa:	0002      	movs	r2, r0
 8008cac:	54e1      	strb	r1, [r4, r3]
 8008cae:	7815      	ldrb	r5, [r2, #0]
 8008cb0:	1c50      	adds	r0, r2, #1
 8008cb2:	2d2d      	cmp	r5, #45	; 0x2d
 8008cb4:	d009      	beq.n	8008cca <__sccl+0x52>
 8008cb6:	2d5d      	cmp	r5, #93	; 0x5d
 8008cb8:	d0ef      	beq.n	8008c9a <__sccl+0x22>
 8008cba:	2d00      	cmp	r5, #0
 8008cbc:	d101      	bne.n	8008cc2 <__sccl+0x4a>
 8008cbe:	0010      	movs	r0, r2
 8008cc0:	e7eb      	b.n	8008c9a <__sccl+0x22>
 8008cc2:	002b      	movs	r3, r5
 8008cc4:	e7f1      	b.n	8008caa <__sccl+0x32>
 8008cc6:	0033      	movs	r3, r6
 8008cc8:	e7ef      	b.n	8008caa <__sccl+0x32>
 8008cca:	7855      	ldrb	r5, [r2, #1]
 8008ccc:	2d5d      	cmp	r5, #93	; 0x5d
 8008cce:	d0fa      	beq.n	8008cc6 <__sccl+0x4e>
 8008cd0:	42ab      	cmp	r3, r5
 8008cd2:	dcf8      	bgt.n	8008cc6 <__sccl+0x4e>
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	3202      	adds	r2, #2
 8008cd8:	3001      	adds	r0, #1
 8008cda:	5421      	strb	r1, [r4, r0]
 8008cdc:	4285      	cmp	r5, r0
 8008cde:	dcfb      	bgt.n	8008cd8 <__sccl+0x60>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	1c5f      	adds	r7, r3, #1
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	da01      	bge.n	8008cec <__sccl+0x74>
 8008ce8:	1ae8      	subs	r0, r5, r3
 8008cea:	3801      	subs	r0, #1
 8008cec:	183b      	adds	r3, r7, r0
 8008cee:	e7de      	b.n	8008cae <__sccl+0x36>

08008cf0 <_strtol_l.constprop.0>:
 8008cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	001e      	movs	r6, r3
 8008cf6:	9005      	str	r0, [sp, #20]
 8008cf8:	9101      	str	r1, [sp, #4]
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d045      	beq.n	8008d8c <_strtol_l.constprop.0+0x9c>
 8008d00:	000b      	movs	r3, r1
 8008d02:	2e24      	cmp	r6, #36	; 0x24
 8008d04:	d842      	bhi.n	8008d8c <_strtol_l.constprop.0+0x9c>
 8008d06:	4a3f      	ldr	r2, [pc, #252]	; (8008e04 <_strtol_l.constprop.0+0x114>)
 8008d08:	2108      	movs	r1, #8
 8008d0a:	4694      	mov	ip, r2
 8008d0c:	001a      	movs	r2, r3
 8008d0e:	4660      	mov	r0, ip
 8008d10:	7814      	ldrb	r4, [r2, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	5d00      	ldrb	r0, [r0, r4]
 8008d16:	001d      	movs	r5, r3
 8008d18:	0007      	movs	r7, r0
 8008d1a:	400f      	ands	r7, r1
 8008d1c:	4208      	tst	r0, r1
 8008d1e:	d1f5      	bne.n	8008d0c <_strtol_l.constprop.0+0x1c>
 8008d20:	2c2d      	cmp	r4, #45	; 0x2d
 8008d22:	d13a      	bne.n	8008d9a <_strtol_l.constprop.0+0xaa>
 8008d24:	2701      	movs	r7, #1
 8008d26:	781c      	ldrb	r4, [r3, #0]
 8008d28:	1c95      	adds	r5, r2, #2
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d065      	beq.n	8008dfa <_strtol_l.constprop.0+0x10a>
 8008d2e:	2e10      	cmp	r6, #16
 8008d30:	d109      	bne.n	8008d46 <_strtol_l.constprop.0+0x56>
 8008d32:	2c30      	cmp	r4, #48	; 0x30
 8008d34:	d107      	bne.n	8008d46 <_strtol_l.constprop.0+0x56>
 8008d36:	2220      	movs	r2, #32
 8008d38:	782b      	ldrb	r3, [r5, #0]
 8008d3a:	4393      	bics	r3, r2
 8008d3c:	2b58      	cmp	r3, #88	; 0x58
 8008d3e:	d157      	bne.n	8008df0 <_strtol_l.constprop.0+0x100>
 8008d40:	2610      	movs	r6, #16
 8008d42:	786c      	ldrb	r4, [r5, #1]
 8008d44:	3502      	adds	r5, #2
 8008d46:	4b30      	ldr	r3, [pc, #192]	; (8008e08 <_strtol_l.constprop.0+0x118>)
 8008d48:	0031      	movs	r1, r6
 8008d4a:	18fb      	adds	r3, r7, r3
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	f7f7 fa6e 	bl	8000230 <__aeabi_uidivmod>
 8008d54:	2300      	movs	r3, #0
 8008d56:	2201      	movs	r2, #1
 8008d58:	4684      	mov	ip, r0
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	9104      	str	r1, [sp, #16]
 8008d5e:	4252      	negs	r2, r2
 8008d60:	0021      	movs	r1, r4
 8008d62:	3930      	subs	r1, #48	; 0x30
 8008d64:	2909      	cmp	r1, #9
 8008d66:	d81d      	bhi.n	8008da4 <_strtol_l.constprop.0+0xb4>
 8008d68:	000c      	movs	r4, r1
 8008d6a:	42a6      	cmp	r6, r4
 8008d6c:	dd28      	ble.n	8008dc0 <_strtol_l.constprop.0+0xd0>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	db24      	blt.n	8008dbc <_strtol_l.constprop.0+0xcc>
 8008d72:	0013      	movs	r3, r2
 8008d74:	4584      	cmp	ip, r0
 8008d76:	d306      	bcc.n	8008d86 <_strtol_l.constprop.0+0x96>
 8008d78:	d102      	bne.n	8008d80 <_strtol_l.constprop.0+0x90>
 8008d7a:	9904      	ldr	r1, [sp, #16]
 8008d7c:	42a1      	cmp	r1, r4
 8008d7e:	db02      	blt.n	8008d86 <_strtol_l.constprop.0+0x96>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4370      	muls	r0, r6
 8008d84:	1820      	adds	r0, r4, r0
 8008d86:	782c      	ldrb	r4, [r5, #0]
 8008d88:	3501      	adds	r5, #1
 8008d8a:	e7e9      	b.n	8008d60 <_strtol_l.constprop.0+0x70>
 8008d8c:	f7ff f87c 	bl	8007e88 <__errno>
 8008d90:	2316      	movs	r3, #22
 8008d92:	6003      	str	r3, [r0, #0]
 8008d94:	2000      	movs	r0, #0
 8008d96:	b007      	add	sp, #28
 8008d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9a:	2c2b      	cmp	r4, #43	; 0x2b
 8008d9c:	d1c5      	bne.n	8008d2a <_strtol_l.constprop.0+0x3a>
 8008d9e:	781c      	ldrb	r4, [r3, #0]
 8008da0:	1c95      	adds	r5, r2, #2
 8008da2:	e7c2      	b.n	8008d2a <_strtol_l.constprop.0+0x3a>
 8008da4:	0021      	movs	r1, r4
 8008da6:	3941      	subs	r1, #65	; 0x41
 8008da8:	2919      	cmp	r1, #25
 8008daa:	d801      	bhi.n	8008db0 <_strtol_l.constprop.0+0xc0>
 8008dac:	3c37      	subs	r4, #55	; 0x37
 8008dae:	e7dc      	b.n	8008d6a <_strtol_l.constprop.0+0x7a>
 8008db0:	0021      	movs	r1, r4
 8008db2:	3961      	subs	r1, #97	; 0x61
 8008db4:	2919      	cmp	r1, #25
 8008db6:	d803      	bhi.n	8008dc0 <_strtol_l.constprop.0+0xd0>
 8008db8:	3c57      	subs	r4, #87	; 0x57
 8008dba:	e7d6      	b.n	8008d6a <_strtol_l.constprop.0+0x7a>
 8008dbc:	0013      	movs	r3, r2
 8008dbe:	e7e2      	b.n	8008d86 <_strtol_l.constprop.0+0x96>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	da09      	bge.n	8008dd8 <_strtol_l.constprop.0+0xe8>
 8008dc4:	2322      	movs	r3, #34	; 0x22
 8008dc6:	9a05      	ldr	r2, [sp, #20]
 8008dc8:	9803      	ldr	r0, [sp, #12]
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0e1      	beq.n	8008d96 <_strtol_l.constprop.0+0xa6>
 8008dd2:	1e6b      	subs	r3, r5, #1
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	e007      	b.n	8008de8 <_strtol_l.constprop.0+0xf8>
 8008dd8:	2f00      	cmp	r7, #0
 8008dda:	d000      	beq.n	8008dde <_strtol_l.constprop.0+0xee>
 8008ddc:	4240      	negs	r0, r0
 8008dde:	9a02      	ldr	r2, [sp, #8]
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	d0d8      	beq.n	8008d96 <_strtol_l.constprop.0+0xa6>
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1f4      	bne.n	8008dd2 <_strtol_l.constprop.0+0xe2>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	9a01      	ldr	r2, [sp, #4]
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e7d2      	b.n	8008d96 <_strtol_l.constprop.0+0xa6>
 8008df0:	2430      	movs	r4, #48	; 0x30
 8008df2:	2e00      	cmp	r6, #0
 8008df4:	d1a7      	bne.n	8008d46 <_strtol_l.constprop.0+0x56>
 8008df6:	3608      	adds	r6, #8
 8008df8:	e7a5      	b.n	8008d46 <_strtol_l.constprop.0+0x56>
 8008dfa:	2c30      	cmp	r4, #48	; 0x30
 8008dfc:	d09b      	beq.n	8008d36 <_strtol_l.constprop.0+0x46>
 8008dfe:	260a      	movs	r6, #10
 8008e00:	e7a1      	b.n	8008d46 <_strtol_l.constprop.0+0x56>
 8008e02:	46c0      	nop			; (mov r8, r8)
 8008e04:	08009e47 	.word	0x08009e47
 8008e08:	7fffffff 	.word	0x7fffffff

08008e0c <_strtol_r>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	f7ff ff6f 	bl	8008cf0 <_strtol_l.constprop.0>
 8008e12:	bd10      	pop	{r4, pc}

08008e14 <_strtoul_l.constprop.0>:
 8008e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e16:	b087      	sub	sp, #28
 8008e18:	9202      	str	r2, [sp, #8]
 8008e1a:	4a42      	ldr	r2, [pc, #264]	; (8008f24 <_strtoul_l.constprop.0+0x110>)
 8008e1c:	001e      	movs	r6, r3
 8008e1e:	9101      	str	r1, [sp, #4]
 8008e20:	000b      	movs	r3, r1
 8008e22:	4694      	mov	ip, r2
 8008e24:	2108      	movs	r1, #8
 8008e26:	9005      	str	r0, [sp, #20]
 8008e28:	001a      	movs	r2, r3
 8008e2a:	4660      	mov	r0, ip
 8008e2c:	7814      	ldrb	r4, [r2, #0]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	5d00      	ldrb	r0, [r0, r4]
 8008e32:	001d      	movs	r5, r3
 8008e34:	0007      	movs	r7, r0
 8008e36:	400f      	ands	r7, r1
 8008e38:	4208      	tst	r0, r1
 8008e3a:	d1f5      	bne.n	8008e28 <_strtoul_l.constprop.0+0x14>
 8008e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e3e:	d13a      	bne.n	8008eb6 <_strtoul_l.constprop.0+0xa2>
 8008e40:	2701      	movs	r7, #1
 8008e42:	781c      	ldrb	r4, [r3, #0]
 8008e44:	1c95      	adds	r5, r2, #2
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	d067      	beq.n	8008f1a <_strtoul_l.constprop.0+0x106>
 8008e4a:	2e10      	cmp	r6, #16
 8008e4c:	d109      	bne.n	8008e62 <_strtoul_l.constprop.0+0x4e>
 8008e4e:	2c30      	cmp	r4, #48	; 0x30
 8008e50:	d107      	bne.n	8008e62 <_strtoul_l.constprop.0+0x4e>
 8008e52:	2220      	movs	r2, #32
 8008e54:	782b      	ldrb	r3, [r5, #0]
 8008e56:	4393      	bics	r3, r2
 8008e58:	2b58      	cmp	r3, #88	; 0x58
 8008e5a:	d159      	bne.n	8008f10 <_strtoul_l.constprop.0+0xfc>
 8008e5c:	2610      	movs	r6, #16
 8008e5e:	786c      	ldrb	r4, [r5, #1]
 8008e60:	3502      	adds	r5, #2
 8008e62:	2001      	movs	r0, #1
 8008e64:	0031      	movs	r1, r6
 8008e66:	4240      	negs	r0, r0
 8008e68:	f7f7 f95c 	bl	8000124 <__udivsi3>
 8008e6c:	9003      	str	r0, [sp, #12]
 8008e6e:	2001      	movs	r0, #1
 8008e70:	0031      	movs	r1, r6
 8008e72:	4240      	negs	r0, r0
 8008e74:	f7f7 f9dc 	bl	8000230 <__aeabi_uidivmod>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9104      	str	r1, [sp, #16]
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	2201      	movs	r2, #1
 8008e80:	0018      	movs	r0, r3
 8008e82:	468c      	mov	ip, r1
 8008e84:	4252      	negs	r2, r2
 8008e86:	0021      	movs	r1, r4
 8008e88:	3930      	subs	r1, #48	; 0x30
 8008e8a:	2909      	cmp	r1, #9
 8008e8c:	d818      	bhi.n	8008ec0 <_strtoul_l.constprop.0+0xac>
 8008e8e:	000c      	movs	r4, r1
 8008e90:	42a6      	cmp	r6, r4
 8008e92:	dd23      	ble.n	8008edc <_strtoul_l.constprop.0+0xc8>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	db1f      	blt.n	8008ed8 <_strtoul_l.constprop.0+0xc4>
 8008e98:	9903      	ldr	r1, [sp, #12]
 8008e9a:	0013      	movs	r3, r2
 8008e9c:	4281      	cmp	r1, r0
 8008e9e:	d307      	bcc.n	8008eb0 <_strtoul_l.constprop.0+0x9c>
 8008ea0:	d103      	bne.n	8008eaa <_strtoul_l.constprop.0+0x96>
 8008ea2:	9904      	ldr	r1, [sp, #16]
 8008ea4:	0013      	movs	r3, r2
 8008ea6:	42a1      	cmp	r1, r4
 8008ea8:	db02      	blt.n	8008eb0 <_strtoul_l.constprop.0+0x9c>
 8008eaa:	4663      	mov	r3, ip
 8008eac:	4370      	muls	r0, r6
 8008eae:	1820      	adds	r0, r4, r0
 8008eb0:	782c      	ldrb	r4, [r5, #0]
 8008eb2:	3501      	adds	r5, #1
 8008eb4:	e7e7      	b.n	8008e86 <_strtoul_l.constprop.0+0x72>
 8008eb6:	2c2b      	cmp	r4, #43	; 0x2b
 8008eb8:	d1c5      	bne.n	8008e46 <_strtoul_l.constprop.0+0x32>
 8008eba:	781c      	ldrb	r4, [r3, #0]
 8008ebc:	1c95      	adds	r5, r2, #2
 8008ebe:	e7c2      	b.n	8008e46 <_strtoul_l.constprop.0+0x32>
 8008ec0:	0021      	movs	r1, r4
 8008ec2:	3941      	subs	r1, #65	; 0x41
 8008ec4:	2919      	cmp	r1, #25
 8008ec6:	d801      	bhi.n	8008ecc <_strtoul_l.constprop.0+0xb8>
 8008ec8:	3c37      	subs	r4, #55	; 0x37
 8008eca:	e7e1      	b.n	8008e90 <_strtoul_l.constprop.0+0x7c>
 8008ecc:	0021      	movs	r1, r4
 8008ece:	3961      	subs	r1, #97	; 0x61
 8008ed0:	2919      	cmp	r1, #25
 8008ed2:	d803      	bhi.n	8008edc <_strtoul_l.constprop.0+0xc8>
 8008ed4:	3c57      	subs	r4, #87	; 0x57
 8008ed6:	e7db      	b.n	8008e90 <_strtoul_l.constprop.0+0x7c>
 8008ed8:	0013      	movs	r3, r2
 8008eda:	e7e9      	b.n	8008eb0 <_strtoul_l.constprop.0+0x9c>
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	da09      	bge.n	8008ef4 <_strtoul_l.constprop.0+0xe0>
 8008ee0:	2322      	movs	r3, #34	; 0x22
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	9a05      	ldr	r2, [sp, #20]
 8008ee6:	4240      	negs	r0, r0
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	9b02      	ldr	r3, [sp, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d109      	bne.n	8008f04 <_strtoul_l.constprop.0+0xf0>
 8008ef0:	b007      	add	sp, #28
 8008ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef4:	2f00      	cmp	r7, #0
 8008ef6:	d000      	beq.n	8008efa <_strtoul_l.constprop.0+0xe6>
 8008ef8:	4240      	negs	r0, r0
 8008efa:	9a02      	ldr	r2, [sp, #8]
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	d0f7      	beq.n	8008ef0 <_strtoul_l.constprop.0+0xdc>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <_strtoul_l.constprop.0+0xf4>
 8008f04:	1e6b      	subs	r3, r5, #1
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	9b02      	ldr	r3, [sp, #8]
 8008f0a:	9a01      	ldr	r2, [sp, #4]
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e7ef      	b.n	8008ef0 <_strtoul_l.constprop.0+0xdc>
 8008f10:	2430      	movs	r4, #48	; 0x30
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	d1a5      	bne.n	8008e62 <_strtoul_l.constprop.0+0x4e>
 8008f16:	3608      	adds	r6, #8
 8008f18:	e7a3      	b.n	8008e62 <_strtoul_l.constprop.0+0x4e>
 8008f1a:	2c30      	cmp	r4, #48	; 0x30
 8008f1c:	d099      	beq.n	8008e52 <_strtoul_l.constprop.0+0x3e>
 8008f1e:	260a      	movs	r6, #10
 8008f20:	e79f      	b.n	8008e62 <_strtoul_l.constprop.0+0x4e>
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	08009e47 	.word	0x08009e47

08008f28 <_strtoul_r>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	f7ff ff73 	bl	8008e14 <_strtoul_l.constprop.0>
 8008f2e:	bd10      	pop	{r4, pc}

08008f30 <__submore>:
 8008f30:	000b      	movs	r3, r1
 8008f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f34:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8008f36:	3344      	adds	r3, #68	; 0x44
 8008f38:	000c      	movs	r4, r1
 8008f3a:	429d      	cmp	r5, r3
 8008f3c:	d11c      	bne.n	8008f78 <__submore+0x48>
 8008f3e:	2680      	movs	r6, #128	; 0x80
 8008f40:	00f6      	lsls	r6, r6, #3
 8008f42:	0031      	movs	r1, r6
 8008f44:	f000 f8ac 	bl	80090a0 <_malloc_r>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d102      	bne.n	8008f52 <__submore+0x22>
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	4240      	negs	r0, r0
 8008f50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f52:	0023      	movs	r3, r4
 8008f54:	6360      	str	r0, [r4, #52]	; 0x34
 8008f56:	63a6      	str	r6, [r4, #56]	; 0x38
 8008f58:	3346      	adds	r3, #70	; 0x46
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <__submore+0x70>)
 8008f5e:	54c2      	strb	r2, [r0, r3]
 8008f60:	0023      	movs	r3, r4
 8008f62:	3345      	adds	r3, #69	; 0x45
 8008f64:	781a      	ldrb	r2, [r3, #0]
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <__submore+0x74>)
 8008f68:	54c2      	strb	r2, [r0, r3]
 8008f6a:	782a      	ldrb	r2, [r5, #0]
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <__submore+0x78>)
 8008f6e:	54c2      	strb	r2, [r0, r3]
 8008f70:	18c0      	adds	r0, r0, r3
 8008f72:	6020      	str	r0, [r4, #0]
 8008f74:	2000      	movs	r0, #0
 8008f76:	e7eb      	b.n	8008f50 <__submore+0x20>
 8008f78:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8008f7a:	0029      	movs	r1, r5
 8008f7c:	0073      	lsls	r3, r6, #1
 8008f7e:	001a      	movs	r2, r3
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	f000 f903 	bl	800918c <_realloc_r>
 8008f86:	1e05      	subs	r5, r0, #0
 8008f88:	d0e0      	beq.n	8008f4c <__submore+0x1c>
 8008f8a:	1987      	adds	r7, r0, r6
 8008f8c:	0001      	movs	r1, r0
 8008f8e:	0032      	movs	r2, r6
 8008f90:	0038      	movs	r0, r7
 8008f92:	f7fe ffa3 	bl	8007edc <memcpy>
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	6027      	str	r7, [r4, #0]
 8008f9a:	6365      	str	r5, [r4, #52]	; 0x34
 8008f9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f9e:	e7e9      	b.n	8008f74 <__submore+0x44>
 8008fa0:	000003ff 	.word	0x000003ff
 8008fa4:	000003fe 	.word	0x000003fe
 8008fa8:	000003fd 	.word	0x000003fd

08008fac <__retarget_lock_acquire_recursive>:
 8008fac:	4770      	bx	lr

08008fae <__retarget_lock_release_recursive>:
 8008fae:	4770      	bx	lr

08008fb0 <memchr>:
 8008fb0:	b2c9      	uxtb	r1, r1
 8008fb2:	1882      	adds	r2, r0, r2
 8008fb4:	4290      	cmp	r0, r2
 8008fb6:	d101      	bne.n	8008fbc <memchr+0xc>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	4770      	bx	lr
 8008fbc:	7803      	ldrb	r3, [r0, #0]
 8008fbe:	428b      	cmp	r3, r1
 8008fc0:	d0fb      	beq.n	8008fba <memchr+0xa>
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	e7f6      	b.n	8008fb4 <memchr+0x4>
	...

08008fc8 <_free_r>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	0005      	movs	r5, r0
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	d010      	beq.n	8008ff2 <_free_r+0x2a>
 8008fd0:	1f0c      	subs	r4, r1, #4
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	da00      	bge.n	8008fda <_free_r+0x12>
 8008fd8:	18e4      	adds	r4, r4, r3
 8008fda:	0028      	movs	r0, r5
 8008fdc:	f000 f918 	bl	8009210 <__malloc_lock>
 8008fe0:	4a1d      	ldr	r2, [pc, #116]	; (8009058 <_free_r+0x90>)
 8008fe2:	6813      	ldr	r3, [r2, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d105      	bne.n	8008ff4 <_free_r+0x2c>
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	6014      	str	r4, [r2, #0]
 8008fec:	0028      	movs	r0, r5
 8008fee:	f000 f917 	bl	8009220 <__malloc_unlock>
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d908      	bls.n	800900a <_free_r+0x42>
 8008ff8:	6821      	ldr	r1, [r4, #0]
 8008ffa:	1860      	adds	r0, r4, r1
 8008ffc:	4283      	cmp	r3, r0
 8008ffe:	d1f3      	bne.n	8008fe8 <_free_r+0x20>
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	1841      	adds	r1, r0, r1
 8009006:	6021      	str	r1, [r4, #0]
 8009008:	e7ee      	b.n	8008fe8 <_free_r+0x20>
 800900a:	001a      	movs	r2, r3
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <_free_r+0x4e>
 8009012:	42a3      	cmp	r3, r4
 8009014:	d9f9      	bls.n	800900a <_free_r+0x42>
 8009016:	6811      	ldr	r1, [r2, #0]
 8009018:	1850      	adds	r0, r2, r1
 800901a:	42a0      	cmp	r0, r4
 800901c:	d10b      	bne.n	8009036 <_free_r+0x6e>
 800901e:	6820      	ldr	r0, [r4, #0]
 8009020:	1809      	adds	r1, r1, r0
 8009022:	1850      	adds	r0, r2, r1
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	4283      	cmp	r3, r0
 8009028:	d1e0      	bne.n	8008fec <_free_r+0x24>
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	1841      	adds	r1, r0, r1
 8009030:	6011      	str	r1, [r2, #0]
 8009032:	6053      	str	r3, [r2, #4]
 8009034:	e7da      	b.n	8008fec <_free_r+0x24>
 8009036:	42a0      	cmp	r0, r4
 8009038:	d902      	bls.n	8009040 <_free_r+0x78>
 800903a:	230c      	movs	r3, #12
 800903c:	602b      	str	r3, [r5, #0]
 800903e:	e7d5      	b.n	8008fec <_free_r+0x24>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	1860      	adds	r0, r4, r1
 8009044:	4283      	cmp	r3, r0
 8009046:	d103      	bne.n	8009050 <_free_r+0x88>
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	1841      	adds	r1, r0, r1
 800904e:	6021      	str	r1, [r4, #0]
 8009050:	6063      	str	r3, [r4, #4]
 8009052:	6054      	str	r4, [r2, #4]
 8009054:	e7ca      	b.n	8008fec <_free_r+0x24>
 8009056:	46c0      	nop			; (mov r8, r8)
 8009058:	20000f04 	.word	0x20000f04

0800905c <sbrk_aligned>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4e0f      	ldr	r6, [pc, #60]	; (800909c <sbrk_aligned+0x40>)
 8009060:	000d      	movs	r5, r1
 8009062:	6831      	ldr	r1, [r6, #0]
 8009064:	0004      	movs	r4, r0
 8009066:	2900      	cmp	r1, #0
 8009068:	d102      	bne.n	8009070 <sbrk_aligned+0x14>
 800906a:	f000 f8bf 	bl	80091ec <_sbrk_r>
 800906e:	6030      	str	r0, [r6, #0]
 8009070:	0029      	movs	r1, r5
 8009072:	0020      	movs	r0, r4
 8009074:	f000 f8ba 	bl	80091ec <_sbrk_r>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d00a      	beq.n	8009092 <sbrk_aligned+0x36>
 800907c:	2303      	movs	r3, #3
 800907e:	1cc5      	adds	r5, r0, #3
 8009080:	439d      	bics	r5, r3
 8009082:	42a8      	cmp	r0, r5
 8009084:	d007      	beq.n	8009096 <sbrk_aligned+0x3a>
 8009086:	1a29      	subs	r1, r5, r0
 8009088:	0020      	movs	r0, r4
 800908a:	f000 f8af 	bl	80091ec <_sbrk_r>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d101      	bne.n	8009096 <sbrk_aligned+0x3a>
 8009092:	2501      	movs	r5, #1
 8009094:	426d      	negs	r5, r5
 8009096:	0028      	movs	r0, r5
 8009098:	bd70      	pop	{r4, r5, r6, pc}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	20000f08 	.word	0x20000f08

080090a0 <_malloc_r>:
 80090a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090a2:	2203      	movs	r2, #3
 80090a4:	1ccb      	adds	r3, r1, #3
 80090a6:	4393      	bics	r3, r2
 80090a8:	3308      	adds	r3, #8
 80090aa:	0006      	movs	r6, r0
 80090ac:	001f      	movs	r7, r3
 80090ae:	2b0c      	cmp	r3, #12
 80090b0:	d232      	bcs.n	8009118 <_malloc_r+0x78>
 80090b2:	270c      	movs	r7, #12
 80090b4:	42b9      	cmp	r1, r7
 80090b6:	d831      	bhi.n	800911c <_malloc_r+0x7c>
 80090b8:	0030      	movs	r0, r6
 80090ba:	f000 f8a9 	bl	8009210 <__malloc_lock>
 80090be:	4d32      	ldr	r5, [pc, #200]	; (8009188 <_malloc_r+0xe8>)
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	001c      	movs	r4, r3
 80090c4:	2c00      	cmp	r4, #0
 80090c6:	d12e      	bne.n	8009126 <_malloc_r+0x86>
 80090c8:	0039      	movs	r1, r7
 80090ca:	0030      	movs	r0, r6
 80090cc:	f7ff ffc6 	bl	800905c <sbrk_aligned>
 80090d0:	0004      	movs	r4, r0
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d11e      	bne.n	8009114 <_malloc_r+0x74>
 80090d6:	682c      	ldr	r4, [r5, #0]
 80090d8:	0025      	movs	r5, r4
 80090da:	2d00      	cmp	r5, #0
 80090dc:	d14a      	bne.n	8009174 <_malloc_r+0xd4>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	0029      	movs	r1, r5
 80090e2:	18e3      	adds	r3, r4, r3
 80090e4:	0030      	movs	r0, r6
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	f000 f880 	bl	80091ec <_sbrk_r>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	4283      	cmp	r3, r0
 80090f0:	d143      	bne.n	800917a <_malloc_r+0xda>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	3703      	adds	r7, #3
 80090f6:	1aff      	subs	r7, r7, r3
 80090f8:	2303      	movs	r3, #3
 80090fa:	439f      	bics	r7, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	2f0c      	cmp	r7, #12
 8009100:	d200      	bcs.n	8009104 <_malloc_r+0x64>
 8009102:	270c      	movs	r7, #12
 8009104:	0039      	movs	r1, r7
 8009106:	0030      	movs	r0, r6
 8009108:	f7ff ffa8 	bl	800905c <sbrk_aligned>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d034      	beq.n	800917a <_malloc_r+0xda>
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	19df      	adds	r7, r3, r7
 8009114:	6027      	str	r7, [r4, #0]
 8009116:	e013      	b.n	8009140 <_malloc_r+0xa0>
 8009118:	2b00      	cmp	r3, #0
 800911a:	dacb      	bge.n	80090b4 <_malloc_r+0x14>
 800911c:	230c      	movs	r3, #12
 800911e:	2500      	movs	r5, #0
 8009120:	6033      	str	r3, [r6, #0]
 8009122:	0028      	movs	r0, r5
 8009124:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009126:	6822      	ldr	r2, [r4, #0]
 8009128:	1bd1      	subs	r1, r2, r7
 800912a:	d420      	bmi.n	800916e <_malloc_r+0xce>
 800912c:	290b      	cmp	r1, #11
 800912e:	d917      	bls.n	8009160 <_malloc_r+0xc0>
 8009130:	19e2      	adds	r2, r4, r7
 8009132:	6027      	str	r7, [r4, #0]
 8009134:	42a3      	cmp	r3, r4
 8009136:	d111      	bne.n	800915c <_malloc_r+0xbc>
 8009138:	602a      	str	r2, [r5, #0]
 800913a:	6863      	ldr	r3, [r4, #4]
 800913c:	6011      	str	r1, [r2, #0]
 800913e:	6053      	str	r3, [r2, #4]
 8009140:	0030      	movs	r0, r6
 8009142:	0025      	movs	r5, r4
 8009144:	f000 f86c 	bl	8009220 <__malloc_unlock>
 8009148:	2207      	movs	r2, #7
 800914a:	350b      	adds	r5, #11
 800914c:	1d23      	adds	r3, r4, #4
 800914e:	4395      	bics	r5, r2
 8009150:	1aea      	subs	r2, r5, r3
 8009152:	429d      	cmp	r5, r3
 8009154:	d0e5      	beq.n	8009122 <_malloc_r+0x82>
 8009156:	1b5b      	subs	r3, r3, r5
 8009158:	50a3      	str	r3, [r4, r2]
 800915a:	e7e2      	b.n	8009122 <_malloc_r+0x82>
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	e7ec      	b.n	800913a <_malloc_r+0x9a>
 8009160:	6862      	ldr	r2, [r4, #4]
 8009162:	42a3      	cmp	r3, r4
 8009164:	d101      	bne.n	800916a <_malloc_r+0xca>
 8009166:	602a      	str	r2, [r5, #0]
 8009168:	e7ea      	b.n	8009140 <_malloc_r+0xa0>
 800916a:	605a      	str	r2, [r3, #4]
 800916c:	e7e8      	b.n	8009140 <_malloc_r+0xa0>
 800916e:	0023      	movs	r3, r4
 8009170:	6864      	ldr	r4, [r4, #4]
 8009172:	e7a7      	b.n	80090c4 <_malloc_r+0x24>
 8009174:	002c      	movs	r4, r5
 8009176:	686d      	ldr	r5, [r5, #4]
 8009178:	e7af      	b.n	80090da <_malloc_r+0x3a>
 800917a:	230c      	movs	r3, #12
 800917c:	0030      	movs	r0, r6
 800917e:	6033      	str	r3, [r6, #0]
 8009180:	f000 f84e 	bl	8009220 <__malloc_unlock>
 8009184:	e7cd      	b.n	8009122 <_malloc_r+0x82>
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	20000f04 	.word	0x20000f04

0800918c <_realloc_r>:
 800918c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800918e:	0007      	movs	r7, r0
 8009190:	000e      	movs	r6, r1
 8009192:	0014      	movs	r4, r2
 8009194:	2900      	cmp	r1, #0
 8009196:	d105      	bne.n	80091a4 <_realloc_r+0x18>
 8009198:	0011      	movs	r1, r2
 800919a:	f7ff ff81 	bl	80090a0 <_malloc_r>
 800919e:	0005      	movs	r5, r0
 80091a0:	0028      	movs	r0, r5
 80091a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	d103      	bne.n	80091b0 <_realloc_r+0x24>
 80091a8:	f7ff ff0e 	bl	8008fc8 <_free_r>
 80091ac:	0025      	movs	r5, r4
 80091ae:	e7f7      	b.n	80091a0 <_realloc_r+0x14>
 80091b0:	f000 f83e 	bl	8009230 <_malloc_usable_size_r>
 80091b4:	9001      	str	r0, [sp, #4]
 80091b6:	4284      	cmp	r4, r0
 80091b8:	d803      	bhi.n	80091c2 <_realloc_r+0x36>
 80091ba:	0035      	movs	r5, r6
 80091bc:	0843      	lsrs	r3, r0, #1
 80091be:	42a3      	cmp	r3, r4
 80091c0:	d3ee      	bcc.n	80091a0 <_realloc_r+0x14>
 80091c2:	0021      	movs	r1, r4
 80091c4:	0038      	movs	r0, r7
 80091c6:	f7ff ff6b 	bl	80090a0 <_malloc_r>
 80091ca:	1e05      	subs	r5, r0, #0
 80091cc:	d0e8      	beq.n	80091a0 <_realloc_r+0x14>
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	0022      	movs	r2, r4
 80091d2:	429c      	cmp	r4, r3
 80091d4:	d900      	bls.n	80091d8 <_realloc_r+0x4c>
 80091d6:	001a      	movs	r2, r3
 80091d8:	0031      	movs	r1, r6
 80091da:	0028      	movs	r0, r5
 80091dc:	f7fe fe7e 	bl	8007edc <memcpy>
 80091e0:	0031      	movs	r1, r6
 80091e2:	0038      	movs	r0, r7
 80091e4:	f7ff fef0 	bl	8008fc8 <_free_r>
 80091e8:	e7da      	b.n	80091a0 <_realloc_r+0x14>
	...

080091ec <_sbrk_r>:
 80091ec:	2300      	movs	r3, #0
 80091ee:	b570      	push	{r4, r5, r6, lr}
 80091f0:	4d06      	ldr	r5, [pc, #24]	; (800920c <_sbrk_r+0x20>)
 80091f2:	0004      	movs	r4, r0
 80091f4:	0008      	movs	r0, r1
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	f7f7 fd24 	bl	8000c44 <_sbrk>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d103      	bne.n	8009208 <_sbrk_r+0x1c>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d000      	beq.n	8009208 <_sbrk_r+0x1c>
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	20000efc 	.word	0x20000efc

08009210 <__malloc_lock>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4802      	ldr	r0, [pc, #8]	; (800921c <__malloc_lock+0xc>)
 8009214:	f7ff feca 	bl	8008fac <__retarget_lock_acquire_recursive>
 8009218:	bd10      	pop	{r4, pc}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	20000f00 	.word	0x20000f00

08009220 <__malloc_unlock>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4802      	ldr	r0, [pc, #8]	; (800922c <__malloc_unlock+0xc>)
 8009224:	f7ff fec3 	bl	8008fae <__retarget_lock_release_recursive>
 8009228:	bd10      	pop	{r4, pc}
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	20000f00 	.word	0x20000f00

08009230 <_malloc_usable_size_r>:
 8009230:	1f0b      	subs	r3, r1, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	1f18      	subs	r0, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	da01      	bge.n	800923e <_malloc_usable_size_r+0xe>
 800923a:	580b      	ldr	r3, [r1, r0]
 800923c:	18c0      	adds	r0, r0, r3
 800923e:	4770      	bx	lr

08009240 <_init>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	46c0      	nop			; (mov r8, r8)
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr

0800924c <_fini>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	46c0      	nop			; (mov r8, r8)
 8009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009252:	bc08      	pop	{r3}
 8009254:	469e      	mov	lr, r3
 8009256:	4770      	bx	lr

08009258 <__FLASH_Program_Fast_veneer>:
 8009258:	b401      	push	{r0}
 800925a:	4802      	ldr	r0, [pc, #8]	; (8009264 <__FLASH_Program_Fast_veneer+0xc>)
 800925c:	4684      	mov	ip, r0
 800925e:	bc01      	pop	{r0}
 8009260:	4760      	bx	ip
 8009262:	bf00      	nop
 8009264:	20000075 	.word	0x20000075

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	                                         .

20000009 <baudHost>:
20000009:	                                         .

2000000a <baud485>:
2000000a:	                                         ..

2000000c <CMD_END>:
2000000c:	00000a0d                                ....

20000010 <_impure_ptr>:
20000010:	20000014                                ... 

20000014 <impure_data>:
20000014:	00000000 08009f68 08009f88 08009f48     ....h.......H...
	...

20000074 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000074:	b580      	push	{r7, lr}
20000076:	b088      	sub	sp, #32
20000078:	af00      	add	r7, sp, #0
2000007a:	6078      	str	r0, [r7, #4]
2000007c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007e:	231f      	movs	r3, #31
20000080:	18fb      	adds	r3, r7, r3
20000082:	2200      	movs	r2, #0
20000084:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000008a:	683b      	ldr	r3, [r7, #0]
2000008c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008e:	4b1a      	ldr	r3, [pc, #104]	; (200000f8 <FLASH_Program_Fast+0x84>)
20000090:	695a      	ldr	r2, [r3, #20]
20000092:	4b19      	ldr	r3, [pc, #100]	; (200000f8 <FLASH_Program_Fast+0x84>)
20000094:	2180      	movs	r1, #128	; 0x80
20000096:	02c9      	lsls	r1, r1, #11
20000098:	430a      	orrs	r2, r1
2000009a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000009c:	f3ef 8310 	mrs	r3, PRIMASK
200000a0:	60fb      	str	r3, [r7, #12]
  return(result);
200000a2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a6:	b672      	cpsid	i
}
200000a8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000aa:	e00f      	b.n	200000cc <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000ac:	697a      	ldr	r2, [r7, #20]
200000ae:	69bb      	ldr	r3, [r7, #24]
200000b0:	6812      	ldr	r2, [r2, #0]
200000b2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b4:	697b      	ldr	r3, [r7, #20]
200000b6:	3304      	adds	r3, #4
200000b8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000ba:	69bb      	ldr	r3, [r7, #24]
200000bc:	3304      	adds	r3, #4
200000be:	61bb      	str	r3, [r7, #24]
    index++;
200000c0:	211f      	movs	r1, #31
200000c2:	187b      	adds	r3, r7, r1
200000c4:	781a      	ldrb	r2, [r3, #0]
200000c6:	187b      	adds	r3, r7, r1
200000c8:	3201      	adds	r2, #1
200000ca:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000cc:	231f      	movs	r3, #31
200000ce:	18fb      	adds	r3, r7, r3
200000d0:	781b      	ldrb	r3, [r3, #0]
200000d2:	2b3f      	cmp	r3, #63	; 0x3f
200000d4:	d9ea      	bls.n	200000ac <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	4b07      	ldr	r3, [pc, #28]	; (200000f8 <FLASH_Program_Fast+0x84>)
200000da:	691a      	ldr	r2, [r3, #16]
200000dc:	2380      	movs	r3, #128	; 0x80
200000de:	025b      	lsls	r3, r3, #9
200000e0:	4013      	ands	r3, r2
200000e2:	d1f9      	bne.n	200000d8 <FLASH_Program_Fast+0x64>
200000e4:	693b      	ldr	r3, [r7, #16]
200000e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e8:	68bb      	ldr	r3, [r7, #8]
200000ea:	f383 8810 	msr	PRIMASK, r3
}
200000ee:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000f0:	46c0      	nop			; (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	b008      	add	sp, #32
200000f6:	bd80      	pop	{r7, pc}
200000f8:	40022000 	.word	0x40022000
